/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 1291.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 2.0], [20.4, 2.0], [20.5, 2.0], [20.6, 2.0], [20.7, 2.0], [20.8, 2.0], [20.9, 2.0], [21.0, 2.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 2.0], [21.8, 2.0], [21.9, 2.0], [22.0, 2.0], [22.1, 2.0], [22.2, 2.0], [22.3, 2.0], [22.4, 2.0], [22.5, 2.0], [22.6, 2.0], [22.7, 2.0], [22.8, 2.0], [22.9, 2.0], [23.0, 2.0], [23.1, 2.0], [23.2, 2.0], [23.3, 2.0], [23.4, 2.0], [23.5, 2.0], [23.6, 2.0], [23.7, 2.0], [23.8, 2.0], [23.9, 2.0], [24.0, 2.0], [24.1, 2.0], [24.2, 2.0], [24.3, 2.0], [24.4, 2.0], [24.5, 2.0], [24.6, 2.0], [24.7, 2.0], [24.8, 2.0], [24.9, 2.0], [25.0, 2.0], [25.1, 2.0], [25.2, 2.0], [25.3, 2.0], [25.4, 2.0], [25.5, 2.0], [25.6, 2.0], [25.7, 2.0], [25.8, 2.0], [25.9, 2.0], [26.0, 2.0], [26.1, 2.0], [26.2, 2.0], [26.3, 2.0], [26.4, 2.0], [26.5, 2.0], [26.6, 2.0], [26.7, 2.0], [26.8, 2.0], [26.9, 2.0], [27.0, 2.0], [27.1, 2.0], [27.2, 2.0], [27.3, 2.0], [27.4, 2.0], [27.5, 2.0], [27.6, 2.0], [27.7, 2.0], [27.8, 2.0], [27.9, 2.0], [28.0, 2.0], [28.1, 2.0], [28.2, 2.0], [28.3, 2.0], [28.4, 2.0], [28.5, 2.0], [28.6, 2.0], [28.7, 2.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 2.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 2.0], [30.6, 2.0], [30.7, 2.0], [30.8, 2.0], [30.9, 2.0], [31.0, 2.0], [31.1, 2.0], [31.2, 2.0], [31.3, 2.0], [31.4, 2.0], [31.5, 2.0], [31.6, 2.0], [31.7, 2.0], [31.8, 2.0], [31.9, 2.0], [32.0, 2.0], [32.1, 2.0], [32.2, 2.0], [32.3, 2.0], [32.4, 2.0], [32.5, 2.0], [32.6, 2.0], [32.7, 2.0], [32.8, 2.0], [32.9, 2.0], [33.0, 2.0], [33.1, 2.0], [33.2, 2.0], [33.3, 2.0], [33.4, 2.0], [33.5, 2.0], [33.6, 2.0], [33.7, 2.0], [33.8, 2.0], [33.9, 2.0], [34.0, 2.0], [34.1, 2.0], [34.2, 2.0], [34.3, 2.0], [34.4, 2.0], [34.5, 2.0], [34.6, 2.0], [34.7, 2.0], [34.8, 3.0], [34.9, 3.0], [35.0, 3.0], [35.1, 3.0], [35.2, 3.0], [35.3, 3.0], [35.4, 3.0], [35.5, 3.0], [35.6, 3.0], [35.7, 3.0], [35.8, 3.0], [35.9, 3.0], [36.0, 3.0], [36.1, 3.0], [36.2, 3.0], [36.3, 3.0], [36.4, 3.0], [36.5, 3.0], [36.6, 3.0], [36.7, 3.0], [36.8, 3.0], [36.9, 3.0], [37.0, 3.0], [37.1, 3.0], [37.2, 3.0], [37.3, 3.0], [37.4, 3.0], [37.5, 3.0], [37.6, 3.0], [37.7, 3.0], [37.8, 3.0], [37.9, 3.0], [38.0, 3.0], [38.1, 3.0], [38.2, 3.0], [38.3, 3.0], [38.4, 4.0], [38.5, 4.0], [38.6, 4.0], [38.7, 4.0], [38.8, 4.0], [38.9, 4.0], [39.0, 4.0], [39.1, 4.0], [39.2, 4.0], [39.3, 4.0], [39.4, 4.0], [39.5, 4.0], [39.6, 4.0], [39.7, 4.0], [39.8, 4.0], [39.9, 4.0], [40.0, 4.0], [40.1, 4.0], [40.2, 4.0], [40.3, 4.0], [40.4, 4.0], [40.5, 4.0], [40.6, 4.0], [40.7, 4.0], [40.8, 5.0], [40.9, 5.0], [41.0, 5.0], [41.1, 5.0], [41.2, 5.0], [41.3, 5.0], [41.4, 5.0], [41.5, 5.0], [41.6, 5.0], [41.7, 5.0], [41.8, 5.0], [41.9, 5.0], [42.0, 5.0], [42.1, 5.0], [42.2, 5.0], [42.3, 5.0], [42.4, 5.0], [42.5, 5.0], [42.6, 6.0], [42.7, 6.0], [42.8, 6.0], [42.9, 6.0], [43.0, 6.0], [43.1, 6.0], [43.2, 6.0], [43.3, 6.0], [43.4, 6.0], [43.5, 6.0], [43.6, 6.0], [43.7, 6.0], [43.8, 6.0], [43.9, 6.0], [44.0, 6.0], [44.1, 7.0], [44.2, 7.0], [44.3, 7.0], [44.4, 7.0], [44.5, 7.0], [44.6, 7.0], [44.7, 7.0], [44.8, 7.0], [44.9, 7.0], [45.0, 8.0], [45.1, 8.0], [45.2, 8.0], [45.3, 8.0], [45.4, 8.0], [45.5, 8.0], [45.6, 8.0], [45.7, 8.0], [45.8, 8.0], [45.9, 8.0], [46.0, 9.0], [46.1, 9.0], [46.2, 9.0], [46.3, 9.0], [46.4, 9.0], [46.5, 9.0], [46.6, 9.0], [46.7, 9.0], [46.8, 9.0], [46.9, 10.0], [47.0, 10.0], [47.1, 10.0], [47.2, 10.0], [47.3, 11.0], [47.4, 11.0], [47.5, 11.0], [47.6, 11.0], [47.7, 12.0], [47.8, 12.0], [47.9, 12.0], [48.0, 13.0], [48.1, 13.0], [48.2, 13.0], [48.3, 13.0], [48.4, 13.0], [48.5, 13.0], [48.6, 13.0], [48.7, 13.0], [48.8, 14.0], [48.9, 14.0], [49.0, 14.0], [49.1, 14.0], [49.2, 14.0], [49.3, 14.0], [49.4, 14.0], [49.5, 15.0], [49.6, 15.0], [49.7, 16.0], [49.8, 16.0], [49.9, 16.0], [50.0, 17.0], [50.1, 17.0], [50.2, 18.0], [50.3, 18.0], [50.4, 18.0], [50.5, 19.0], [50.6, 20.0], [50.7, 20.0], [50.8, 20.0], [50.9, 22.0], [51.0, 22.0], [51.1, 23.0], [51.2, 23.0], [51.3, 27.0], [51.4, 30.0], [51.5, 31.0], [51.6, 32.0], [51.7, 33.0], [51.8, 37.0], [51.9, 37.0], [52.0, 39.0], [52.1, 40.0], [52.2, 41.0], [52.3, 42.0], [52.4, 42.0], [52.5, 46.0], [52.6, 49.0], [52.7, 49.0], [52.8, 50.0], [52.9, 52.0], [53.0, 56.0], [53.1, 56.0], [53.2, 60.0], [53.3, 61.0], [53.4, 63.0], [53.5, 66.0], [53.6, 66.0], [53.7, 67.0], [53.8, 67.0], [53.9, 68.0], [54.0, 68.0], [54.1, 71.0], [54.2, 73.0], [54.3, 74.0], [54.4, 75.0], [54.5, 76.0], [54.6, 77.0], [54.7, 84.0], [54.8, 86.0], [54.9, 87.0], [55.0, 93.0], [55.1, 98.0], [55.2, 108.0], [55.3, 108.0], [55.4, 109.0], [55.5, 109.0], [55.6, 109.0], [55.7, 111.0], [55.8, 118.0], [55.9, 119.0], [56.0, 119.0], [56.1, 119.0], [56.2, 120.0], [56.3, 124.0], [56.4, 128.0], [56.5, 129.0], [56.6, 129.0], [56.7, 133.0], [56.8, 135.0], [56.9, 136.0], [57.0, 136.0], [57.1, 136.0], [57.2, 137.0], [57.3, 139.0], [57.4, 142.0], [57.5, 144.0], [57.6, 145.0], [57.7, 146.0], [57.8, 149.0], [57.9, 156.0], [58.0, 156.0], [58.1, 158.0], [58.2, 159.0], [58.3, 162.0], [58.4, 165.0], [58.5, 170.0], [58.6, 172.0], [58.7, 175.0], [58.8, 183.0], [58.9, 187.0], [59.0, 190.0], [59.1, 192.0], [59.2, 197.0], [59.3, 199.0], [59.4, 202.0], [59.5, 207.0], [59.6, 209.0], [59.7, 213.0], [59.8, 217.0], [59.9, 220.0], [60.0, 220.0], [60.1, 226.0], [60.2, 228.0], [60.3, 231.0], [60.4, 232.0], [60.5, 235.0], [60.6, 246.0], [60.7, 251.0], [60.8, 252.0], [60.9, 254.0], [61.0, 260.0], [61.1, 266.0], [61.2, 267.0], [61.3, 269.0], [61.4, 272.0], [61.5, 278.0], [61.6, 282.0], [61.7, 283.0], [61.8, 290.0], [61.9, 293.0], [62.0, 293.0], [62.1, 297.0], [62.2, 298.0], [62.3, 300.0], [62.4, 300.0], [62.5, 304.0], [62.6, 305.0], [62.7, 307.0], [62.8, 310.0], [62.9, 312.0], [63.0, 314.0], [63.1, 316.0], [63.2, 320.0], [63.3, 322.0], [63.4, 327.0], [63.5, 328.0], [63.6, 333.0], [63.7, 334.0], [63.8, 336.0], [63.9, 339.0], [64.0, 342.0], [64.1, 342.0], [64.2, 343.0], [64.3, 346.0], [64.4, 347.0], [64.5, 349.0], [64.6, 351.0], [64.7, 354.0], [64.8, 354.0], [64.9, 354.0], [65.0, 356.0], [65.1, 356.0], [65.2, 375.0], [65.3, 377.0], [65.4, 381.0], [65.5, 383.0], [65.6, 387.0], [65.7, 398.0], [65.8, 399.0], [65.9, 409.0], [66.0, 413.0], [66.1, 423.0], [66.2, 426.0], [66.3, 429.0], [66.4, 439.0], [66.5, 442.0], [66.6, 443.0], [66.7, 446.0], [66.8, 455.0], [66.9, 458.0], [67.0, 458.0], [67.1, 468.0], [67.2, 471.0], [67.3, 472.0], [67.4, 473.0], [67.5, 474.0], [67.6, 476.0], [67.7, 476.0], [67.8, 481.0], [67.9, 486.0], [68.0, 486.0], [68.1, 487.0], [68.2, 487.0], [68.3, 490.0], [68.4, 492.0], [68.5, 497.0], [68.6, 498.0], [68.7, 499.0], [68.8, 500.0], [68.9, 505.0], [69.0, 507.0], [69.1, 508.0], [69.2, 509.0], [69.3, 512.0], [69.4, 515.0], [69.5, 516.0], [69.6, 517.0], [69.7, 518.0], [69.8, 521.0], [69.9, 522.0], [70.0, 524.0], [70.1, 524.0], [70.2, 525.0], [70.3, 528.0], [70.4, 531.0], [70.5, 533.0], [70.6, 533.0], [70.7, 534.0], [70.8, 534.0], [70.9, 541.0], [71.0, 543.0], [71.1, 544.0], [71.2, 547.0], [71.3, 549.0], [71.4, 554.0], [71.5, 555.0], [71.6, 556.0], [71.7, 557.0], [71.8, 558.0], [71.9, 561.0], [72.0, 563.0], [72.1, 568.0], [72.2, 571.0], [72.3, 573.0], [72.4, 573.0], [72.5, 575.0], [72.6, 575.0], [72.7, 577.0], [72.8, 579.0], [72.9, 581.0], [73.0, 583.0], [73.1, 585.0], [73.2, 586.0], [73.3, 588.0], [73.4, 593.0], [73.5, 594.0], [73.6, 596.0], [73.7, 597.0], [73.8, 599.0], [73.9, 600.0], [74.0, 602.0], [74.1, 603.0], [74.2, 604.0], [74.3, 606.0], [74.4, 608.0], [74.5, 609.0], [74.6, 611.0], [74.7, 612.0], [74.8, 613.0], [74.9, 616.0], [75.0, 620.0], [75.1, 621.0], [75.2, 621.0], [75.3, 621.0], [75.4, 622.0], [75.5, 623.0], [75.6, 624.0], [75.7, 624.0], [75.8, 625.0], [75.9, 626.0], [76.0, 628.0], [76.1, 629.0], [76.2, 631.0], [76.3, 631.0], [76.4, 632.0], [76.5, 633.0], [76.6, 635.0], [76.7, 636.0], [76.8, 637.0], [76.9, 637.0], [77.0, 638.0], [77.1, 638.0], [77.2, 638.0], [77.3, 639.0], [77.4, 639.0], [77.5, 640.0], [77.6, 640.0], [77.7, 641.0], [77.8, 641.0], [77.9, 642.0], [78.0, 642.0], [78.1, 643.0], [78.2, 644.0], [78.3, 644.0], [78.4, 645.0], [78.5, 646.0], [78.6, 647.0], [78.7, 647.0], [78.8, 647.0], [78.9, 648.0], [79.0, 649.0], [79.1, 649.0], [79.2, 651.0], [79.3, 652.0], [79.4, 652.0], [79.5, 652.0], [79.6, 653.0], [79.7, 653.0], [79.8, 653.0], [79.9, 655.0], [80.0, 655.0], [80.1, 656.0], [80.2, 657.0], [80.3, 658.0], [80.4, 658.0], [80.5, 658.0], [80.6, 659.0], [80.7, 659.0], [80.8, 660.0], [80.9, 661.0], [81.0, 661.0], [81.1, 661.0], [81.2, 663.0], [81.3, 664.0], [81.4, 665.0], [81.5, 665.0], [81.6, 665.0], [81.7, 666.0], [81.8, 666.0], [81.9, 668.0], [82.0, 669.0], [82.1, 669.0], [82.2, 669.0], [82.3, 670.0], [82.4, 671.0], [82.5, 671.0], [82.6, 672.0], [82.7, 673.0], [82.8, 674.0], [82.9, 697.0], [83.0, 805.0], [83.1, 879.0], [83.2, 1098.0], [83.3, 1104.0], [83.4, 1106.0], [83.5, 1108.0], [83.6, 1110.0], [83.7, 1110.0], [83.8, 1111.0], [83.9, 1114.0], [84.0, 1116.0], [84.1, 1118.0], [84.2, 1119.0], [84.3, 1120.0], [84.4, 1121.0], [84.5, 1121.0], [84.6, 1123.0], [84.7, 1124.0], [84.8, 1124.0], [84.9, 1126.0], [85.0, 1126.0], [85.1, 1126.0], [85.2, 1127.0], [85.3, 1128.0], [85.4, 1128.0], [85.5, 1129.0], [85.6, 1129.0], [85.7, 1130.0], [85.8, 1131.0], [85.9, 1132.0], [86.0, 1133.0], [86.1, 1134.0], [86.2, 1134.0], [86.3, 1135.0], [86.4, 1135.0], [86.5, 1136.0], [86.6, 1137.0], [86.7, 1137.0], [86.8, 1138.0], [86.9, 1138.0], [87.0, 1139.0], [87.1, 1139.0], [87.2, 1139.0], [87.3, 1140.0], [87.4, 1140.0], [87.5, 1141.0], [87.6, 1142.0], [87.7, 1142.0], [87.8, 1142.0], [87.9, 1142.0], [88.0, 1143.0], [88.1, 1144.0], [88.2, 1144.0], [88.3, 1145.0], [88.4, 1145.0], [88.5, 1145.0], [88.6, 1146.0], [88.7, 1147.0], [88.8, 1147.0], [88.9, 1147.0], [89.0, 1148.0], [89.1, 1148.0], [89.2, 1149.0], [89.3, 1149.0], [89.4, 1150.0], [89.5, 1151.0], [89.6, 1151.0], [89.7, 1153.0], [89.8, 1154.0], [89.9, 1155.0], [90.0, 1155.0], [90.1, 1156.0], [90.2, 1156.0], [90.3, 1156.0], [90.4, 1157.0], [90.5, 1157.0], [90.6, 1158.0], [90.7, 1158.0], [90.8, 1159.0], [90.9, 1160.0], [91.0, 1160.0], [91.1, 1161.0], [91.2, 1162.0], [91.3, 1163.0], [91.4, 1163.0], [91.5, 1165.0], [91.6, 1165.0], [91.7, 1166.0], [91.8, 1166.0], [91.9, 1167.0], [92.0, 1168.0], [92.1, 1168.0], [92.2, 1169.0], [92.3, 1169.0], [92.4, 1173.0], [92.5, 1177.0], [92.6, 1178.0], [92.7, 1179.0], [92.8, 1180.0], [92.9, 1181.0], [93.0, 1182.0], [93.1, 1182.0], [93.2, 1183.0], [93.3, 1183.0], [93.4, 1184.0], [93.5, 1185.0], [93.6, 1186.0], [93.7, 1187.0], [93.8, 1188.0], [93.9, 1190.0], [94.0, 1191.0], [94.1, 1194.0], [94.2, 1197.0], [94.3, 1198.0], [94.4, 1200.0], [94.5, 1202.0], [94.6, 1204.0], [94.7, 1204.0], [94.8, 1205.0], [94.9, 1207.0], [95.0, 1209.0], [95.1, 1210.0], [95.2, 1211.0], [95.3, 1212.0], [95.4, 1215.0], [95.5, 1216.0], [95.6, 1216.0], [95.7, 1216.0], [95.8, 1217.0], [95.9, 1218.0], [96.0, 1219.0], [96.1, 1219.0], [96.2, 1220.0], [96.3, 1222.0], [96.4, 1223.0], [96.5, 1224.0], [96.6, 1225.0], [96.7, 1226.0], [96.8, 1227.0], [96.9, 1228.0], [97.0, 1230.0], [97.1, 1231.0], [97.2, 1232.0], [97.3, 1232.0], [97.4, 1233.0], [97.5, 1234.0], [97.6, 1236.0], [97.7, 1237.0], [97.8, 1237.0], [97.9, 1239.0], [98.0, 1240.0], [98.1, 1241.0], [98.2, 1242.0], [98.3, 1245.0], [98.4, 1247.0], [98.5, 1250.0], [98.6, 1252.0], [98.7, 1254.0], [98.8, 1255.0], [98.9, 1256.0], [99.0, 1258.0], [99.1, 1259.0], [99.2, 1259.0], [99.3, 1264.0], [99.4, 1265.0], [99.5, 1267.0], [99.6, 1269.0], [99.7, 1276.0], [99.8, 1281.0], [99.9, 1285.0]], "isOverall": false, "label": "HTTP Request character_id", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 1103.0, "series": [{"data": [[0.0, 1103.0], [1100.0, 223.0], [300.0, 72.0], [600.0, 183.0], [1200.0, 112.0], [100.0, 84.0], [200.0, 58.0], [400.0, 58.0], [800.0, 3.0], [500.0, 102.0], [1000.0, 2.0]], "isOverall": false, "label": "HTTP Request character_id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 623.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1 500ms"], [2, "Requests having \nresponse time > 1 500ms"], [3, "Requests in error"]], "maxY": 1377.0, "series": [{"data": [[0.0, 1377.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 623.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1 500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1 500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 79.8196202531646, "minX": 1.75925892E12, "maxY": 316.29988123515443, "series": [{"data": [[1.75925898E12, 79.8196202531646], [1.75925892E12, 316.29988123515443]], "isOverall": false, "label": "Thread GroupMy Test1000character_id", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75925898E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 1284.5, "series": [{"data": [[2.0, 3.0], [3.0, 3.0], [4.0, 2.0], [5.0, 2.0], [6.0, 2.0], [7.0, 5.333333333333333], [8.0, 4.8], [9.0, 3.25], [13.0, 5.5], [14.0, 13.333333333333334], [15.0, 11.6], [16.0, 216.83333333333334], [17.0, 639.0], [18.0, 9.5], [20.0, 1262.0], [21.0, 629.0], [22.0, 643.0], [23.0, 15.5], [24.0, 15.666666666666666], [25.0, 13.555555555555554], [26.0, 3.0], [28.0, 16.0], [30.0, 2.0], [31.0, 631.5], [32.0, 14.333333333333332], [33.0, 330.25], [35.0, 197.28571428571428], [34.0, 429.0], [36.0, 441.0], [37.0, 1.0], [38.0, 1284.5], [41.0, 426.33333333333337], [40.0, 3.5], [42.0, 426.0], [43.0, 335.5], [45.0, 21.42857142857143], [44.0, 1255.0], [47.0, 31.125], [46.0, 230.66666666666669], [49.0, 15.0], [48.0, 36.0], [51.0, 343.75], [50.0, 430.0], [53.0, 239.16666666666669], [52.0, 23.8], [55.0, 8.0], [54.0, 26.142857142857142], [57.0, 630.0], [56.0, 1.0], [58.0, 1265.0], [60.0, 35.4], [61.0, 21.333333333333336], [63.0, 60.5], [65.0, 23.0], [64.0, 23.333333333333336], [66.0, 274.6], [67.0, 3.5], [68.0, 66.0], [71.0, 34.5], [70.0, 34.66666666666667], [69.0, 67.5], [72.0, 28.0], [73.0, 47.666666666666664], [75.0, 4.0], [74.0, 4.0], [79.0, 2.0], [80.0, 52.333333333333336], [82.0, 2.0], [83.0, 74.0], [84.0, 37.875], [85.0, 20.75], [87.0, 76.0], [89.0, 39.5], [91.0, 610.0], [95.0, 1.0], [94.0, 608.0], [93.0, 814.0], [92.0, 611.5], [96.0, 27.333333333333336], [99.0, 608.5], [98.0, 921.25], [97.0, 616.5], [103.0, 630.0], [102.0, 2.0], [101.0, 603.5], [100.0, 1.0], [106.0, 622.5], [107.0, 2.0], [105.0, 1.0], [104.0, 939.75], [109.0, 745.2], [111.0, 620.5], [110.0, 623.0], [108.0, 1.0], [112.0, 439.33333333333337], [115.0, 1235.0], [114.0, 1.0], [116.0, 44.25], [118.0, 57.66666666666667], [119.0, 620.5], [117.0, 1236.0], [120.0, 437.6666666666667], [123.0, 1226.0], [122.0, 611.0], [121.0, 1.0], [127.0, 609.5], [126.0, 2.0], [125.0, 1237.0], [124.0, 1.0], [134.0, 51.0], [135.0, 1.0], [133.0, 1250.0], [132.0, 2.0], [129.0, 1225.0], [128.0, 606.5], [142.0, 13.0], [143.0, 7.5], [141.0, 1252.0], [140.0, 2.0], [139.0, 1234.0], [138.0, 1.0], [137.0, 1237.0], [136.0, 620.0], [144.0, 291.0], [151.0, 610.5], [150.0, 2.0], [149.0, 1219.0], [148.0, 2.0], [147.0, 1227.0], [146.0, 616.5], [145.0, 1.0], [155.0, 415.0], [157.0, 446.66666666666663], [159.0, 617.0], [158.0, 609.0], [156.0, 615.5], [154.0, 608.5], [153.0, 621.0], [152.0, 2.0], [161.0, 3.0], [165.0, 666.5], [167.0, 616.5], [166.0, 2.0], [164.0, 2.0], [160.0, 1212.0], [169.0, 609.0], [168.0, 443.0], [170.0, 109.0], [172.0, 457.0], [171.0, 37.66666666666667], [173.0, 1.5], [175.0, 1.0], [177.0, 55.75], [178.0, 108.0], [179.0, 3.0], [182.0, 55.5], [183.0, 2.0], [181.0, 1228.0], [176.0, 1251.5], [186.0, 111.0], [190.0, 2.0], [191.0, 1207.0], [184.0, 1242.0], [196.0, 5.5], [199.0, 2.0], [198.0, 1216.0], [197.0, 615.0], [195.0, 1233.0], [194.0, 2.0], [200.0, 334.5], [203.0, 60.5], [202.0, 121.0], [207.0, 48.4], [205.0, 1198.0], [204.0, 3.0], [201.0, 1207.0], [208.0, 221.71428571428575], [209.0, 61.0], [210.0, 408.3333333333333], [211.0, 443.33333333333337], [213.0, 604.0], [212.0, 403.66666666666663], [214.0, 60.5], [215.0, 594.0], [216.0, 593.5], [219.0, 63.0], [223.0, 2.0], [221.0, 1204.0], [220.0, 603.0], [225.0, 590.0], [228.0, 47.33333333333333], [229.0, 338.0], [231.0, 608.0], [230.0, 613.0], [224.0, 594.0], [232.0, 296.6], [233.0, 338.0], [235.0, 1.5], [234.0, 669.5], [238.0, 606.0], [237.0, 600.0], [236.0, 609.0], [242.0, 667.5], [244.0, 594.5], [243.0, 4.0], [246.0, 658.0], [247.0, 1.0], [245.0, 2.0], [241.0, 2.0], [249.0, 133.0], [255.0, 56.2], [254.0, 1202.0], [253.0, 590.0], [252.0, 590.5], [251.0, 2.0], [248.0, 1183.0], [257.0, 442.33333333333337], [256.0, 439.66666666666663], [258.0, 395.66666666666663], [259.0, 300.75], [260.0, 651.5], [261.0, 46.66666666666667], [262.0, 364.0], [263.0, 35.25], [264.0, 435.6666666666667], [269.0, 407.66666666666663], [268.0, 2.0], [271.0, 139.0], [270.0, 1215.0], [265.0, 1.5], [266.0, 1170.0], [284.0, 599.0], [272.0, 2.5], [273.0, 449.0], [275.0, 1212.0], [274.0, 593.5], [277.0, 448.66666666666663], [276.0, 2.0], [279.0, 2.0], [278.0, 1198.0], [283.0, 443.0], [286.0, 299.0], [285.0, 96.66666666666666], [282.0, 594.0], [281.0, 601.0], [280.0, 599.0], [291.0, 98.0], [289.0, 390.66666666666663], [288.0, 73.0], [290.0, 593.5], [292.0, 439.66666666666663], [294.0, 1191.0], [295.0, 51.33333333333333], [298.0, 396.33333333333337], [299.0, 590.0], [303.0, 2.0], [297.0, 1.0], [296.0, 1162.0], [300.0, 446.6666666666667], [301.0, 6.0], [306.0, 387.0], [311.0, 2.0], [305.0, 2.0], [304.0, 1164.0], [307.0, 575.5], [308.0, 364.75], [310.0, 2.0], [309.0, 656.5], [314.0, 436.6666666666667], [317.0, 80.0], [313.0, 573.0], [312.0, 576.0], [323.0, 449.66666666666663], [321.0, 390.0], [320.0, 80.0], [322.0, 338.5], [327.0, 443.6666666666667], [326.0, 386.66666666666663], [325.0, 2.0], [324.0, 1186.0], [330.0, 444.0], [329.0, 590.0], [328.0, 83.0], [333.0, 1.0], [335.0, 386.66666666666663], [334.0, 1.0], [348.0, 664.5], [336.0, 666.5], [339.0, 390.33333333333337], [338.0, 581.0], [337.0, 1.0], [340.0, 371.75], [341.0, 1165.0], [342.0, 1.5], [343.0, 389.66666666666663], [344.0, 87.0], [347.0, 2.0], [346.0, 1158.0], [345.0, 1159.0], [351.0, 437.66666666666663], [350.0, 1.0], [366.0, 583.5], [354.0, 2.5], [357.0, 4.0], [356.0, 1134.0], [360.0, 90.0], [359.0, 2.0], [352.0, 1132.0], [363.0, 92.0], [361.0, 1183.0], [367.0, 1182.0], [365.0, 1.0], [364.0, 1179.0], [355.0, 570.0], [381.0, 582.0], [369.0, 47.25], [372.0, 187.0], [380.0, 446.33333333333337], [370.0, 1180.0], [382.0, 190.0], [383.0, 1.0], [379.0, 1.0], [376.0, 1166.0], [375.0, 1.0], [396.0, 444.66666666666663], [386.0, 336.75], [384.0, 574.5], [385.0, 1.0], [387.0, 674.0], [390.0, 381.33333333333337], [388.0, 1.0], [391.0, 335.0], [392.0, 576.5], [394.0, 197.0], [395.0, 100.5], [397.0, 333.5], [398.0, 2.0], [412.0, 104.0], [403.0, 2.0], [402.0, 511.3333333333333], [405.0, 2.0], [404.0, 1182.0], [406.0, 390.66666666666663], [407.0, 1175.0], [401.0, 568.0], [400.0, 1.0], [413.0, 584.5], [415.0, 682.5], [409.0, 1173.0], [408.0, 2.0], [414.0, 2.0], [411.0, 1162.0], [410.0, 1.0], [429.0, 1131.0], [417.0, 105.5], [423.0, 1156.0], [422.0, 380.33333333333337], [421.0, 141.66666666666669], [420.0, 1162.0], [427.0, 384.0], [426.0, 385.66666666666663], [431.0, 215.0], [428.0, 573.0], [419.0, 573.5], [418.0, 1.0], [425.0, 569.5], [424.0, 2.0], [435.0, 74.33333333333334], [432.0, 1.0], [433.0, 145.66666666666669], [434.0, 1139.0], [436.0, 565.5], [437.0, 110.5], [439.0, 377.6666666666667], [438.0, 567.0], [440.0, 220.0], [446.0, 1.5], [447.0, 555.5], [441.0, 2.0], [443.0, 674.5], [442.0, 1.0], [461.0, 566.5], [450.0, 697.0], [449.0, 114.0], [448.0, 1110.0], [451.0, 77.0], [452.0, 348.25], [454.0, 578.0], [453.0, 581.0], [455.0, 575.0], [462.0, 1158.0], [456.0, 1.0], [460.0, 1.0], [458.0, 1139.0], [457.0, 572.0], [478.0, 1135.0], [465.0, 118.75], [464.0, 234.0], [466.0, 684.0], [467.0, 1.0], [469.0, 232.0], [468.0, 1124.0], [471.0, 1.0], [479.0, 1.0], [473.0, 2.0], [472.0, 1129.0], [477.0, 569.5], [476.0, 1.0], [475.0, 1142.0], [474.0, 574.5], [494.0, 582.0], [481.0, 378.66666666666663], [488.0, 13.0], [486.0, 676.0], [480.0, 563.0], [485.0, 7.0], [490.0, 7.5], [493.0, 3.0], [495.0, 1160.0], [492.0, 1121.0], [482.0, 1114.0], [510.0, 3.5], [496.0, 467.66666666666663], [503.0, 8.0], [502.0, 9.0], [501.0, 8.0], [500.0, 9.0], [497.0, 5.0], [504.0, 129.0], [506.0, 4.5], [505.0, 170.33333333333331], [508.0, 3.0], [499.0, 9.0], [498.0, 9.0], [509.0, 5.0], [507.0, 129.5], [511.0, 171.33333333333331], [515.0, 130.0], [514.0, 3.0], [513.0, 5.0], [512.0, 5.0], [516.0, 382.33333333333337], [517.0, 3.0], [520.0, 131.5], [521.0, 2.0], [522.0, 2.0], [527.0, 700.5], [523.0, 1134.6666666666667], [524.0, 1120.75], [525.0, 1119.0], [526.0, 1119.0], [529.0, 2.0], [543.0, 848.6666666666666], [528.0, 1121.0], [538.0, 826.25], [539.0, 1119.0], [541.0, 576.5], [537.0, 2.0], [536.0, 688.5], [519.0, 3.0], [518.0, 3.0], [530.0, 266.0], [534.0, 622.0], [533.0, 687.5], [545.0, 136.0], [544.0, 761.3333333333334], [546.0, 272.0], [550.0, 3.0], [569.0, 1.0], [551.0, 2.0], [570.0, 583.0], [575.0, 1142.0], [560.0, 2.0], [562.0, 1140.0], [561.0, 556.0], [574.0, 1147.0], [573.0, 2.0], [572.0, 579.0], [571.0, 1.0], [549.0, 709.0], [552.0, 375.33333333333337], [553.0, 419.74999999999994], [557.0, 380.0], [556.0, 1.0], [555.0, 1145.0], [554.0, 559.0], [558.0, 1.0], [559.0, 1125.0], [563.0, 282.0], [566.0, 143.0], [567.0, 142.5], [580.0, 290.0], [589.0, 3.6666666666666665], [578.0, 97.0], [577.0, 1153.0], [576.0, 2.0], [579.0, 1147.0], [591.0, 297.0], [590.0, 14.0], [583.0, 478.33333333333337], [582.0, 3.0], [600.0, 1.0], [604.0, 304.0], [584.0, 2.5], [587.0, 2.0], [586.0, 428.75000000000006], [588.0, 567.0], [593.0, 2.0], [595.0, 100.66666666666667], [596.0, 225.25], [597.0, 1.0], [598.0, 554.5], [599.0, 151.0], [594.0, 298.0], [592.0, 297.0], [614.0, 178.57142857142858], [621.0, 382.66666666666663], [609.0, 103.33333333333334], [608.0, 203.66666666666666], [622.0, 381.66666666666663], [623.0, 759.6666666666667], [616.0, 158.75], [615.0, 104.0], [632.0, 290.25], [633.0, 740.0], [636.0, 2.0], [638.0, 164.5], [625.0, 1.0], [624.0, 568.0], [637.0, 743.0], [626.0, 160.5], [630.0, 162.0], [629.0, 754.0], [628.0, 1.0], [627.0, 848.0], [631.0, 371.0], [617.0, 239.33333333333334], [613.0, 711.5], [618.0, 631.5], [620.0, 1.0], [619.0, 553.5], [641.0, 370.0], [640.0, 1.5], [644.0, 165.5], [643.0, 1133.0], [642.0, 573.0], [645.0, 564.0], [646.0, 1.0], [664.0, 579.5], [666.0, 575.0], [665.0, 579.0], [668.0, 1141.0], [667.0, 574.0], [670.0, 339.0], [656.0, 565.0], [658.0, 1.0], [671.0, 1.0], [662.0, 169.0], [661.0, 1165.0], [660.0, 1.0], [663.0, 580.5], [659.0, 737.0], [649.0, 741.5], [648.0, 1.0], [652.0, 492.3333333333333], [651.0, 167.5], [655.0, 378.33333333333337], [654.0, 493.66666666666663], [653.0, 1.0], [697.0, 498.33333333333337], [696.0, 174.0], [695.0, 346.0], [692.0, 1118.0], [691.0, 1.0], [689.0, 1139.0], [688.0, 459.49999999999994], [682.0, 734.5], [681.0, 1.0], [680.0, 1142.0], [685.0, 2.0], [687.0, 2.0], [672.0, 1153.0], [675.0, 1140.0], [674.0, 2.0], [686.0, 1148.0], [679.0, 257.0], [677.0, 491.0], [678.0, 1157.0], [676.0, 171.5], [701.0, 1139.0], [700.0, 1.0], [699.0, 1143.0], [698.0, 572.5], [711.0, 354.0], [719.0, 354.5], [720.0, 354.0], [728.0, 3.0], [730.0, 10.25], [732.0, 12.25], [733.0, 15.0], [731.0, 62.57142857142857], [729.0, 10.5], [718.0, 354.0], [710.0, 354.0], [717.0, 356.0], [706.0, 350.0], [704.0, 175.0], [705.0, 606.0], [725.0, 121.83333333333333], [724.0, 6.0], [722.0, 671.0], [721.0, 2.0], [727.0, 3.5], [726.0, 3.5], [738.0, 7.0], [737.0, 375.0], [741.0, 375.0], [742.0, 2.0], [745.0, 2.0], [746.0, 377.0], [750.0, 3.0], [753.0, 381.0], [765.0, 386.0], [766.0, 387.0], [764.0, 2.0], [763.0, 192.5], [757.0, 2.0], [759.0, 381.0], [756.0, 2.0], [770.0, 2.0], [783.0, 10.0], [784.0, 397.0], [787.0, 398.0], [789.0, 200.25], [792.0, 4.0], [796.0, 5.0], [805.0, 1.0], [804.0, 406.0], [806.0, 409.0], [809.0, 1.0], [808.0, 410.0], [810.0, 1.0], [812.0, 4.0], [813.0, 440.5], [818.0, 2.0], [823.0, 1.0], [829.0, 236.5], [828.0, 2.0], [831.0, 212.0], [824.0, 546.5], [859.0, 246.5], [837.0, 426.0], [838.0, 1.5], [856.0, 1.0], [839.0, 879.0], [858.0, 241.0], [857.0, 240.5], [843.0, 300.6666666666667], [842.0, 1.0], [844.0, 144.66666666666669], [845.0, 301.0], [846.0, 474.0], [832.0, 471.0], [851.0, 430.0], [850.0, 476.0], [849.0, 1.0], [854.0, 476.0], [853.0, 1.0], [861.0, 126.5], [860.0, 1.0], [862.0, 487.0], [863.0, 1.0], [870.0, 441.0], [867.0, 310.0], [866.0, 349.0], [865.0, 349.0], [864.0, 243.5], [869.0, 494.0], [868.0, 247.0], [871.0, 3.0], [888.0, 507.5], [890.0, 509.0], [889.0, 1.0], [877.0, 2.0], [876.0, 366.0], [875.0, 2.0], [873.0, 498.0], [872.0, 1.0], [878.0, 237.25], [879.0, 500.0], [891.0, 5.0], [895.0, 512.0], [881.0, 499.0], [880.0, 1.0], [885.0, 507.0], [884.0, 1.0], [887.0, 2.0], [886.0, 1.0], [894.0, 1.0], [893.0, 510.0], [892.0, 2.0], [920.0, 1.0], [924.0, 4.5], [896.0, 227.5], [899.0, 183.2], [898.0, 514.0], [897.0, 259.0], [900.0, 516.0], [903.0, 517.0], [902.0, 1.0], [921.0, 267.5], [923.0, 2.0], [922.0, 533.0], [904.0, 230.5], [905.0, 2.0], [906.0, 327.33333333333337], [907.0, 230.0], [909.0, 1.0], [908.0, 522.5], [911.0, 523.0], [910.0, 261.5], [912.0, 3.5], [914.0, 176.33333333333331], [913.0, 263.0], [915.0, 248.25], [919.0, 530.0], [918.0, 2.0], [917.0, 528.0], [916.0, 264.0], [927.0, 534.0], [926.0, 1.0], [925.0, 532.5], [952.0, 555.0], [940.0, 474.0], [937.0, 509.5], [939.0, 473.0], [938.0, 2.0], [942.0, 1.5], [943.0, 553.0], [935.0, 1.0], [933.0, 544.0], [932.0, 1.0], [931.0, 543.0], [930.0, 271.0], [929.0, 1.0], [955.0, 1.0], [948.0, 345.0], [947.0, 259.25], [949.0, 2.0], [951.0, 2.0], [959.0, 1.0], [944.0, 1.0], [946.0, 278.5], [945.0, 277.5], [956.0, 563.0], [965.0, 352.33333333333337], [966.0, 311.0], [967.0, 578.0], [984.0, 526.0], [990.0, 199.66666666666669], [991.0, 299.5], [977.0, 577.0], [976.0, 288.5], [989.0, 2.5], [988.0, 585.0], [987.0, 1.0], [986.0, 585.0], [985.0, 1.0], [969.0, 244.0], [970.0, 2.0], [971.0, 2.0], [972.0, 531.5], [974.0, 534.0], [973.0, 1.0], [975.0, 2.0], [963.0, 2.0], [960.0, 563.0], [978.0, 2.5], [982.0, 3.5], [980.0, 582.0], [979.0, 291.0], [983.0, 292.5], [1022.0, 380.3333333333333], [996.0, 251.5], [995.0, 593.0], [994.0, 4.0], [993.0, 597.0], [992.0, 299.0], [999.0, 1.0], [997.0, 593.0], [1007.0, 2.0], [1005.0, 602.0], [1004.0, 403.0], [1003.0, 1.0], [1001.0, 328.5], [1000.0, 297.5], [1002.0, 552.5], [1009.0, 2.0], [1011.0, 370.33333333333337], [1010.0, 2.0], [1013.0, 302.5], [1012.0, 303.0], [1015.0, 3.0], [1014.0, 609.0], [1023.0, 258.5], [1008.0, 603.0], [1021.0, 1.0], [1016.0, 613.0], [1034.0, 313.0], [1024.0, 208.0], [1026.0, 623.0], [1028.0, 311.5], [1054.0, 8.0], [1052.0, 8.0], [1050.0, 9.0], [1032.0, 285.75], [1030.0, 622.0], [1036.0, 2.0], [1038.0, 2.0], [1082.0, 637.0], [1078.0, 633.0], [1074.0, 631.0], [1084.0, 639.0], [1086.0, 2.0], [1056.0, 7.0], [1058.0, 6.0], [1044.0, 645.0], [1042.0, 644.0], [1040.0, 316.0], [1046.0, 4.0], [1048.0, 638.0], [1060.0, 5.0], [1062.0, 5.0], [1066.0, 3.0], [1064.0, 5.0], [1068.0, 270.5], [1070.0, 4.0], [1100.0, 652.0], [1094.0, 472.25], [1092.0, 640.0], [1088.0, 638.5], [1090.0, 641.0], [1102.0, 652.0], [1098.0, 651.0], [1096.0, 649.0], [1138.0, 4.0], [1140.0, 2.0], [1146.0, 377.0], [1148.0, 2.0], [1124.0, 6.0], [1150.0, 442.33333333333337], [1144.0, 435.0], [1142.0, 324.0], [1126.0, 566.0], [1128.0, 6.0], [1132.0, 568.0], [1134.0, 647.0], [1104.0, 1.5], [1106.0, 606.0], [1108.0, 1.0], [1110.0, 329.0], [1114.0, 407.33333333333337], [1160.0, 18.0], [1206.0, 604.0], [1154.0, 299.5], [1156.0, 11.0], [1158.0, 19.0], [1162.0, 18.0], [1164.0, 17.0], [1166.0, 15.0], [1200.0, 4.0], [1202.0, 4.0], [1208.0, 2.0], [1210.0, 617.0], [1212.0, 639.0], [1214.0, 419.0], [1184.0, 8.0], [1204.0, 303.5], [1168.0, 300.0], [1170.0, 13.0], [1172.0, 13.0], [1174.0, 12.0], [1176.0, 200.33333333333331], [1178.0, 11.0], [1180.0, 10.0], [1152.0, 21.0], [1182.0, 10.0], [1194.0, 6.0], [1192.0, 7.0], [1190.0, 8.0], [1188.0, 9.0], [1186.0, 8.0], [1196.0, 302.0], [1198.0, 202.33333333333331], [1220.0, 299.3529411764706], [1218.0, 397.81818181818176], [1216.0, 612.0], [1236.0, 672.5], [1234.0, 670.25], [1232.0, 670.3333333333334], [1224.0, 457.1], [1226.0, 661.0], [1228.0, 223.33333333333334], [1230.0, 670.0], [1222.0, 435.5], [1037.0, 625.0], [1079.0, 587.5], [1033.0, 286.25], [1029.0, 381.0], [1025.0, 2.0], [1027.0, 2.0], [1055.0, 7.0], [1053.0, 8.0], [1051.0, 9.0], [1031.0, 2.0], [1035.0, 624.0], [1039.0, 2.0], [1073.0, 2.0], [1081.0, 637.0], [1083.0, 544.0], [1085.0, 275.0], [1057.0, 6.0], [1045.0, 389.33333333333337], [1043.0, 1.0], [1041.0, 643.0], [1047.0, 321.0], [1049.0, 6.0], [1059.0, 267.75], [1061.0, 180.33333333333331], [1063.0, 180.33333333333331], [1065.0, 5.0], [1067.0, 4.0], [1071.0, 3.0], [1069.0, 4.0], [1097.0, 325.75], [1107.0, 372.6666666666667], [1091.0, 595.0], [1093.0, 642.0], [1119.0, 331.0], [1117.0, 6.0], [1103.0, 556.5], [1101.0, 1.0], [1099.0, 2.0], [1095.0, 648.5], [1139.0, 647.0], [1143.0, 286.0], [1147.0, 477.0], [1151.0, 167.5], [1149.0, 331.5], [1145.0, 1.6666666666666667], [1141.0, 573.0], [1137.0, 571.0], [1127.0, 3.0], [1105.0, 218.66666666666669], [1109.0, 328.5], [1111.0, 658.0], [1113.0, 1.0], [1115.0, 330.5], [1161.0, 18.0], [1155.0, 20.0], [1157.0, 19.0], [1159.0, 18.0], [1163.0, 17.0], [1165.0, 17.0], [1167.0, 14.0], [1201.0, 4.0], [1203.0, 4.0], [1205.0, 1.5], [1211.0, 304.5], [1215.0, 306.0], [1213.0, 483.0], [1169.0, 14.0], [1171.0, 13.0], [1173.0, 12.0], [1175.0, 200.33333333333331], [1177.0, 11.0], [1179.0, 11.0], [1181.0, 6.0], [1183.0, 9.0], [1153.0, 20.0], [1185.0, 301.0], [1193.0, 7.0], [1191.0, 8.0], [1189.0, 7.0], [1187.0, 8.0], [1195.0, 6.0], [1199.0, 302.5], [1197.0, 4.0], [1221.0, 275.2857142857143], [1219.0, 422.06666666666666], [1217.0, 372.4], [1237.0, 671.0], [1235.0, 673.0], [1233.0, 670.3333333333334], [1225.0, 373.5714285714286], [1227.0, 328.0], [1229.0, 665.6666666666666], [1231.0, 666.5], [1223.0, 437.3333333333333], [1.0, 3.0]], "isOverall": false, "label": "HTTP Request character_id", "isController": false}, {"data": [[592.2505000000006, 329.5690000000002]], "isOverall": false, "label": "HTTP Request character_id-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1237.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 668.8666666666667, "minX": 1.75925892E12, "maxY": 7549.933333333333, "series": [{"data": [[1.75925898E12, 1416.7333333333333], [1.75925892E12, 7549.933333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75925898E12, 668.8666666666667], [1.75925892E12, 3564.4666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75925898E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 277.6876484560575, "minX": 1.75925892E12, "maxY": 606.0506329113932, "series": [{"data": [[1.75925898E12, 606.0506329113932], [1.75925892E12, 277.6876484560575]], "isOverall": false, "label": "HTTP Request character_id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75925898E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 277.68289786223244, "minX": 1.75925892E12, "maxY": 606.0506329113932, "series": [{"data": [[1.75925898E12, 606.0506329113932], [1.75925892E12, 277.68289786223244]], "isOverall": false, "label": "HTTP Request character_id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75925898E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.45886075949367083, "minX": 1.75925892E12, "maxY": 0.47149643705463223, "series": [{"data": [[1.75925898E12, 0.45886075949367083], [1.75925892E12, 0.47149643705463223]], "isOverall": false, "label": "HTTP Request character_id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75925898E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75925892E12, "maxY": 1291.0, "series": [{"data": [[1.75925898E12, 1291.0], [1.75925892E12, 1187.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75925898E12, 0.0], [1.75925892E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75925898E12, 1247.6], [1.75925892E12, 1110.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75925898E12, 1283.49], [1.75925892E12, 1166.15]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75925898E12, 4.5], [1.75925892E12, 17.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.75925898E12, 1259.4499999999998], [1.75925892E12, 1142.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75925898E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4.5, "minX": 316.0, "maxY": 468.0, "series": [{"data": [[316.0, 4.5], [769.0, 14.0], [915.0, 468.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 915.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 4.5, "minX": 316.0, "maxY": 468.0, "series": [{"data": [[316.0, 4.5], [769.0, 14.0], [915.0, 468.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 915.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.6166666666666667, "minX": 1.75925892E12, "maxY": 30.716666666666665, "series": [{"data": [[1.75925898E12, 2.6166666666666667], [1.75925892E12, 30.716666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75925898E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5.266666666666667, "minX": 1.75925892E12, "maxY": 28.066666666666666, "series": [{"data": [[1.75925898E12, 5.266666666666667], [1.75925892E12, 28.066666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75925898E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.266666666666667, "minX": 1.75925892E12, "maxY": 28.066666666666666, "series": [{"data": [[1.75925898E12, 5.266666666666667], [1.75925892E12, 28.066666666666666]], "isOverall": false, "label": "HTTP Request character_id-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75925898E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.266666666666667, "minX": 1.75925892E12, "maxY": 28.066666666666666, "series": [{"data": [[1.75925898E12, 5.266666666666667], [1.75925892E12, 28.066666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75925898E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

