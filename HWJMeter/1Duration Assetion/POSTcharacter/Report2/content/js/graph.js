/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1509.0, "series": [{"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 2.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 2.0], [20.4, 2.0], [20.5, 2.0], [20.6, 2.0], [20.7, 2.0], [20.8, 2.0], [20.9, 2.0], [21.0, 2.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 2.0], [21.8, 2.0], [21.9, 2.0], [22.0, 2.0], [22.1, 2.0], [22.2, 2.0], [22.3, 2.0], [22.4, 2.0], [22.5, 2.0], [22.6, 2.0], [22.7, 2.0], [22.8, 2.0], [22.9, 2.0], [23.0, 2.0], [23.1, 2.0], [23.2, 2.0], [23.3, 2.0], [23.4, 2.0], [23.5, 2.0], [23.6, 2.0], [23.7, 2.0], [23.8, 2.0], [23.9, 2.0], [24.0, 2.0], [24.1, 2.0], [24.2, 2.0], [24.3, 2.0], [24.4, 2.0], [24.5, 2.0], [24.6, 2.0], [24.7, 2.0], [24.8, 2.0], [24.9, 2.0], [25.0, 2.0], [25.1, 2.0], [25.2, 2.0], [25.3, 2.0], [25.4, 2.0], [25.5, 2.0], [25.6, 2.0], [25.7, 2.0], [25.8, 2.0], [25.9, 2.0], [26.0, 2.0], [26.1, 2.0], [26.2, 2.0], [26.3, 2.0], [26.4, 2.0], [26.5, 2.0], [26.6, 2.0], [26.7, 2.0], [26.8, 2.0], [26.9, 2.0], [27.0, 2.0], [27.1, 2.0], [27.2, 2.0], [27.3, 2.0], [27.4, 2.0], [27.5, 2.0], [27.6, 2.0], [27.7, 2.0], [27.8, 2.0], [27.9, 2.0], [28.0, 2.0], [28.1, 2.0], [28.2, 2.0], [28.3, 2.0], [28.4, 2.0], [28.5, 2.0], [28.6, 2.0], [28.7, 2.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 2.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 2.0], [30.6, 2.0], [30.7, 2.0], [30.8, 2.0], [30.9, 2.0], [31.0, 2.0], [31.1, 2.0], [31.2, 2.0], [31.3, 2.0], [31.4, 2.0], [31.5, 2.0], [31.6, 2.0], [31.7, 2.0], [31.8, 2.0], [31.9, 2.0], [32.0, 2.0], [32.1, 2.0], [32.2, 2.0], [32.3, 2.0], [32.4, 2.0], [32.5, 2.0], [32.6, 2.0], [32.7, 2.0], [32.8, 2.0], [32.9, 2.0], [33.0, 2.0], [33.1, 2.0], [33.2, 3.0], [33.3, 3.0], [33.4, 3.0], [33.5, 3.0], [33.6, 3.0], [33.7, 3.0], [33.8, 3.0], [33.9, 3.0], [34.0, 3.0], [34.1, 3.0], [34.2, 3.0], [34.3, 3.0], [34.4, 3.0], [34.5, 3.0], [34.6, 3.0], [34.7, 3.0], [34.8, 3.0], [34.9, 3.0], [35.0, 3.0], [35.1, 3.0], [35.2, 3.0], [35.3, 3.0], [35.4, 3.0], [35.5, 3.0], [35.6, 3.0], [35.7, 3.0], [35.8, 3.0], [35.9, 3.0], [36.0, 3.0], [36.1, 3.0], [36.2, 3.0], [36.3, 3.0], [36.4, 3.0], [36.5, 3.0], [36.6, 3.0], [36.7, 3.0], [36.8, 3.0], [36.9, 3.0], [37.0, 3.0], [37.1, 3.0], [37.2, 3.0], [37.3, 3.0], [37.4, 3.0], [37.5, 3.0], [37.6, 3.0], [37.7, 3.0], [37.8, 3.0], [37.9, 3.0], [38.0, 3.0], [38.1, 3.0], [38.2, 3.0], [38.3, 3.0], [38.4, 3.0], [38.5, 3.0], [38.6, 3.0], [38.7, 3.0], [38.8, 3.0], [38.9, 4.0], [39.0, 4.0], [39.1, 4.0], [39.2, 4.0], [39.3, 4.0], [39.4, 4.0], [39.5, 4.0], [39.6, 4.0], [39.7, 4.0], [39.8, 4.0], [39.9, 4.0], [40.0, 4.0], [40.1, 4.0], [40.2, 4.0], [40.3, 4.0], [40.4, 4.0], [40.5, 4.0], [40.6, 4.0], [40.7, 4.0], [40.8, 4.0], [40.9, 4.0], [41.0, 4.0], [41.1, 4.0], [41.2, 5.0], [41.3, 5.0], [41.4, 5.0], [41.5, 5.0], [41.6, 5.0], [41.7, 5.0], [41.8, 5.0], [41.9, 5.0], [42.0, 5.0], [42.1, 5.0], [42.2, 5.0], [42.3, 6.0], [42.4, 6.0], [42.5, 6.0], [42.6, 6.0], [42.7, 6.0], [42.8, 6.0], [42.9, 6.0], [43.0, 6.0], [43.1, 6.0], [43.2, 6.0], [43.3, 6.0], [43.4, 6.0], [43.5, 6.0], [43.6, 6.0], [43.7, 7.0], [43.8, 7.0], [43.9, 7.0], [44.0, 7.0], [44.1, 7.0], [44.2, 8.0], [44.3, 8.0], [44.4, 8.0], [44.5, 8.0], [44.6, 8.0], [44.7, 8.0], [44.8, 8.0], [44.9, 9.0], [45.0, 9.0], [45.1, 9.0], [45.2, 9.0], [45.3, 9.0], [45.4, 9.0], [45.5, 9.0], [45.6, 9.0], [45.7, 10.0], [45.8, 10.0], [45.9, 10.0], [46.0, 10.0], [46.1, 10.0], [46.2, 10.0], [46.3, 11.0], [46.4, 11.0], [46.5, 11.0], [46.6, 11.0], [46.7, 11.0], [46.8, 11.0], [46.9, 12.0], [47.0, 12.0], [47.1, 13.0], [47.2, 13.0], [47.3, 13.0], [47.4, 13.0], [47.5, 13.0], [47.6, 14.0], [47.7, 14.0], [47.8, 14.0], [47.9, 14.0], [48.0, 14.0], [48.1, 14.0], [48.2, 15.0], [48.3, 15.0], [48.4, 15.0], [48.5, 15.0], [48.6, 15.0], [48.7, 16.0], [48.8, 16.0], [48.9, 17.0], [49.0, 17.0], [49.1, 18.0], [49.2, 18.0], [49.3, 18.0], [49.4, 19.0], [49.5, 19.0], [49.6, 20.0], [49.7, 21.0], [49.8, 22.0], [49.9, 22.0], [50.0, 22.0], [50.1, 22.0], [50.2, 23.0], [50.3, 24.0], [50.4, 24.0], [50.5, 25.0], [50.6, 25.0], [50.7, 25.0], [50.8, 26.0], [50.9, 28.0], [51.0, 29.0], [51.1, 30.0], [51.2, 31.0], [51.3, 31.0], [51.4, 33.0], [51.5, 34.0], [51.6, 48.0], [51.7, 49.0], [51.8, 51.0], [51.9, 59.0], [52.0, 59.0], [52.1, 59.0], [52.2, 61.0], [52.3, 71.0], [52.4, 80.0], [52.5, 80.0], [52.6, 83.0], [52.7, 84.0], [52.8, 85.0], [52.9, 89.0], [53.0, 92.0], [53.1, 96.0], [53.2, 102.0], [53.3, 103.0], [53.4, 104.0], [53.5, 104.0], [53.6, 105.0], [53.7, 115.0], [53.8, 116.0], [53.9, 116.0], [54.0, 117.0], [54.1, 128.0], [54.2, 130.0], [54.3, 132.0], [54.4, 147.0], [54.5, 152.0], [54.6, 154.0], [54.7, 154.0], [54.8, 155.0], [54.9, 167.0], [55.0, 167.0], [55.1, 177.0], [55.2, 178.0], [55.3, 178.0], [55.4, 180.0], [55.5, 190.0], [55.6, 191.0], [55.7, 200.0], [55.8, 201.0], [55.9, 202.0], [56.0, 202.0], [56.1, 204.0], [56.2, 206.0], [56.3, 207.0], [56.4, 208.0], [56.5, 208.0], [56.6, 208.0], [56.7, 209.0], [56.8, 211.0], [56.9, 215.0], [57.0, 216.0], [57.1, 217.0], [57.2, 219.0], [57.3, 221.0], [57.4, 226.0], [57.5, 228.0], [57.6, 232.0], [57.7, 239.0], [57.8, 244.0], [57.9, 248.0], [58.0, 255.0], [58.1, 259.0], [58.2, 275.0], [58.3, 275.0], [58.4, 281.0], [58.5, 285.0], [58.6, 291.0], [58.7, 297.0], [58.8, 303.0], [58.9, 309.0], [59.0, 310.0], [59.1, 314.0], [59.2, 321.0], [59.3, 323.0], [59.4, 326.0], [59.5, 338.0], [59.6, 343.0], [59.7, 357.0], [59.8, 367.0], [59.9, 369.0], [60.0, 380.0], [60.1, 387.0], [60.2, 392.0], [60.3, 401.0], [60.4, 403.0], [60.5, 408.0], [60.6, 410.0], [60.7, 422.0], [60.8, 427.0], [60.9, 429.0], [61.0, 430.0], [61.1, 434.0], [61.2, 435.0], [61.3, 443.0], [61.4, 447.0], [61.5, 450.0], [61.6, 451.0], [61.7, 456.0], [61.8, 459.0], [61.9, 461.0], [62.0, 467.0], [62.1, 471.0], [62.2, 480.0], [62.3, 482.0], [62.4, 488.0], [62.5, 490.0], [62.6, 495.0], [62.7, 498.0], [62.8, 503.0], [62.9, 506.0], [63.0, 509.0], [63.1, 514.0], [63.2, 517.0], [63.3, 519.0], [63.4, 527.0], [63.5, 529.0], [63.6, 532.0], [63.7, 538.0], [63.8, 540.0], [63.9, 543.0], [64.0, 545.0], [64.1, 551.0], [64.2, 554.0], [64.3, 556.0], [64.4, 558.0], [64.5, 558.0], [64.6, 558.0], [64.7, 558.0], [64.8, 558.0], [64.9, 558.0], [65.0, 559.0], [65.1, 559.0], [65.2, 559.0], [65.3, 559.0], [65.4, 559.0], [65.5, 560.0], [65.6, 560.0], [65.7, 560.0], [65.8, 560.0], [65.9, 560.0], [66.0, 560.0], [66.1, 560.0], [66.2, 560.0], [66.3, 561.0], [66.4, 561.0], [66.5, 561.0], [66.6, 561.0], [66.7, 561.0], [66.8, 562.0], [66.9, 562.0], [67.0, 563.0], [67.1, 563.0], [67.2, 563.0], [67.3, 564.0], [67.4, 565.0], [67.5, 565.0], [67.6, 566.0], [67.7, 567.0], [67.8, 567.0], [67.9, 569.0], [68.0, 572.0], [68.1, 573.0], [68.2, 575.0], [68.3, 575.0], [68.4, 577.0], [68.5, 579.0], [68.6, 580.0], [68.7, 580.0], [68.8, 583.0], [68.9, 585.0], [69.0, 586.0], [69.1, 586.0], [69.2, 587.0], [69.3, 587.0], [69.4, 589.0], [69.5, 589.0], [69.6, 591.0], [69.7, 592.0], [69.8, 593.0], [69.9, 594.0], [70.0, 595.0], [70.1, 596.0], [70.2, 598.0], [70.3, 598.0], [70.4, 599.0], [70.5, 600.0], [70.6, 601.0], [70.7, 601.0], [70.8, 602.0], [70.9, 603.0], [71.0, 604.0], [71.1, 607.0], [71.2, 609.0], [71.3, 610.0], [71.4, 610.0], [71.5, 611.0], [71.6, 612.0], [71.7, 612.0], [71.8, 615.0], [71.9, 616.0], [72.0, 616.0], [72.1, 616.0], [72.2, 617.0], [72.3, 620.0], [72.4, 621.0], [72.5, 622.0], [72.6, 622.0], [72.7, 623.0], [72.8, 624.0], [72.9, 624.0], [73.0, 626.0], [73.1, 626.0], [73.2, 628.0], [73.3, 629.0], [73.4, 631.0], [73.5, 632.0], [73.6, 633.0], [73.7, 636.0], [73.8, 640.0], [73.9, 642.0], [74.0, 644.0], [74.1, 646.0], [74.2, 654.0], [74.3, 657.0], [74.4, 659.0], [74.5, 662.0], [74.6, 665.0], [74.7, 666.0], [74.8, 668.0], [74.9, 672.0], [75.0, 673.0], [75.1, 674.0], [75.2, 674.0], [75.3, 675.0], [75.4, 677.0], [75.5, 679.0], [75.6, 680.0], [75.7, 682.0], [75.8, 682.0], [75.9, 684.0], [76.0, 685.0], [76.1, 686.0], [76.2, 687.0], [76.3, 688.0], [76.4, 690.0], [76.5, 692.0], [76.6, 693.0], [76.7, 695.0], [76.8, 696.0], [76.9, 699.0], [77.0, 702.0], [77.1, 703.0], [77.2, 704.0], [77.3, 708.0], [77.4, 710.0], [77.5, 711.0], [77.6, 711.0], [77.7, 712.0], [77.8, 712.0], [77.9, 714.0], [78.0, 717.0], [78.1, 719.0], [78.2, 720.0], [78.3, 721.0], [78.4, 721.0], [78.5, 723.0], [78.6, 724.0], [78.7, 724.0], [78.8, 725.0], [78.9, 725.0], [79.0, 726.0], [79.1, 729.0], [79.2, 730.0], [79.3, 733.0], [79.4, 735.0], [79.5, 736.0], [79.6, 736.0], [79.7, 737.0], [79.8, 738.0], [79.9, 739.0], [80.0, 741.0], [80.1, 744.0], [80.2, 745.0], [80.3, 746.0], [80.4, 748.0], [80.5, 748.0], [80.6, 749.0], [80.7, 750.0], [80.8, 751.0], [80.9, 841.0], [81.0, 928.0], [81.1, 1158.0], [81.2, 1183.0], [81.3, 1215.0], [81.4, 1223.0], [81.5, 1230.0], [81.6, 1232.0], [81.7, 1237.0], [81.8, 1243.0], [81.9, 1252.0], [82.0, 1252.0], [82.1, 1253.0], [82.2, 1253.0], [82.3, 1256.0], [82.4, 1257.0], [82.5, 1259.0], [82.6, 1261.0], [82.7, 1262.0], [82.8, 1266.0], [82.9, 1268.0], [83.0, 1271.0], [83.1, 1273.0], [83.2, 1276.0], [83.3, 1277.0], [83.4, 1278.0], [83.5, 1281.0], [83.6, 1282.0], [83.7, 1283.0], [83.8, 1283.0], [83.9, 1284.0], [84.0, 1285.0], [84.1, 1287.0], [84.2, 1288.0], [84.3, 1290.0], [84.4, 1291.0], [84.5, 1295.0], [84.6, 1296.0], [84.7, 1296.0], [84.8, 1298.0], [84.9, 1300.0], [85.0, 1302.0], [85.1, 1303.0], [85.2, 1304.0], [85.3, 1305.0], [85.4, 1310.0], [85.5, 1313.0], [85.6, 1315.0], [85.7, 1319.0], [85.8, 1320.0], [85.9, 1323.0], [86.0, 1326.0], [86.1, 1330.0], [86.2, 1332.0], [86.3, 1332.0], [86.4, 1334.0], [86.5, 1335.0], [86.6, 1341.0], [86.7, 1346.0], [86.8, 1349.0], [86.9, 1358.0], [87.0, 1359.0], [87.1, 1363.0], [87.2, 1367.0], [87.3, 1368.0], [87.4, 1369.0], [87.5, 1370.0], [87.6, 1371.0], [87.7, 1373.0], [87.8, 1376.0], [87.9, 1377.0], [88.0, 1377.0], [88.1, 1381.0], [88.2, 1384.0], [88.3, 1387.0], [88.4, 1387.0], [88.5, 1387.0], [88.6, 1388.0], [88.7, 1391.0], [88.8, 1392.0], [88.9, 1393.0], [89.0, 1393.0], [89.1, 1396.0], [89.2, 1398.0], [89.3, 1400.0], [89.4, 1402.0], [89.5, 1402.0], [89.6, 1402.0], [89.7, 1404.0], [89.8, 1405.0], [89.9, 1406.0], [90.0, 1408.0], [90.1, 1408.0], [90.2, 1412.0], [90.3, 1413.0], [90.4, 1414.0], [90.5, 1416.0], [90.6, 1416.0], [90.7, 1417.0], [90.8, 1418.0], [90.9, 1418.0], [91.0, 1419.0], [91.1, 1419.0], [91.2, 1421.0], [91.3, 1421.0], [91.4, 1421.0], [91.5, 1422.0], [91.6, 1423.0], [91.7, 1424.0], [91.8, 1425.0], [91.9, 1426.0], [92.0, 1427.0], [92.1, 1428.0], [92.2, 1428.0], [92.3, 1429.0], [92.4, 1431.0], [92.5, 1432.0], [92.6, 1433.0], [92.7, 1434.0], [92.8, 1435.0], [92.9, 1435.0], [93.0, 1435.0], [93.1, 1436.0], [93.2, 1438.0], [93.3, 1439.0], [93.4, 1440.0], [93.5, 1442.0], [93.6, 1442.0], [93.7, 1442.0], [93.8, 1443.0], [93.9, 1443.0], [94.0, 1443.0], [94.1, 1445.0], [94.2, 1446.0], [94.3, 1448.0], [94.4, 1449.0], [94.5, 1449.0], [94.6, 1449.0], [94.7, 1450.0], [94.8, 1450.0], [94.9, 1451.0], [95.0, 1453.0], [95.1, 1454.0], [95.2, 1455.0], [95.3, 1455.0], [95.4, 1456.0], [95.5, 1457.0], [95.6, 1458.0], [95.7, 1459.0], [95.8, 1460.0], [95.9, 1461.0], [96.0, 1461.0], [96.1, 1462.0], [96.2, 1464.0], [96.3, 1464.0], [96.4, 1465.0], [96.5, 1465.0], [96.6, 1466.0], [96.7, 1467.0], [96.8, 1469.0], [96.9, 1469.0], [97.0, 1471.0], [97.1, 1471.0], [97.2, 1472.0], [97.3, 1473.0], [97.4, 1473.0], [97.5, 1474.0], [97.6, 1475.0], [97.7, 1477.0], [97.8, 1478.0], [97.9, 1478.0], [98.0, 1479.0], [98.1, 1480.0], [98.2, 1481.0], [98.3, 1482.0], [98.4, 1482.0], [98.5, 1483.0], [98.6, 1484.0], [98.7, 1484.0], [98.8, 1485.0], [98.9, 1486.0], [99.0, 1487.0], [99.1, 1488.0], [99.2, 1488.0], [99.3, 1491.0], [99.4, 1496.0], [99.5, 1497.0], [99.6, 1498.0], [99.7, 1500.0], [99.8, 1503.0], [99.9, 1509.0]], "isOverall": false, "label": "HTTP Request character", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1063.0, "series": [{"data": [[0.0, 1063.0], [600.0, 129.0], [700.0, 79.0], [200.0, 62.0], [800.0, 1.0], [900.0, 3.0], [1100.0, 3.0], [300.0, 30.0], [1200.0, 73.0], [1300.0, 88.0], [1400.0, 208.0], [1500.0, 6.0], [100.0, 51.0], [400.0, 49.0], [500.0, 155.0]], "isOverall": false, "label": "HTTP Request character", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1 500ms"], [2, "Requests having \nresponse time > 1 500ms"], [3, "Requests in error"]], "maxY": 1255.0, "series": [{"data": [[0.0, 1255.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 740.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1 500ms", "isController": false}, {"data": [[2.0, 5.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1 500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 327.18000000000035, "minX": 1.75925958E12, "maxY": 327.18000000000035, "series": [{"data": [[1.75925958E12, 327.18000000000035]], "isOverall": false, "label": "Thread GroupMy Test1000POSTcharacter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75925958E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 6.0, "maxY": 1509.0, "series": [{"data": [[6.0, 5.0], [7.0, 3.3333333333333335], [8.0, 4.4], [9.0, 4.333333333333333], [11.0, 4.5], [12.0, 10.0], [16.0, 11.8], [17.0, 2.0], [18.0, 8.5], [19.0, 11.666666666666666], [20.0, 18.0], [21.0, 11.0], [22.0, 4.0], [24.0, 15.5], [25.0, 4.0], [26.0, 13.25], [28.0, 25.0], [29.0, 6.0], [31.0, 5.5], [32.0, 31.0], [35.0, 21.0], [37.0, 18.0], [36.0, 34.0], [38.0, 1509.0], [41.0, 1.0], [42.0, 773.0], [44.0, 4.0], [45.0, 508.3333333333333], [47.0, 19.666666666666664], [48.0, 399.75], [49.0, 13.0], [51.0, 18.0], [50.0, 26.5], [53.0, 51.0], [55.0, 5.0], [56.0, 28.0], [57.0, 501.66666666666663], [58.0, 777.0], [59.0, 59.0], [60.0, 25.6], [61.0, 496.33333333333337], [63.0, 3.0], [62.0, 534.6666666666667], [64.0, 389.24999999999994], [65.0, 518.0], [70.0, 8.0], [72.0, 71.0], [79.0, 530.3333333333333], [78.0, 1.0], [77.0, 1504.0], [76.0, 1.0], [81.0, 9.0], [80.0, 80.0], [83.0, 302.5], [82.0, 42.5], [84.0, 15.166666666666668], [85.0, 741.0], [86.0, 43.0], [87.0, 43.5], [88.0, 739.0], [91.0, 3.5], [90.0, 1498.0], [89.0, 2.0], [93.0, 786.0], [95.0, 1465.0], [94.0, 2.0], [92.0, 745.0], [96.0, 3.0], [98.0, 734.0], [97.0, 2.0], [101.0, 554.0], [102.0, 31.333333333333336], [103.0, 1478.0], [100.0, 2.0], [104.0, 46.5], [106.0, 489.6666666666667], [107.0, 1.0], [105.0, 733.5], [110.0, 781.5], [111.0, 2.0], [109.0, 1.0], [108.0, 1457.0], [115.0, 4.0], [114.0, 1443.0], [113.0, 724.5], [112.0, 725.5], [118.0, 1488.0], [117.0, 720.5], [116.0, 721.5], [121.0, 1491.0], [120.0, 1.0], [127.0, 101.0], [126.0, 1469.0], [125.0, 1.0], [128.0, 56.5], [132.0, 489.0], [131.0, 26.999999999999996], [130.0, 795.0], [133.0, 529.0], [135.0, 728.5], [134.0, 742.5], [129.0, 2.0], [137.0, 393.25], [136.0, 397.0], [138.0, 788.5], [141.0, 103.0], [143.0, 3.0], [142.0, 53.5], [144.0, 2.5], [146.0, 37.66666666666667], [151.0, 1476.0], [150.0, 741.0], [149.0, 742.5], [148.0, 731.0], [147.0, 736.0], [145.0, 1450.0], [159.0, 2.0], [157.0, 1469.0], [156.0, 1.0], [155.0, 1478.0], [154.0, 735.0], [153.0, 2.0], [163.0, 396.5], [162.0, 6.5], [167.0, 59.0], [166.0, 1455.0], [165.0, 740.5], [164.0, 744.5], [161.0, 1479.0], [160.0, 742.0], [170.0, 59.0], [172.0, 737.5], [173.0, 40.33333333333333], [174.0, 560.3333333333333], [171.0, 2.0], [168.0, 1478.0], [183.0, 2.0], [182.0, 1491.0], [181.0, 2.0], [180.0, 1496.0], [179.0, 751.0], [178.0, 2.0], [191.0, 737.0], [190.0, 1.0], [187.0, 1480.0], [186.0, 749.0], [185.0, 2.0], [184.0, 1498.0], [192.0, 749.0], [194.0, 8.0], [195.0, 748.0], [199.0, 575.3333333333333], [198.0, 1.0], [197.0, 1474.0], [196.0, 2.0], [200.0, 86.66666666666666], [204.0, 431.24999999999994], [206.0, 1.5], [207.0, 1459.0], [205.0, 1464.0], [203.0, 2.0], [202.0, 1471.0], [201.0, 727.0], [210.0, 2.5], [215.0, 1459.0], [214.0, 732.5], [213.0, 1.0], [212.0, 1455.0], [211.0, 733.5], [217.0, 8.0], [221.0, 726.5], [223.0, 1434.0], [222.0, 2.0], [220.0, 733.5], [219.0, 2.0], [229.0, 71.0], [231.0, 743.5], [230.0, 733.0], [226.0, 1458.0], [225.0, 2.0], [235.0, 497.66666666666663], [237.0, 749.5], [239.0, 1.0], [236.0, 728.5], [234.0, 738.0], [233.0, 2.0], [232.0, 1461.0], [240.0, 809.5], [246.0, 737.5], [247.0, 1.0], [245.0, 1.0], [244.0, 1473.0], [243.0, 1.0], [242.0, 1460.0], [241.0, 1.0], [249.0, 534.0], [253.0, 4.5], [255.0, 800.0], [254.0, 725.5], [252.0, 1453.0], [251.0, 1.0], [250.0, 1443.0], [248.0, 728.0], [270.0, 7.0], [261.0, 54.0], [260.0, 791.0], [264.0, 153.33333333333334], [265.0, 77.5], [271.0, 4.0], [268.0, 1477.0], [259.0, 715.5], [258.0, 4.0], [257.0, 1438.0], [256.0, 2.0], [263.0, 1435.0], [262.0, 719.0], [267.0, 741.5], [266.0, 742.0], [287.0, 1452.0], [279.0, 11.0], [276.0, 1469.0], [282.0, 536.6666666666667], [286.0, 728.5], [285.0, 729.5], [284.0, 722.0], [275.0, 735.5], [274.0, 2.0], [283.0, 723.0], [281.0, 726.0], [280.0, 2.0], [291.0, 800.0], [288.0, 61.0], [289.0, 367.75], [290.0, 364.75], [292.0, 84.5], [293.0, 1.0], [294.0, 1443.0], [302.0, 483.0], [303.0, 1420.0], [301.0, 1.0], [298.0, 1426.0], [297.0, 2.0], [318.0, 1.0], [313.0, 817.5], [304.0, 87.5], [305.0, 718.0], [307.0, 722.5], [306.0, 708.0], [314.0, 6.0], [315.0, 362.2], [319.0, 718.0], [312.0, 731.0], [311.0, 1.0], [310.0, 1471.0], [309.0, 736.5], [308.0, 722.0], [320.0, 90.0], [323.0, 179.0], [324.0, 90.5], [326.0, 91.0], [335.0, 713.0], [334.0, 2.0], [330.0, 1449.0], [329.0, 2.0], [327.0, 1426.0], [350.0, 191.0], [339.0, 481.0], [341.0, 709.5], [338.0, 1.0], [337.0, 1439.0], [336.0, 712.0], [340.0, 708.0], [348.0, 452.5], [351.0, 1.0], [347.0, 2.0], [346.0, 1422.0], [345.0, 714.0], [344.0, 1.0], [365.0, 1439.0], [352.0, 548.3333333333333], [354.0, 1449.0], [353.0, 2.0], [359.0, 714.5], [358.0, 1.0], [355.0, 4.0], [364.0, 5.5], [366.0, 201.0], [363.0, 1442.0], [362.0, 726.0], [361.0, 726.5], [360.0, 712.5], [368.0, 6.5], [370.0, 480.33333333333337], [369.0, 710.0], [372.0, 101.5], [373.0, 541.0], [376.0, 53.49999999999999], [375.0, 202.0], [380.0, 2.0], [383.0, 5.0], [371.0, 1436.0], [387.0, 206.0], [385.0, 204.0], [384.0, 203.0], [386.0, 4.0], [388.0, 3.0], [390.0, 3.0], [392.0, 809.0], [393.0, 703.5], [398.0, 84.4], [399.0, 725.0], [396.0, 1.75], [397.0, 542.5555555555555], [395.0, 84.8], [394.0, 611.3333333333333], [414.0, 711.5], [402.0, 413.0], [403.0, 717.75], [406.0, 104.5], [405.0, 947.3333333333333], [404.0, 716.5], [407.0, 717.0], [401.0, 1.0], [400.0, 723.0], [409.0, 3.0], [410.0, 763.25], [411.0, 1.0], [415.0, 213.0], [408.0, 954.0], [413.0, 1.0], [412.0, 1407.0], [423.0, 2.0], [420.0, 713.0], [419.0, 539.3333333333333], [418.0, 2.0], [417.0, 1401.0], [416.0, 2.0], [429.0, 1.0], [428.0, 699.5], [421.0, 87.6], [422.0, 215.0], [424.0, 2.0], [426.0, 810.5], [425.0, 1.0], [427.0, 73.0], [431.0, 146.33333333333331], [430.0, 1417.5], [446.0, 226.0], [432.0, 483.0], [435.0, 1.6666666666666667], [433.0, 1442.0], [436.0, 552.3333333333333], [437.0, 553.0], [438.0, 477.33333333333337], [439.0, 1426.0], [440.0, 3.0], [443.0, 709.5], [442.0, 711.5], [441.0, 2.0], [447.0, 1.0], [445.0, 1406.0], [444.0, 707.0], [462.0, 2.5], [450.0, 228.0], [448.0, 414.00000000000006], [449.0, 1418.0], [451.0, 2.0], [461.0, 1419.0], [460.0, 1.0], [452.0, 468.66666666666663], [454.0, 3.0], [453.0, 1400.0], [455.0, 544.3333333333333], [458.0, 116.5], [459.0, 699.0], [463.0, 1402.0], [456.0, 1416.0], [476.0, 126.24999999999999], [464.0, 235.0], [465.0, 707.5], [469.0, 125.0], [468.0, 17.0], [470.0, 15.0], [471.0, 9.5], [473.0, 9.0], [479.0, 3.0], [478.0, 13.0], [477.0, 15.0], [475.0, 15.0], [474.0, 15.0], [494.0, 1392.0], [484.0, 128.0], [487.0, 128.0], [491.0, 459.33333333333337], [493.0, 6.0], [483.0, 9.0], [482.0, 8.0], [481.0, 9.0], [480.0, 13.5], [490.0, 4.0], [489.0, 6.0], [488.0, 5.0], [486.0, 6.0], [485.0, 8.0], [499.0, 831.5], [501.0, 129.5], [504.0, 691.0], [506.0, 1011.0], [507.0, 1382.0], [505.0, 1399.0], [510.0, 1033.2857142857144], [508.0, 1377.0], [509.0, 1373.0], [511.0, 711.0], [496.0, 1412.0], [497.0, 1403.5], [498.0, 1403.0], [516.0, 696.0], [540.0, 3.0], [527.0, 1.0], [513.0, 703.5], [512.0, 2.0], [515.0, 933.0], [514.0, 5.0], [526.0, 1377.0], [525.0, 2.0], [524.0, 1384.0], [523.0, 2.0], [522.0, 1388.0], [521.0, 697.0], [520.0, 2.0], [538.0, 275.0], [539.0, 275.0], [541.0, 1350.0], [529.0, 693.0], [528.0, 694.5], [536.0, 1381.0], [519.0, 1396.0], [518.0, 694.5], [517.0, 1.0], [535.0, 684.5], [534.0, 697.5], [533.0, 2.0], [530.0, 1397.0], [569.0, 460.66666666666663], [544.0, 184.33333333333331], [549.0, 8.0], [550.0, 3.0], [568.0, 675.5], [551.0, 1359.0], [548.0, 552.3333333333333], [547.0, 4.0], [545.0, 1370.0], [554.0, 4.0], [553.0, 1344.0], [552.0, 2.0], [555.0, 284.0], [557.0, 553.3333333333333], [556.0, 2.0], [559.0, 2.0], [558.0, 1369.0], [567.0, 145.5], [566.0, 1359.0], [565.0, 681.5], [564.0, 1.0], [563.0, 1370.0], [562.0, 2.0], [570.0, 556.3333333333333], [572.0, 2.0], [571.0, 1368.0], [574.0, 1367.0], [573.0, 685.5], [575.0, 148.0], [601.0, 2.0], [576.0, 683.0], [580.0, 150.0], [583.0, 150.0], [585.0, 2.0], [584.0, 1332.0], [590.0, 1319.0], [589.0, 2.0], [591.0, 2.0], [592.0, 546.3333333333333], [599.0, 155.0], [598.0, 1323.0], [597.0, 662.5], [596.0, 2.0], [595.0, 1330.0], [594.0, 2.0], [593.0, 1320.0], [606.0, 309.0], [605.0, 1358.0], [604.0, 683.5], [603.0, 664.0], [602.0, 3.0], [607.0, 2.0], [610.0, 666.5], [620.0, 2.0], [609.0, 488.50000000000006], [608.0, 668.0], [611.0, 2.5], [613.0, 2.0], [612.0, 1346.0], [615.0, 668.5], [614.0, 671.5], [633.0, 652.5], [632.0, 1311.0], [635.0, 3.0], [636.0, 805.5], [639.0, 2.0], [634.0, 163.5], [626.0, 3.0], [628.0, 542.6666666666667], [627.0, 2.0], [629.0, 1310.0], [631.0, 664.0], [630.0, 2.0], [616.0, 450.33333333333337], [617.0, 543.6666666666667], [618.0, 823.0], [621.0, 550.0], [622.0, 669.5], [623.0, 666.0], [666.0, 492.75000000000006], [640.0, 163.5], [643.0, 163.5], [642.0, 1298.0], [641.0, 1.0], [646.0, 1.0], [644.0, 1300.0], [665.0, 1.0], [647.0, 1295.0], [649.0, 4.0], [652.0, 1.0], [655.0, 1.0], [653.0, 1303.0], [660.0, 10.0], [658.0, 1313.0], [657.0, 1.0], [656.0, 1318.0], [662.0, 1304.0], [661.0, 1.0], [670.0, 546.0], [671.0, 4.0], [669.0, 1.0], [668.0, 1313.0], [667.0, 661.0], [702.0, 1.0], [676.0, 549.6666666666667], [675.0, 2.0], [674.0, 1290.0], [673.0, 1.0], [687.0, 3.0], [686.0, 1.0], [681.0, 1288.0], [680.0, 1.0], [699.0, 639.5], [703.0, 821.0], [688.0, 855.6666666666666], [690.0, 1297.0], [689.0, 637.0], [692.0, 636.0], [691.0, 1.0], [697.0, 1.0], [696.0, 1283.0], [679.0, 1304.0], [678.0, 2.0], [677.0, 1306.0], [695.0, 1.0], [693.0, 1286.0], [711.0, 4.0], [704.0, 179.0], [705.0, 1282.0], [719.0, 2.0], [718.0, 1296.0], [717.0, 650.0], [716.0, 651.0], [715.0, 1.0], [714.0, 1277.0], [713.0, 643.5], [712.0, 2.0], [707.0, 179.0], [710.0, 650.0], [709.0, 2.0], [708.0, 1303.0], [722.0, 643.0], [724.0, 817.0], [723.0, 1.0], [726.0, 1296.0], [725.0, 2.0], [732.0, 3.0], [730.0, 1283.0], [729.0, 643.0], [728.0, 2.0], [733.0, 500.24999999999994], [735.0, 2.5], [721.0, 2.0], [720.0, 1290.0], [734.0, 1259.0], [761.0, 834.0], [737.0, 187.0], [751.0, 1.0], [750.0, 1252.0], [749.0, 2.0], [748.0, 1261.0], [744.0, 421.66666666666663], [746.0, 2.0], [745.0, 1257.0], [747.0, 541.6666666666667], [756.0, 429.0], [755.0, 642.5], [754.0, 2.0], [753.0, 1287.0], [752.0, 644.5], [758.0, 636.0], [757.0, 639.0], [767.0, 2.0], [766.0, 1282.0], [765.0, 2.0], [760.0, 633.0], [743.0, 638.5], [742.0, 639.5], [741.0, 1.0], [739.0, 1278.0], [738.0, 641.5], [796.0, 1.0], [769.0, 2.0], [768.0, 832.5], [770.0, 387.0], [771.0, 2.0], [773.0, 629.0], [772.0, 632.0], [775.0, 10.0], [774.0, 1253.0], [797.0, 627.0], [799.0, 835.3333333333333], [798.0, 629.0], [776.0, 7.0], [778.0, 5.0], [780.0, 392.0], [779.0, 9.0], [782.0, 1242.75], [781.0, 4.0], [783.0, 1252.0], [784.0, 198.0], [789.0, 635.5], [788.0, 628.0], [787.0, 617.5], [786.0, 627.0], [785.0, 616.0], [790.0, 3.0], [804.0, 202.5], [800.0, 204.5], [801.0, 621.0], [802.0, 402.0], [803.0, 2.0], [806.0, 2.0], [805.0, 403.0], [814.0, 206.0], [811.0, 1237.0], [816.0, 408.0], [825.0, 3.0], [819.0, 2.0], [821.0, 410.0], [818.0, 5.5], [845.0, 592.0], [840.0, 281.66666666666663], [841.0, 608.25], [844.0, 544.0], [843.0, 1.0], [842.0, 579.5], [848.0, 2.0], [862.0, 217.5], [859.0, 2.0], [858.0, 430.0], [850.0, 427.0], [855.0, 3.0], [854.0, 429.0], [856.0, 215.5], [839.0, 612.5], [838.0, 1224.0], [857.0, 216.0], [870.0, 218.5], [866.0, 3.0], [865.0, 599.0], [864.0, 1.0], [869.0, 2.0], [873.0, 2.0], [879.0, 441.0], [880.0, 222.5], [888.0, 447.0], [894.0, 448.0], [895.0, 3.0], [883.0, 222.5], [886.0, 2.0], [922.0, 3.3333333333333335], [897.0, 451.0], [896.0, 226.5], [898.0, 2.0], [899.0, 450.0], [900.0, 1.5], [901.0, 929.0], [921.0, 4.0], [920.0, 5.0], [925.0, 234.0], [924.0, 3.0], [923.0, 3.0], [926.0, 2.0], [914.0, 2.0], [916.0, 4.0], [917.0, 6.0], [919.0, 233.0], [918.0, 5.0], [915.0, 460.0], [913.0, 459.0], [904.0, 2.0], [905.0, 455.5], [909.0, 2.0], [910.0, 457.0], [957.0, 241.0], [933.0, 361.0], [930.0, 234.5], [934.0, 469.0], [952.0, 563.0], [954.0, 564.0], [953.0, 1.0], [956.0, 563.0], [955.0, 2.0], [936.0, 471.0], [937.0, 927.0], [939.0, 4.0], [944.0, 281.0], [951.0, 348.3333333333333], [947.0, 563.0], [950.0, 766.0], [945.0, 560.5], [946.0, 562.6666666666666], [959.0, 242.0], [958.0, 563.0], [986.0, 527.0], [962.0, 3.0], [960.0, 162.33333333333331], [964.0, 3.0], [963.0, 281.5], [965.0, 420.75], [966.0, 523.0], [971.0, 4.0], [970.0, 558.0], [969.0, 280.0], [968.0, 280.0], [972.0, 488.5], [976.0, 187.0], [984.0, 495.0], [967.0, 1.0], [985.0, 2.0], [987.0, 2.0], [989.0, 1.5], [990.0, 282.0], [988.0, 496.0], [975.0, 350.0], [974.0, 280.5], [973.0, 1.0], [983.0, 188.66666666666666], [982.0, 280.5], [981.0, 2.0], [980.0, 558.0], [979.0, 280.0], [978.0, 1.0], [977.0, 559.0], [994.0, 282.0], [992.0, 498.0], [993.0, 1.0], [997.0, 354.66666666666663], [995.0, 3.0], [999.0, 2.0], [1016.0, 281.0], [1019.0, 1.0], [1017.0, 561.0], [1020.0, 281.5], [1021.0, 514.0], [1022.0, 1.0], [1009.0, 558.0], [1008.0, 280.5], [1010.0, 255.0], [1013.0, 187.33333333333331], [1012.0, 280.5], [1011.0, 280.5], [1014.0, 358.0], [1015.0, 281.0], [998.0, 531.5], [1001.0, 393.0], [1000.0, 2.0], [1003.0, 2.0], [1002.0, 355.6666666666667], [1007.0, 187.33333333333331], [1006.0, 1.0], [1004.0, 558.0], [1028.0, 360.0], [1038.0, 262.0], [1026.0, 270.25], [1024.0, 561.0], [1052.0, 1.0], [1054.0, 532.0], [1030.0, 559.0], [1036.0, 281.5], [1032.0, 2.0], [1060.0, 3.0], [1058.0, 291.5], [1086.0, 7.0], [1080.0, 9.0], [1082.0, 9.0], [1084.0, 8.0], [1078.0, 276.5], [1072.0, 13.0], [1074.0, 12.0], [1076.0, 11.0], [1062.0, 533.0], [1066.0, 288.0], [1068.0, 185.33333333333331], [1070.0, 2.0], [1044.0, 193.0], [1042.0, 573.0], [1050.0, 133.5], [1098.0, 280.0], [1100.0, 554.0], [1094.0, 277.0], [1088.0, 275.5], [1118.0, 391.3333333333333], [1116.0, 388.3333333333333], [1114.0, 575.0], [1112.0, 561.0], [1108.0, 573.0], [1106.0, 566.0], [1092.0, 5.0], [1090.0, 5.0], [1096.0, 2.3333333333333335], [1136.0, 611.0], [1144.0, 1.0], [1142.0, 612.0], [1138.0, 307.0], [1146.0, 620.0], [1148.0, 1.0], [1150.0, 311.5], [1124.0, 598.0], [1126.0, 345.4285714285714], [1130.0, 607.0], [1134.0, 609.0], [1120.0, 574.0], [1102.0, 558.5], [1162.0, 1.0], [1152.0, 194.0], [1158.0, 314.5], [1182.0, 318.5], [1178.0, 610.0], [1176.0, 633.0], [1174.0, 632.0], [1172.0, 609.5], [1168.0, 405.0], [1170.0, 631.0], [1180.0, 588.0], [1166.0, 629.0], [1200.0, 325.5], [1214.0, 601.0], [1184.0, 589.0], [1186.0, 2.0], [1198.0, 619.5], [1196.0, 412.66666666666663], [1192.0, 320.5], [1190.0, 1.0], [1188.0, 841.0], [1208.0, 329.0], [1210.0, 1.0], [1212.0, 330.5], [1206.0, 626.0], [1266.0, 617.0], [1278.0, 616.0], [1248.0, 483.0], [1250.0, 356.5], [1252.0, 356.5], [1276.0, 309.0], [1272.0, 1.0], [1268.0, 724.0], [1270.0, 721.0], [1264.0, 447.66666666666663], [1244.0, 695.0], [1246.0, 704.0], [1218.0, 467.5], [1216.0, 665.0], [1220.0, 334.5], [1222.0, 2.0], [1224.0, 338.0], [1226.0, 638.0], [1228.0, 1.0], [1230.0, 340.0], [1238.0, 431.66666666666663], [1242.0, 2.0], [1240.0, 691.0], [1232.0, 341.5], [1234.0, 1.0], [1236.0, 686.0], [1258.0, 445.0], [1260.0, 2.0], [1262.0, 2.0], [1254.0, 662.0], [1334.0, 360.25], [1330.0, 505.42857142857144], [1314.0, 329.0], [1322.0, 229.33333333333334], [1320.0, 204.75], [1318.0, 174.75], [1316.0, 201.24999999999997], [1336.0, 415.0], [1338.0, 313.14285714285717], [1340.0, 486.33333333333337], [1342.0, 368.25], [1312.0, 259.66666666666663], [1332.0, 145.8], [1328.0, 108.0], [1294.0, 1.0], [1292.0, 738.0], [1290.0, 369.5], [1326.0, 253.90909090909088], [1324.0, 8.571428571428571], [1304.0, 376.5], [1306.0, 748.0], [1302.0, 1.0], [1300.0, 750.0], [1296.0, 622.0], [1298.0, 749.0], [1288.0, 660.0], [1286.0, 620.0], [1284.0, 735.0], [1282.0, 2.0], [1310.0, 2.0], [1344.0, 734.0], [1029.0, 173.66666666666669], [1025.0, 1.0], [1027.0, 280.5], [1053.0, 554.5], [1051.0, 577.0], [1055.0, 2.0], [1031.0, 174.0], [1035.0, 2.0], [1033.0, 560.0], [1059.0, 580.0], [1057.0, 2.0], [1087.0, 7.0], [1081.0, 5.5], [1083.0, 8.0], [1085.0, 5.5], [1079.0, 6.0], [1073.0, 276.0], [1039.0, 567.0], [1075.0, 365.33333333333337], [1077.0, 6.0], [1067.0, 185.0], [1065.0, 576.0], [1063.0, 4.0], [1071.0, 13.666666666666666], [1043.0, 1.0], [1041.0, 1.0], [1045.0, 551.0], [1049.0, 265.0], [1093.0, 276.5], [1119.0, 588.0], [1115.0, 580.0], [1117.0, 573.5], [1105.0, 284.5], [1107.0, 570.0], [1113.0, 561.0], [1089.0, 4.0], [1091.0, 5.0], [1095.0, 277.0], [1097.0, 2.0], [1103.0, 2.0], [1137.0, 2.5], [1145.0, 399.0], [1141.0, 1.0], [1139.0, 612.0], [1149.0, 311.5], [1151.0, 623.0], [1121.0, 297.0], [1123.0, 397.0], [1125.0, 347.2], [1131.0, 568.0], [1129.0, 1.0], [1127.0, 604.0], [1133.0, 2.0], [1135.0, 2.0], [1101.0, 372.6666666666667], [1161.0, 582.0], [1207.0, 299.5], [1157.0, 3.0], [1153.0, 624.0], [1159.0, 626.0], [1183.0, 612.5], [1181.0, 295.5], [1177.0, 293.5], [1175.0, 1.0], [1173.0, 1.0], [1169.0, 316.0], [1171.0, 1.0], [1163.0, 305.5], [1165.0, 2.0], [1167.0, 2.0], [1201.0, 624.5], [1215.0, 1.0], [1199.0, 1.0], [1195.0, 1.0], [1193.0, 642.0], [1191.0, 320.5], [1197.0, 323.0], [1187.0, 410.66666666666663], [1213.0, 630.5], [1209.0, 628.0], [1211.0, 330.0], [1205.0, 299.0], [1271.0, 614.5], [1277.0, 728.0], [1249.0, 356.0], [1251.0, 355.5], [1253.0, 356.0], [1273.0, 669.0], [1269.0, 310.0], [1267.0, 3.0], [1265.0, 670.5], [1245.0, 306.0], [1217.0, 2.0], [1219.0, 334.0], [1221.0, 671.0], [1223.0, 338.0], [1247.0, 1.0], [1229.0, 339.0], [1231.0, 341.5], [1225.0, 425.33333333333337], [1243.0, 435.33333333333337], [1239.0, 345.0], [1233.0, 643.5], [1235.0, 343.5], [1237.0, 1.0], [1257.0, 1.0], [1259.0, 724.0], [1261.0, 724.0], [1263.0, 362.5], [1337.0, 362.75], [1307.0, 626.0], [1321.0, 342.25], [1319.0, 199.0], [1317.0, 205.25], [1315.0, 15.0], [1333.0, 366.5], [1335.0, 359.5], [1339.0, 293.4], [1341.0, 244.66666666666669], [1343.0, 246.66666666666669], [1313.0, 389.5], [1331.0, 318.0], [1295.0, 746.0], [1291.0, 369.5], [1289.0, 2.0], [1329.0, 264.45454545454544], [1323.0, 350.875], [1327.0, 165.66666666666669], [1325.0, 265.76190476190476], [1305.0, 458.33333333333337], [1303.0, 500.0], [1299.0, 313.0], [1297.0, 1.0], [1283.0, 366.5], [1287.0, 2.0], [1281.0, 616.5], [1311.0, 360.5]], "isOverall": false, "label": "HTTP Request character", "isController": false}, {"data": [[705.4479999999992, 408.7969999999998]], "isOverall": false, "label": "HTTP Request character-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1344.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7366.666666666667, "minX": 1.75925958E12, "maxY": 9233.333333333334, "series": [{"data": [[1.75925958E12, 9233.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75925958E12, 7366.666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75925958E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 408.7969999999998, "minX": 1.75925958E12, "maxY": 408.7969999999998, "series": [{"data": [[1.75925958E12, 408.7969999999998]], "isOverall": false, "label": "HTTP Request character", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75925958E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 408.79450000000094, "minX": 1.75925958E12, "maxY": 408.79450000000094, "series": [{"data": [[1.75925958E12, 408.79450000000094]], "isOverall": false, "label": "HTTP Request character", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75925958E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.17499999999999952, "minX": 1.75925958E12, "maxY": 0.17499999999999952, "series": [{"data": [[1.75925958E12, 0.17499999999999952]], "isOverall": false, "label": "HTTP Request character", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75925958E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.75925958E12, "maxY": 1509.0, "series": [{"data": [[1.75925958E12, 1509.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75925958E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75925958E12, 1407.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75925958E12, 1486.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75925958E12, 22.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.75925958E12, 1452.9499999999998]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75925958E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 14.0, "minX": 582.0, "maxY": 653.0, "series": [{"data": [[584.0, 14.0], [582.0, 653.0], [834.0, 30.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 834.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 14.0, "minX": 582.0, "maxY": 653.0, "series": [{"data": [[584.0, 14.0], [582.0, 653.0], [834.0, 30.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 834.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.75925958E12, "maxY": 33.333333333333336, "series": [{"data": [[1.75925958E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75925958E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.75925958E12, "maxY": 33.333333333333336, "series": [{"data": [[1.75925958E12, 33.333333333333336]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75925958E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.75925958E12, "maxY": 33.333333333333336, "series": [{"data": [[1.75925958E12, 33.333333333333336]], "isOverall": false, "label": "HTTP Request character-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75925958E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.75925958E12, "maxY": 33.333333333333336, "series": [{"data": [[1.75925958E12, 33.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75925958E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

