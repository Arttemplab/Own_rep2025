/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 2297.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 2.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 2.0], [20.4, 2.0], [20.5, 2.0], [20.6, 2.0], [20.7, 2.0], [20.8, 2.0], [20.9, 2.0], [21.0, 2.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 2.0], [21.8, 2.0], [21.9, 2.0], [22.0, 2.0], [22.1, 2.0], [22.2, 2.0], [22.3, 2.0], [22.4, 2.0], [22.5, 2.0], [22.6, 2.0], [22.7, 2.0], [22.8, 2.0], [22.9, 2.0], [23.0, 2.0], [23.1, 2.0], [23.2, 2.0], [23.3, 2.0], [23.4, 2.0], [23.5, 2.0], [23.6, 2.0], [23.7, 2.0], [23.8, 2.0], [23.9, 2.0], [24.0, 2.0], [24.1, 2.0], [24.2, 2.0], [24.3, 2.0], [24.4, 2.0], [24.5, 2.0], [24.6, 2.0], [24.7, 2.0], [24.8, 2.0], [24.9, 2.0], [25.0, 2.0], [25.1, 2.0], [25.2, 2.0], [25.3, 2.0], [25.4, 2.0], [25.5, 2.0], [25.6, 2.0], [25.7, 2.0], [25.8, 2.0], [25.9, 2.0], [26.0, 2.0], [26.1, 2.0], [26.2, 2.0], [26.3, 2.0], [26.4, 2.0], [26.5, 2.0], [26.6, 2.0], [26.7, 2.0], [26.8, 2.0], [26.9, 2.0], [27.0, 2.0], [27.1, 2.0], [27.2, 2.0], [27.3, 2.0], [27.4, 2.0], [27.5, 2.0], [27.6, 2.0], [27.7, 2.0], [27.8, 2.0], [27.9, 2.0], [28.0, 2.0], [28.1, 2.0], [28.2, 2.0], [28.3, 2.0], [28.4, 2.0], [28.5, 2.0], [28.6, 2.0], [28.7, 2.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 2.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 2.0], [30.6, 2.0], [30.7, 2.0], [30.8, 2.0], [30.9, 2.0], [31.0, 2.0], [31.1, 2.0], [31.2, 2.0], [31.3, 2.0], [31.4, 2.0], [31.5, 2.0], [31.6, 2.0], [31.7, 2.0], [31.8, 2.0], [31.9, 2.0], [32.0, 2.0], [32.1, 2.0], [32.2, 2.0], [32.3, 2.0], [32.4, 2.0], [32.5, 2.0], [32.6, 2.0], [32.7, 2.0], [32.8, 2.0], [32.9, 2.0], [33.0, 2.0], [33.1, 2.0], [33.2, 2.0], [33.3, 2.0], [33.4, 2.0], [33.5, 2.0], [33.6, 2.0], [33.7, 2.0], [33.8, 2.0], [33.9, 2.0], [34.0, 2.0], [34.1, 2.0], [34.2, 2.0], [34.3, 2.0], [34.4, 2.0], [34.5, 2.0], [34.6, 2.0], [34.7, 2.0], [34.8, 2.0], [34.9, 2.0], [35.0, 2.0], [35.1, 3.0], [35.2, 3.0], [35.3, 3.0], [35.4, 3.0], [35.5, 3.0], [35.6, 3.0], [35.7, 3.0], [35.8, 3.0], [35.9, 3.0], [36.0, 3.0], [36.1, 3.0], [36.2, 3.0], [36.3, 3.0], [36.4, 3.0], [36.5, 3.0], [36.6, 3.0], [36.7, 3.0], [36.8, 3.0], [36.9, 3.0], [37.0, 3.0], [37.1, 3.0], [37.2, 3.0], [37.3, 3.0], [37.4, 3.0], [37.5, 3.0], [37.6, 3.0], [37.7, 3.0], [37.8, 3.0], [37.9, 3.0], [38.0, 3.0], [38.1, 3.0], [38.2, 3.0], [38.3, 3.0], [38.4, 3.0], [38.5, 3.0], [38.6, 3.0], [38.7, 3.0], [38.8, 3.0], [38.9, 3.0], [39.0, 3.0], [39.1, 3.0], [39.2, 3.0], [39.3, 3.0], [39.4, 3.0], [39.5, 3.0], [39.6, 3.0], [39.7, 3.0], [39.8, 3.0], [39.9, 3.0], [40.0, 3.0], [40.1, 3.0], [40.2, 3.0], [40.3, 3.0], [40.4, 3.0], [40.5, 3.0], [40.6, 3.0], [40.7, 3.0], [40.8, 3.0], [40.9, 3.0], [41.0, 3.0], [41.1, 3.0], [41.2, 3.0], [41.3, 3.0], [41.4, 3.0], [41.5, 3.0], [41.6, 3.0], [41.7, 3.0], [41.8, 3.0], [41.9, 3.0], [42.0, 3.0], [42.1, 3.0], [42.2, 3.0], [42.3, 3.0], [42.4, 3.0], [42.5, 3.0], [42.6, 3.0], [42.7, 3.0], [42.8, 4.0], [42.9, 4.0], [43.0, 4.0], [43.1, 4.0], [43.2, 4.0], [43.3, 4.0], [43.4, 4.0], [43.5, 4.0], [43.6, 4.0], [43.7, 4.0], [43.8, 4.0], [43.9, 4.0], [44.0, 4.0], [44.1, 4.0], [44.2, 4.0], [44.3, 4.0], [44.4, 4.0], [44.5, 4.0], [44.6, 4.0], [44.7, 4.0], [44.8, 4.0], [44.9, 4.0], [45.0, 4.0], [45.1, 4.0], [45.2, 4.0], [45.3, 4.0], [45.4, 4.0], [45.5, 5.0], [45.6, 5.0], [45.7, 5.0], [45.8, 5.0], [45.9, 5.0], [46.0, 5.0], [46.1, 5.0], [46.2, 5.0], [46.3, 5.0], [46.4, 5.0], [46.5, 5.0], [46.6, 6.0], [46.7, 6.0], [46.8, 6.0], [46.9, 6.0], [47.0, 6.0], [47.1, 6.0], [47.2, 6.0], [47.3, 6.0], [47.4, 6.0], [47.5, 7.0], [47.6, 7.0], [47.7, 7.0], [47.8, 7.0], [47.9, 7.0], [48.0, 7.0], [48.1, 7.0], [48.2, 7.0], [48.3, 8.0], [48.4, 8.0], [48.5, 8.0], [48.6, 8.0], [48.7, 8.0], [48.8, 8.0], [48.9, 9.0], [49.0, 9.0], [49.1, 9.0], [49.2, 11.0], [49.3, 11.0], [49.4, 11.0], [49.5, 12.0], [49.6, 12.0], [49.7, 12.0], [49.8, 13.0], [49.9, 13.0], [50.0, 13.0], [50.1, 14.0], [50.2, 15.0], [50.3, 17.0], [50.4, 19.0], [50.5, 19.0], [50.6, 21.0], [50.7, 31.0], [50.8, 32.0], [50.9, 32.0], [51.0, 33.0], [51.1, 44.0], [51.2, 45.0], [51.3, 47.0], [51.4, 57.0], [51.5, 57.0], [51.6, 58.0], [51.7, 69.0], [51.8, 70.0], [51.9, 72.0], [52.0, 79.0], [52.1, 80.0], [52.2, 81.0], [52.3, 89.0], [52.4, 94.0], [52.5, 94.0], [52.6, 97.0], [52.7, 100.0], [52.8, 102.0], [52.9, 104.0], [53.0, 109.0], [53.1, 112.0], [53.2, 114.0], [53.3, 115.0], [53.4, 116.0], [53.5, 122.0], [53.6, 124.0], [53.7, 124.0], [53.8, 128.0], [53.9, 128.0], [54.0, 132.0], [54.1, 132.0], [54.2, 132.0], [54.3, 133.0], [54.4, 138.0], [54.5, 142.0], [54.6, 152.0], [54.7, 153.0], [54.8, 153.0], [54.9, 153.0], [55.0, 156.0], [55.1, 160.0], [55.2, 160.0], [55.3, 160.0], [55.4, 161.0], [55.5, 172.0], [55.6, 173.0], [55.7, 174.0], [55.8, 177.0], [55.9, 184.0], [56.0, 185.0], [56.1, 187.0], [56.2, 188.0], [56.3, 189.0], [56.4, 190.0], [56.5, 191.0], [56.6, 191.0], [56.7, 192.0], [56.8, 193.0], [56.9, 193.0], [57.0, 193.0], [57.1, 194.0], [57.2, 195.0], [57.3, 196.0], [57.4, 198.0], [57.5, 206.0], [57.6, 207.0], [57.7, 210.0], [57.8, 218.0], [57.9, 219.0], [58.0, 225.0], [58.1, 236.0], [58.2, 241.0], [58.3, 244.0], [58.4, 255.0], [58.5, 259.0], [58.6, 268.0], [58.7, 278.0], [58.8, 282.0], [58.9, 285.0], [59.0, 288.0], [59.1, 297.0], [59.2, 303.0], [59.3, 311.0], [59.4, 311.0], [59.5, 319.0], [59.6, 322.0], [59.7, 325.0], [59.8, 332.0], [59.9, 338.0], [60.0, 350.0], [60.1, 352.0], [60.2, 354.0], [60.3, 359.0], [60.4, 371.0], [60.5, 374.0], [60.6, 391.0], [60.7, 393.0], [60.8, 400.0], [60.9, 402.0], [61.0, 411.0], [61.1, 414.0], [61.2, 422.0], [61.3, 427.0], [61.4, 432.0], [61.5, 439.0], [61.6, 445.0], [61.7, 450.0], [61.8, 453.0], [61.9, 458.0], [62.0, 463.0], [62.1, 465.0], [62.2, 476.0], [62.3, 482.0], [62.4, 490.0], [62.5, 495.0], [62.6, 502.0], [62.7, 508.0], [62.8, 510.0], [62.9, 518.0], [63.0, 525.0], [63.1, 527.0], [63.2, 530.0], [63.3, 537.0], [63.4, 540.0], [63.5, 549.0], [63.6, 559.0], [63.7, 569.0], [63.8, 573.0], [63.9, 575.0], [64.0, 580.0], [64.1, 586.0], [64.2, 590.0], [64.3, 596.0], [64.4, 606.0], [64.5, 621.0], [64.6, 624.0], [64.7, 629.0], [64.8, 634.0], [64.9, 643.0], [65.0, 654.0], [65.1, 656.0], [65.2, 660.0], [65.3, 663.0], [65.4, 665.0], [65.5, 674.0], [65.6, 678.0], [65.7, 680.0], [65.8, 686.0], [65.9, 691.0], [66.0, 694.0], [66.1, 695.0], [66.2, 700.0], [66.3, 705.0], [66.4, 705.0], [66.5, 707.0], [66.6, 708.0], [66.7, 708.0], [66.8, 709.0], [66.9, 711.0], [67.0, 715.0], [67.1, 717.0], [67.2, 719.0], [67.3, 720.0], [67.4, 720.0], [67.5, 720.0], [67.6, 725.0], [67.7, 726.0], [67.8, 729.0], [67.9, 732.0], [68.0, 736.0], [68.1, 737.0], [68.2, 740.0], [68.3, 741.0], [68.4, 741.0], [68.5, 741.0], [68.6, 743.0], [68.7, 744.0], [68.8, 744.0], [68.9, 747.0], [69.0, 750.0], [69.1, 754.0], [69.2, 754.0], [69.3, 755.0], [69.4, 756.0], [69.5, 759.0], [69.6, 761.0], [69.7, 761.0], [69.8, 762.0], [69.9, 764.0], [70.0, 765.0], [70.1, 766.0], [70.2, 768.0], [70.3, 770.0], [70.4, 772.0], [70.5, 773.0], [70.6, 774.0], [70.7, 775.0], [70.8, 775.0], [70.9, 776.0], [71.0, 776.0], [71.1, 777.0], [71.2, 778.0], [71.3, 778.0], [71.4, 779.0], [71.5, 780.0], [71.6, 781.0], [71.7, 782.0], [71.8, 783.0], [71.9, 785.0], [72.0, 786.0], [72.1, 787.0], [72.2, 788.0], [72.3, 788.0], [72.4, 790.0], [72.5, 790.0], [72.6, 792.0], [72.7, 794.0], [72.8, 794.0], [72.9, 796.0], [73.0, 797.0], [73.1, 799.0], [73.2, 799.0], [73.3, 799.0], [73.4, 801.0], [73.5, 804.0], [73.6, 804.0], [73.7, 805.0], [73.8, 807.0], [73.9, 808.0], [74.0, 809.0], [74.1, 810.0], [74.2, 811.0], [74.3, 811.0], [74.4, 812.0], [74.5, 814.0], [74.6, 814.0], [74.7, 817.0], [74.8, 818.0], [74.9, 821.0], [75.0, 822.0], [75.1, 822.0], [75.2, 823.0], [75.3, 826.0], [75.4, 827.0], [75.5, 828.0], [75.6, 828.0], [75.7, 828.0], [75.8, 829.0], [75.9, 830.0], [76.0, 831.0], [76.1, 832.0], [76.2, 832.0], [76.3, 833.0], [76.4, 833.0], [76.5, 834.0], [76.6, 836.0], [76.7, 837.0], [76.8, 838.0], [76.9, 839.0], [77.0, 841.0], [77.1, 843.0], [77.2, 847.0], [77.3, 849.0], [77.4, 849.0], [77.5, 850.0], [77.6, 853.0], [77.7, 855.0], [77.8, 858.0], [77.9, 859.0], [78.0, 860.0], [78.1, 861.0], [78.2, 862.0], [78.3, 879.0], [78.4, 1121.0], [78.5, 1434.0], [78.6, 1448.0], [78.7, 1450.0], [78.8, 1452.0], [78.9, 1454.0], [79.0, 1456.0], [79.1, 1457.0], [79.2, 1460.0], [79.3, 1463.0], [79.4, 1469.0], [79.5, 1471.0], [79.6, 1474.0], [79.7, 1476.0], [79.8, 1478.0], [79.9, 1480.0], [80.0, 1485.0], [80.1, 1487.0], [80.2, 1490.0], [80.3, 1493.0], [80.4, 1497.0], [80.5, 1500.0], [80.6, 1502.0], [80.7, 1502.0], [80.8, 1503.0], [80.9, 1504.0], [81.0, 1506.0], [81.1, 1509.0], [81.2, 1512.0], [81.3, 1514.0], [81.4, 1515.0], [81.5, 1518.0], [81.6, 1520.0], [81.7, 1522.0], [81.8, 1524.0], [81.9, 1528.0], [82.0, 1529.0], [82.1, 1532.0], [82.2, 1536.0], [82.3, 1538.0], [82.4, 1540.0], [82.5, 1541.0], [82.6, 1547.0], [82.7, 1550.0], [82.8, 1551.0], [82.9, 1555.0], [83.0, 1558.0], [83.1, 1560.0], [83.2, 1560.0], [83.3, 1562.0], [83.4, 1569.0], [83.5, 1571.0], [83.6, 1575.0], [83.7, 1576.0], [83.8, 1579.0], [83.9, 1581.0], [84.0, 1584.0], [84.1, 1585.0], [84.2, 1588.0], [84.3, 1591.0], [84.4, 1592.0], [84.5, 1597.0], [84.6, 1599.0], [84.7, 1605.0], [84.8, 1606.0], [84.9, 1607.0], [85.0, 1612.0], [85.1, 1614.0], [85.2, 1616.0], [85.3, 1617.0], [85.4, 1620.0], [85.5, 1621.0], [85.6, 1624.0], [85.7, 1627.0], [85.8, 1629.0], [85.9, 1629.0], [86.0, 1631.0], [86.1, 1635.0], [86.2, 1636.0], [86.3, 1639.0], [86.4, 1641.0], [86.5, 1644.0], [86.6, 1650.0], [86.7, 1651.0], [86.8, 1652.0], [86.9, 1653.0], [87.0, 1656.0], [87.1, 1657.0], [87.2, 1659.0], [87.3, 1660.0], [87.4, 1660.0], [87.5, 1661.0], [87.6, 1662.0], [87.7, 1664.0], [87.8, 1664.0], [87.9, 1666.0], [88.0, 1666.0], [88.1, 1668.0], [88.2, 1669.0], [88.3, 1669.0], [88.4, 1670.0], [88.5, 1671.0], [88.6, 1671.0], [88.7, 1672.0], [88.8, 1673.0], [88.9, 1674.0], [89.0, 1674.0], [89.1, 1675.0], [89.2, 1677.0], [89.3, 1678.0], [89.4, 1678.0], [89.5, 1679.0], [89.6, 1679.0], [89.7, 1680.0], [89.8, 1681.0], [89.9, 1681.0], [90.0, 1682.0], [90.1, 1682.0], [90.2, 1683.0], [90.3, 1684.0], [90.4, 1684.0], [90.5, 1685.0], [90.6, 1686.0], [90.7, 1687.0], [90.8, 1688.0], [90.9, 1688.0], [91.0, 1689.0], [91.1, 1690.0], [91.2, 1691.0], [91.3, 1691.0], [91.4, 1693.0], [91.5, 1694.0], [91.6, 1695.0], [91.7, 1695.0], [91.8, 1696.0], [91.9, 1696.0], [92.0, 1697.0], [92.1, 1698.0], [92.2, 1702.0], [92.3, 1702.0], [92.4, 1703.0], [92.5, 1705.0], [92.6, 1706.0], [92.7, 1713.0], [92.8, 1718.0], [92.9, 1880.0], [93.0, 1881.0], [93.1, 1883.0], [93.2, 1887.0], [93.3, 1888.0], [93.4, 1890.0], [93.5, 1891.0], [93.6, 1892.0], [93.7, 1893.0], [93.8, 1893.0], [93.9, 1894.0], [94.0, 1894.0], [94.1, 1895.0], [94.2, 1896.0], [94.3, 1897.0], [94.4, 1901.0], [94.5, 1902.0], [94.6, 1902.0], [94.7, 1903.0], [94.8, 1906.0], [94.9, 1906.0], [95.0, 1907.0], [95.1, 1908.0], [95.2, 1909.0], [95.3, 1910.0], [95.4, 1911.0], [95.5, 1911.0], [95.6, 1916.0], [95.7, 1916.0], [95.8, 1917.0], [95.9, 1918.0], [96.0, 1999.0], [96.1, 2004.0], [96.2, 2011.0], [96.3, 2018.0], [96.4, 2026.0], [96.5, 2027.0], [96.6, 2031.0], [96.7, 2034.0], [96.8, 2040.0], [96.9, 2043.0], [97.0, 2045.0], [97.1, 2047.0], [97.2, 2049.0], [97.3, 2050.0], [97.4, 2056.0], [97.5, 2059.0], [97.6, 2060.0], [97.7, 2063.0], [97.8, 2067.0], [97.9, 2073.0], [98.0, 2077.0], [98.1, 2080.0], [98.2, 2083.0], [98.3, 2091.0], [98.4, 2092.0], [98.5, 2093.0], [98.6, 2094.0], [98.7, 2100.0], [98.8, 2100.0], [98.9, 2102.0], [99.0, 2102.0], [99.1, 2107.0], [99.2, 2111.0], [99.3, 2112.0], [99.4, 2117.0], [99.5, 2127.0], [99.6, 2271.0], [99.7, 2273.0], [99.8, 2278.0], [99.9, 2296.0]], "isOverall": false, "label": "HTTP Request character", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1053.0, "series": [{"data": [[0.0, 1053.0], [2100.0, 18.0], [2200.0, 8.0], [600.0, 36.0], [700.0, 143.0], [200.0, 34.0], [800.0, 101.0], [1100.0, 1.0], [300.0, 33.0], [1400.0, 41.0], [1500.0, 84.0], [100.0, 96.0], [400.0, 35.0], [1600.0, 149.0], [1700.0, 15.0], [1800.0, 30.0], [1900.0, 33.0], [500.0, 37.0], [2000.0, 53.0]], "isOverall": false, "label": "HTTP Request character", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 361.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1 500ms"], [2, "Requests having \nresponse time > 1 500ms"], [3, "Requests in error"]], "maxY": 1251.0, "series": [{"data": [[0.0, 1251.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 361.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1 500ms", "isController": false}, {"data": [[2.0, 388.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1 500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 325.2570000000004, "minX": 1.7592609E12, "maxY": 325.2570000000004, "series": [{"data": [[1.7592609E12, 325.2570000000004]], "isOverall": false, "label": "Thread GroupMy Test1000PUTcharacter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7592609E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 2.0, "maxY": 2297.0, "series": [{"data": [[2.0, 2.0], [3.0, 2100.0], [6.0, 2.0], [7.0, 2107.0], [8.0, 6.25], [9.0, 2.0], [10.0, 2271.0], [11.0, 4.0], [12.0, 462.6], [13.0, 2297.0], [14.0, 1.0], [15.0, 1140.0], [16.0, 2273.0], [17.0, 2.0], [18.0, 1140.0], [19.0, 575.75], [20.0, 765.6666666666667], [21.0, 422.8], [22.0, 8.666666666666668], [23.0, 11.25], [24.0, 2.0], [25.0, 1019.0], [26.0, 1014.0], [27.0, 1014.5], [28.0, 2046.0], [31.0, 2.0], [33.0, 415.0], [32.0, 1016.5], [34.0, 691.6666666666666], [35.0, 20.6], [36.0, 420.6], [37.0, 508.0], [38.0, 1024.0], [40.0, 43.0], [41.0, 2.0], [43.0, 360.3333333333333], [42.0, 677.3333333333333], [45.0, 2.6666666666666665], [44.0, 419.8], [47.0, 2.0], [46.0, 2010.0], [49.0, 1006.0], [48.0, 1000.5], [51.0, 1026.0], [50.0, 2.0], [53.0, 218.1818181818182], [52.0, 1023.0], [54.0, 353.66666666666663], [55.0, 1025.0], [57.0, 1022.0], [56.0, 1025.5], [59.0, 2.0], [58.0, 2033.0], [61.0, 1.0], [60.0, 2026.0], [63.0, 248.55555555555554], [62.0, 551.0], [64.0, 534.25], [65.0, 1067.0], [67.0, 3.0], [70.0, 372.6666666666667], [71.0, 1069.0], [69.0, 1028.0], [68.0, 1025.0], [72.0, 28.666666666666664], [73.0, 1032.0], [74.0, 42.0], [75.0, 2.0], [76.0, 693.6666666666667], [77.0, 1081.5], [79.0, 3.5], [82.0, 45.5], [83.0, 725.0], [80.0, 2082.0], [84.0, 48.833333333333336], [85.0, 34.666666666666664], [86.0, 97.0], [87.0, 1.0], [91.0, 2067.0], [90.0, 2.0], [89.0, 2073.0], [88.0, 1032.0], [92.0, 5.0], [94.0, 461.4], [95.0, 578.25], [93.0, 1022.0], [98.0, 697.3333333333334], [97.0, 460.0], [99.0, 1.0], [96.0, 1.0], [103.0, 734.3333333333334], [102.0, 2.0], [100.0, 2077.0], [107.0, 2094.0], [106.0, 2.0], [105.0, 2093.0], [104.0, 3.0], [108.0, 39.0], [111.0, 737.3333333333334], [110.0, 2.0], [109.0, 2099.0], [115.0, 4.5], [114.0, 114.0], [117.0, 698.3333333333333], [116.0, 58.5], [118.0, 550.25], [119.0, 427.2], [122.0, 2108.0], [121.0, 1052.5], [120.0, 2.0], [125.0, 1057.0], [127.0, 703.6666666666667], [126.0, 2.0], [124.0, 3.0], [135.0, 1903.0], [134.0, 951.5], [133.0, 1.0], [132.0, 2115.0], [131.0, 2.0], [130.0, 2111.0], [129.0, 3.0], [128.0, 2111.0], [137.0, 949.5], [140.0, 122.0], [143.0, 93.0], [142.0, 2127.0], [141.0, 2.0], [139.0, 1889.0], [138.0, 2.0], [136.0, 2.0], [151.0, 1121.0], [150.0, 1046.5], [149.0, 2.0], [148.0, 2100.0], [147.0, 2.0], [144.0, 2132.0], [154.0, 703.3333333333333], [153.0, 747.3333333333333], [156.0, 5.0], [159.0, 1908.0], [158.0, 953.0], [157.0, 948.0], [155.0, 2102.0], [152.0, 2.0], [161.0, 6.5], [162.0, 953.0], [167.0, 1890.0], [166.0, 2.0], [169.0, 7.5], [171.0, 90.66666666666667], [174.0, 132.0], [173.0, 130.0], [175.0, 132.0], [172.0, 1893.0], [170.0, 1882.0], [183.0, 683.6666666666666], [182.0, 682.0], [179.0, 68.0], [181.0, 2.0], [190.0, 49.0], [186.0, 68.0], [191.0, 12.0], [189.0, 1888.0], [188.0, 4.0], [185.0, 1901.0], [184.0, 2.0], [194.0, 5.0], [197.0, 6.0], [196.0, 7.0], [198.0, 8.0], [199.0, 72.5], [202.0, 48.33333333333333], [206.0, 72.0], [207.0, 679.3333333333333], [204.0, 1918.0], [203.0, 955.0], [208.0, 948.5], [210.0, 1910.0], [209.0, 2.0], [229.0, 485.0], [228.0, 689.3333333333333], [230.0, 687.0], [231.0, 688.6666666666667], [227.0, 954.0], [226.0, 2.0], [232.0, 514.75], [233.0, 411.4], [234.0, 638.0], [235.0, 682.3333333333333], [237.0, 78.0], [236.0, 1024.0], [238.0, 3.0], [239.0, 2.0], [242.0, 3.0], [243.0, 156.0], [247.0, 56.0], [245.0, 6.0], [240.0, 1884.0], [255.0, 3.0], [254.0, 7.0], [253.0, 2.0], [252.0, 2.0], [251.0, 3.0], [250.0, 4.0], [249.0, 4.0], [248.0, 4.0], [256.0, 160.0], [258.0, 160.0], [260.0, 995.25], [261.0, 1091.6666666666667], [262.0, 442.4], [263.0, 4.0], [269.0, 1696.0], [268.0, 3.0], [287.0, 115.33333333333334], [277.0, 961.5], [276.0, 2.0], [282.0, 954.0], [284.0, 1896.0], [283.0, 2.0], [281.0, 956.5], [280.0, 952.0], [279.0, 948.0], [278.0, 1.0], [301.0, 1917.0], [288.0, 116.33333333333333], [289.0, 628.3333333333334], [291.0, 847.0], [290.0, 2.0], [297.0, 625.3333333333333], [296.0, 2.0], [303.0, 947.5], [302.0, 2.0], [300.0, 961.5], [299.0, 954.0], [298.0, 959.0], [316.0, 94.75], [304.0, 956.5], [307.0, 9.0], [306.0, 1906.0], [305.0, 2.0], [308.0, 183.0], [309.0, 3.0], [311.0, 184.0], [310.0, 1892.0], [312.0, 93.75], [313.0, 471.75], [314.0, 1679.0], [317.0, 422.0], [318.0, 1678.0], [333.0, 941.0], [320.0, 95.0], [323.0, 565.0], [322.0, 848.0], [321.0, 835.0], [324.0, 935.0], [325.0, 2.0], [327.0, 832.5], [326.0, 835.5], [330.0, 1038.5], [329.0, 947.5], [328.0, 2.0], [331.0, 1.0], [335.0, 78.4], [334.0, 942.5], [332.0, 949.0], [345.0, 98.5], [347.0, 191.0], [349.0, 97.25], [350.0, 3.0], [348.0, 189.0], [351.0, 190.0], [337.0, 1696.0], [336.0, 948.0], [366.0, 3.5], [353.0, 65.33333333333334], [352.0, 423.75], [359.0, 1113.3333333333335], [355.0, 885.5], [354.0, 843.0], [357.0, 706.4], [356.0, 1.0], [358.0, 65.33333333333334], [367.0, 339.0], [361.0, 833.5], [360.0, 831.5], [363.0, 1122.6666666666665], [362.0, 1.0], [365.0, 1696.0], [364.0, 2.0], [369.0, 194.0], [368.0, 193.0], [370.0, 192.0], [371.0, 2.0], [374.0, 560.0], [373.0, 559.0], [372.0, 836.0], [376.0, 7.5], [377.0, 3.0], [375.0, 843.0], [380.0, 1662.0], [379.0, 2.0], [378.0, 1670.0], [399.0, 561.3333333333334], [384.0, 7.5], [393.0, 384.8], [390.0, 9.5], [388.0, 1688.0], [391.0, 848.0], [392.0, 631.0], [394.0, 104.5], [396.0, 106.0], [387.0, 843.0], [386.0, 2.0], [385.0, 1660.0], [395.0, 948.5], [398.0, 72.33333333333334], [415.0, 1682.0], [400.0, 5.0], [401.0, 2.0], [403.0, 840.5], [402.0, 837.5], [406.0, 1652.0], [405.0, 828.5], [404.0, 838.0], [412.0, 4.5], [411.0, 957.5], [414.0, 634.0], [413.0, 846.5], [410.0, 3.0], [409.0, 1702.0], [408.0, 2.0], [428.0, 827.0], [418.0, 567.0], [417.0, 631.3333333333333], [416.0, 2.0], [423.0, 844.5], [422.0, 839.5], [419.0, 842.5], [420.0, 74.33333333333334], [421.0, 557.0], [429.0, 947.5], [425.0, 831.0], [424.0, 842.0], [427.0, 2.0], [426.0, 1671.0], [432.0, 225.0], [437.0, 560.3333333333333], [436.0, 2.0], [439.0, 1672.0], [438.0, 837.5], [443.0, 5.0], [444.0, 116.0], [447.0, 840.5], [446.0, 832.5], [445.0, 843.0], [442.0, 1680.0], [441.0, 2.0], [460.0, 1700.0], [452.0, 4.0], [461.0, 236.0], [459.0, 2.0], [458.0, 1702.0], [457.0, 2.0], [456.0, 1694.0], [455.0, 2.0], [450.0, 1687.0], [449.0, 3.0], [448.0, 1656.0], [479.0, 242.0], [467.0, 649.0], [466.0, 857.0], [465.0, 859.5], [464.0, 2.0], [470.0, 122.5], [471.0, 2.5], [475.0, 1702.0], [474.0, 2.0], [473.0, 1705.0], [472.0, 847.5], [469.0, 1703.0], [468.0, 853.5], [493.0, 1688.0], [480.0, 2.5], [487.0, 1695.0], [484.0, 642.6666666666666], [485.0, 2.0], [486.0, 484.5], [495.0, 1.0], [492.0, 2.0], [483.0, 2.0], [481.0, 1706.0], [491.0, 1684.0], [490.0, 842.0], [489.0, 844.5], [488.0, 2.0], [508.0, 1.0], [510.0, 849.0], [498.0, 3.0], [497.0, 1720.0], [496.0, 842.5], [499.0, 1713.0], [511.0, 650.6666666666667], [509.0, 851.5], [507.0, 1706.0], [506.0, 2.0], [502.0, 1695.0], [501.0, 2.0], [540.0, 969.5], [513.0, 845.0], [512.0, 648.6666666666667], [515.0, 2.0], [517.0, 1668.0], [516.0, 837.0], [523.0, 961.5], [522.0, 87.33333333333334], [524.0, 3.0], [536.0, 640.6666666666667], [539.0, 2.5], [537.0, 1640.0], [543.0, 845.0], [529.0, 837.0], [528.0, 2.0], [531.0, 2.0], [530.0, 1666.0], [533.0, 1.0], [532.0, 1661.0], [535.0, 822.5], [534.0, 829.0], [542.0, 847.5], [541.0, 3.0], [547.0, 278.0], [548.0, 3.0], [551.0, 1679.0], [550.0, 2.0], [552.0, 3.0], [554.0, 2.0], [555.0, 969.5], [557.0, 650.0], [556.0, 1.0], [558.0, 448.0], [559.0, 2.0], [544.0, 843.5], [546.0, 1689.0], [545.0, 841.0], [565.0, 485.75], [564.0, 2.0], [563.0, 1651.0], [562.0, 829.0], [561.0, 2.0], [567.0, 829.5], [566.0, 821.0], [575.0, 1624.0], [574.0, 816.5], [573.0, 2.0], [572.0, 1636.0], [570.0, 741.0], [569.0, 3.0], [571.0, 3.0], [568.0, 820.5], [600.0, 1645.0], [605.0, 818.5], [584.0, 539.6666666666667], [586.0, 1639.0], [585.0, 806.5], [588.0, 149.5], [590.0, 101.0], [589.0, 1664.0], [591.0, 1653.0], [576.0, 2.0], [578.0, 2.0], [577.0, 1623.0], [580.0, 815.0], [579.0, 811.0], [583.0, 1.0], [581.0, 1628.0], [602.0, 2.0], [597.0, 827.0], [596.0, 646.6666666666667], [598.0, 2.0], [599.0, 2.0], [606.0, 307.0], [595.0, 831.5], [594.0, 2.0], [604.0, 819.0], [603.0, 815.5], [632.0, 161.0], [611.0, 644.6666666666667], [610.0, 810.0], [609.0, 2.0], [622.0, 1605.0], [621.0, 804.5], [620.0, 808.5], [619.0, 1.0], [618.0, 1617.0], [617.0, 811.0], [616.0, 814.0], [612.0, 481.75000000000006], [615.0, 79.5], [613.0, 1605.0], [626.0, 160.0], [628.0, 3.0], [627.0, 1587.0], [629.0, 4.0], [631.0, 3.0], [630.0, 3.0], [639.0, 162.5], [638.0, 324.0], [636.0, 1582.0], [633.0, 2.0], [637.0, 1608.0], [666.0, 956.0], [642.0, 809.0], [648.0, 2.0], [649.0, 1606.0], [652.0, 799.5], [651.0, 2.0], [647.0, 970.5], [643.0, 1629.5], [644.0, 1627.0], [646.0, 2.0], [665.0, 2.0], [653.0, 794.5], [655.0, 641.0], [654.0, 2.0], [657.0, 638.0], [658.0, 536.6666666666667], [660.0, 797.0], [659.0, 799.0], [662.0, 3.0], [661.0, 1591.0], [668.0, 2.5], [669.0, 1588.0], [656.0, 796.0], [699.0, 176.0], [675.0, 338.0], [679.0, 518.0], [678.0, 781.0], [677.0, 2.0], [696.0, 2.0], [698.0, 1576.0], [697.0, 794.0], [682.0, 633.0], [681.0, 790.0], [680.0, 779.5], [684.0, 2.0], [683.0, 1575.0], [687.0, 2.0], [673.0, 1579.0], [672.0, 1.0], [685.0, 1599.0], [689.0, 651.0], [693.0, 796.5], [692.0, 2.0], [691.0, 1579.0], [690.0, 2.0], [702.0, 385.0], [703.0, 786.0], [688.0, 793.0], [701.0, 481.75], [700.0, 642.3333333333333], [729.0, 5.0], [709.0, 120.0], [712.0, 2.0], [710.0, 957.0], [715.0, 180.5], [719.0, 2.0], [708.0, 1551.0], [707.0, 781.0], [706.0, 1.0], [704.0, 1560.0], [716.0, 1540.0], [735.0, 1.0], [734.0, 1151.5], [733.0, 2.0], [731.0, 2.0], [761.0, 1532.0], [765.0, 757.0], [741.0, 186.0], [737.0, 186.5], [736.0, 1020.3333333333333], [738.0, 1.0], [740.0, 784.5], [739.0, 1136.0], [751.0, 1.0], [750.0, 1529.0], [742.0, 781.5], [760.0, 769.0], [743.0, 2.0], [762.0, 2.0], [764.0, 758.0], [763.0, 759.0], [745.0, 2.5], [744.0, 1038.6666666666665], [746.0, 1034.0], [748.0, 771.5], [747.0, 3.0], [749.0, 637.3333333333333], [754.0, 4.0], [752.0, 1526.0], [755.0, 5.0], [757.0, 2.0], [756.0, 1524.0], [759.0, 770.5], [758.0, 759.5], [767.0, 1503.0], [766.0, 755.5], [792.0, 2.0], [797.0, 1504.0], [784.0, 771.0], [783.0, 463.4], [772.0, 1497.0], [771.0, 2.0], [774.0, 1520.0], [773.0, 2.0], [782.0, 2.0], [781.0, 1539.0], [780.0, 3.0], [779.0, 1547.0], [778.0, 2.0], [777.0, 1506.0], [776.0, 2.0], [793.0, 763.0], [785.0, 2.0], [786.0, 2.5], [791.0, 3.0], [790.0, 1507.0], [789.0, 757.0], [788.0, 2.0], [787.0, 1515.0], [799.0, 267.0], [796.0, 2.0], [794.0, 1502.0], [802.0, 2.0], [801.0, 402.0], [806.0, 402.0], [805.0, 1498.0], [804.0, 2.0], [803.0, 1506.0], [824.0, 2.0], [807.0, 3.0], [825.0, 502.33333333333337], [828.0, 208.0], [826.0, 1500.0], [829.0, 747.5], [831.0, 417.0], [818.0, 743.5], [817.0, 2.0], [830.0, 1490.0], [809.0, 3.0], [808.0, 1502.0], [811.0, 739.5], [810.0, 746.0], [812.0, 497.0], [814.0, 205.0], [813.0, 1502.0], [815.0, 1497.0], [819.0, 943.5], [821.0, 138.66666666666669], [822.0, 761.5], [858.0, 629.3333333333333], [834.0, 3.0], [833.0, 3.0], [847.0, 2.0], [838.0, 957.0], [837.0, 2.0], [836.0, 1500.0], [835.0, 752.5], [857.0, 2.0], [856.0, 1456.0], [843.0, 476.99999999999994], [842.0, 742.0], [841.0, 2.0], [844.0, 1475.0], [846.0, 2.0], [848.0, 639.0], [855.0, 2.5], [854.0, 1468.0], [853.0, 977.3333333333334], [852.0, 2.0], [851.0, 727.0], [850.0, 3.0], [849.0, 1462.0], [859.0, 941.0], [860.0, 2.0], [863.0, 2.0], [861.0, 1457.0], [890.0, 2.0], [867.0, 3.0], [869.0, 2.0], [871.0, 2.0], [870.0, 1476.0], [889.0, 1439.0], [888.0, 3.0], [866.0, 934.0], [873.0, 493.33333333333337], [872.0, 736.0], [874.0, 735.0], [876.0, 1471.0], [875.0, 737.5], [878.0, 221.0], [879.0, 730.5], [865.0, 2.0], [864.0, 1463.0], [881.0, 474.49999999999994], [886.0, 633.3333333333333], [885.0, 1.0], [882.0, 1448.0], [895.0, 453.0], [880.0, 728.0], [893.0, 1457.0], [892.0, 730.0], [891.0, 1.0], [912.0, 446.0], [898.0, 226.0], [897.0, 450.0], [911.0, 2.0], [900.0, 2.0], [901.0, 1410.0], [924.0, 463.0], [926.0, 463.0], [905.0, 228.0], [909.0, 3.0], [915.0, 458.0], [913.0, 882.0], [917.0, 2.0], [918.0, 1.0], [919.0, 2.0], [916.0, 460.0], [928.0, 233.5], [929.0, 2.0], [931.0, 3.0], [947.0, 473.0], [949.0, 476.0], [950.0, 2.0], [953.0, 2.0], [960.0, 478.0], [962.0, 2.0], [967.0, 482.0], [970.0, 243.0], [971.0, 2.0], [987.0, 490.0], [1016.0, 236.33333333333331], [995.0, 3.0], [994.0, 493.0], [996.0, 249.5], [1000.0, 2.0], [1011.0, 502.0], [1015.0, 168.66666666666669], [1014.0, 706.0], [1013.0, 2.0], [1020.0, 405.66666666666663], [1019.0, 3.0], [1018.0, 708.0], [1017.0, 355.0], [1021.0, 355.0], [1023.0, 3.0], [1022.0, 709.0], [1030.0, 715.0], [1034.0, 359.0], [1026.0, 609.5], [1024.0, 354.5], [1050.0, 737.0], [1052.0, 2.0], [1054.0, 370.5], [1046.0, 3.0], [1044.0, 3.0], [1042.0, 720.0], [1028.0, 2.0], [1032.0, 2.5], [1036.0, 2.0], [1038.0, 360.0], [1084.0, 729.0], [1086.0, 245.33333333333331], [1056.0, 739.0], [1058.0, 372.5], [1072.0, 530.0], [1062.0, 527.0], [1060.0, 371.5], [1064.0, 3.5], [1066.0, 376.5], [1040.0, 518.0], [1090.0, 249.33333333333331], [1102.0, 274.5], [1088.0, 368.5], [1118.0, 383.0], [1098.0, 12.0], [1096.0, 765.0], [1094.0, 380.5], [1092.0, 2.0], [1116.0, 655.0], [1112.0, 1.0], [1108.0, 380.0], [1104.0, 382.5], [1120.0, 276.5], [1142.0, 387.5], [1140.0, 2.0], [1150.0, 388.0], [1136.0, 3.0], [1138.0, 773.0], [1126.0, 385.0], [1128.0, 2.0], [1130.0, 2.0], [1132.0, 775.0], [1134.0, 775.0], [1164.0, 1.0], [1154.0, 260.33333333333337], [1152.0, 776.0], [1156.0, 778.0], [1182.0, 394.5], [1178.0, 342.5], [1176.0, 786.0], [1158.0, 390.5], [1162.0, 2.0], [1166.0, 390.5], [1200.0, 401.0], [1202.0, 2.0], [1170.0, 781.0], [1172.0, 392.5], [1206.0, 590.0], [1208.0, 801.0], [1210.0, 804.0], [1212.0, 805.0], [1214.0, 403.0], [1186.0, 3.0], [1188.0, 3.0], [1190.0, 397.5], [1196.0, 2.0], [1198.0, 798.0], [1194.0, 461.0], [1264.0, 3.0], [1270.0, 209.66666666666669], [1218.0, 469.0], [1232.0, 598.0], [1234.0, 822.0], [1222.0, 408.0], [1220.0, 2.0], [1224.0, 2.0], [1228.0, 411.5], [1230.0, 411.0], [1272.0, 2.0], [1248.0, 3.0], [1278.0, 629.0], [1268.0, 834.0], [1238.0, 6.0], [1240.0, 2.0], [1242.0, 414.5], [1246.0, 828.0], [1216.0, 404.75], [1236.0, 303.5], [1254.0, 415.0], [1252.0, 2.0], [1250.0, 415.5], [1256.0, 831.0], [1258.0, 417.5], [1260.0, 280.0], [1262.0, 4.0], [1330.0, 844.0], [1328.0, 654.0], [1280.0, 2.0], [1286.0, 334.4], [1288.0, 558.3333333333333], [1290.0, 1.0], [1292.0, 424.0], [1294.0, 566.6666666666667], [1332.0, 3.0], [1334.0, 211.0], [1336.0, 280.33333333333337], [1342.0, 499.0], [1312.0, 858.0], [1316.0, 855.0], [1296.0, 2.0], [1304.0, 752.0], [1302.0, 431.5], [1300.0, 431.0], [1310.0, 430.5], [1308.0, 2.0], [1306.0, 431.0], [1322.0, 284.66666666666663], [1320.0, 851.0], [1318.0, 1.0], [1324.0, 849.0], [1326.0, 848.0], [1396.0, 377.75], [1392.0, 352.5], [1346.0, 665.0], [1344.0, 832.0], [1348.0, 2.0], [1350.0, 414.5], [1356.0, 412.0], [1354.0, 824.0], [1400.0, 359.5], [1402.0, 757.0], [1404.0, 181.25], [1406.0, 448.4], [1394.0, 354.0], [1360.0, 336.5], [1364.0, 817.0], [1366.0, 815.0], [1372.0, 2.0], [1368.0, 407.5], [1374.0, 811.0], [1376.0, 434.0], [1378.0, 405.5], [1380.0, 2.0], [1382.0, 544.75], [1386.0, 374.5], [1390.0, 1.5], [1388.0, 499.66666666666663], [1432.0, 2.0], [1408.0, 395.5], [1430.0, 770.0], [1428.0, 385.5], [1426.0, 260.6666666666667], [1424.0, 754.0], [1410.0, 395.0], [1412.0, 394.5], [1414.0, 2.0], [1416.0, 249.66666666666669], [1418.0, 510.33333333333337], [1420.0, 2.0], [1422.0, 385.0], [1031.0, 510.0], [1025.0, 2.0], [1051.0, 3.0], [1053.0, 368.5], [1055.0, 371.5], [1047.0, 363.0], [1045.0, 720.0], [1049.0, 260.0], [1029.0, 408.25], [1033.0, 358.0], [1035.0, 517.0], [1037.0, 359.5], [1039.0, 720.0], [1073.0, 3.0], [1081.0, 536.0], [1085.0, 359.0], [1087.0, 367.0], [1057.0, 2.0], [1059.0, 423.33333333333337], [1061.0, 742.0], [1069.0, 1.0], [1063.0, 264.0], [1041.0, 2.0], [1089.0, 427.0], [1151.0, 389.0], [1119.0, 766.0], [1099.0, 3.0], [1095.0, 2.0], [1093.0, 502.0], [1091.0, 375.0], [1117.0, 2.5], [1115.0, 2.0], [1113.0, 762.0], [1109.0, 761.0], [1107.0, 379.0], [1105.0, 379.5], [1121.0, 384.5], [1143.0, 669.5], [1141.0, 387.0], [1149.0, 3.0], [1137.0, 446.0], [1103.0, 755.0], [1139.0, 2.0], [1123.0, 3.0], [1125.0, 1.0], [1127.0, 770.0], [1129.0, 772.0], [1131.0, 388.0], [1133.0, 2.0], [1201.0, 799.0], [1209.0, 2.0], [1165.0, 261.33333333333337], [1157.0, 285.5], [1153.0, 3.0], [1155.0, 390.0], [1183.0, 790.0], [1181.0, 2.0], [1179.0, 788.0], [1177.0, 193.33333333333331], [1175.0, 2.0], [1159.0, 673.5], [1163.0, 779.0], [1167.0, 391.0], [1203.0, 799.0], [1169.0, 287.5], [1171.0, 2.0], [1173.0, 643.6666666666666], [1205.0, 590.0], [1207.0, 2.0], [1211.0, 3.0], [1187.0, 788.0], [1189.0, 397.0], [1193.0, 2.0], [1191.0, 794.0], [1213.0, 2.0], [1195.0, 690.0], [1197.0, 399.5], [1199.0, 2.0], [1265.0, 761.3333333333334], [1233.0, 2.0], [1223.0, 705.0], [1221.0, 406.5], [1219.0, 811.0], [1225.0, 818.0], [1227.0, 2.0], [1229.0, 411.0], [1231.0, 822.0], [1271.0, 837.0], [1277.0, 628.0], [1279.0, 315.5], [1269.0, 765.3333333333334], [1239.0, 6.333333333333333], [1241.0, 415.0], [1243.0, 828.0], [1217.0, 406.5], [1245.0, 4.0], [1237.0, 211.5], [1249.0, 480.66666666666663], [1255.0, 280.0], [1253.0, 415.0], [1251.0, 828.0], [1257.0, 3.0], [1259.0, 3.0], [1263.0, 3.0], [1261.0, 4.0], [1291.0, 562.3333333333333], [1305.0, 1.5], [1287.0, 1.0], [1289.0, 421.0], [1293.0, 1.0], [1295.0, 427.0], [1333.0, 562.0], [1329.0, 2.0], [1335.0, 280.33333333333337], [1337.0, 748.0], [1341.0, 2.0], [1343.0, 417.5], [1315.0, 2.0], [1285.0, 634.0], [1297.0, 432.0], [1299.0, 321.0], [1303.0, 432.0], [1301.0, 431.0], [1309.0, 430.5], [1307.0, 859.0], [1311.0, 2.0], [1317.0, 648.0], [1321.0, 2.0], [1319.0, 427.5], [1323.0, 425.5], [1325.0, 2.0], [1355.0, 1.0], [1347.0, 333.75], [1349.0, 414.0], [1351.0, 413.5], [1357.0, 412.0], [1353.0, 1.0], [1393.0, 268.0], [1395.0, 316.85714285714283], [1401.0, 398.0], [1407.0, 380.5], [1405.0, 506.0], [1403.0, 241.0], [1361.0, 818.0], [1363.0, 2.0], [1365.0, 1.0], [1367.0, 170.5], [1373.0, 495.33333333333337], [1369.0, 813.0], [1375.0, 2.0], [1377.0, 299.0], [1379.0, 808.0], [1381.0, 404.5], [1383.0, 3.0], [1385.0, 344.0], [1387.0, 375.5], [1389.0, 558.0], [1391.0, 799.0], [1411.0, 1.0], [1415.0, 567.25], [1429.0, 256.1666666666667], [1427.0, 509.33333333333337], [1425.0, 253.0], [1409.0, 245.66666666666669], [1413.0, 786.0], [1417.0, 372.0], [1419.0, 383.25], [1421.0, 376.0], [1423.0, 781.0]], "isOverall": false, "label": "HTTP Request character", "isController": false}, {"data": [[687.0119999999981, 520.5895000000006]], "isOverall": false, "label": "HTTP Request character-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1432.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7400.0, "minX": 1.7592609E12, "maxY": 8966.666666666666, "series": [{"data": [[1.7592609E12, 8966.666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7592609E12, 7400.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7592609E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 520.5895000000006, "minX": 1.7592609E12, "maxY": 520.5895000000006, "series": [{"data": [[1.7592609E12, 520.5895000000006]], "isOverall": false, "label": "HTTP Request character", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7592609E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 520.5875000000001, "minX": 1.7592609E12, "maxY": 520.5875000000001, "series": [{"data": [[1.7592609E12, 520.5875000000001]], "isOverall": false, "label": "HTTP Request character", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7592609E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.27949999999999986, "minX": 1.7592609E12, "maxY": 0.27949999999999986, "series": [{"data": [[1.7592609E12, 0.27949999999999986]], "isOverall": false, "label": "HTTP Request character", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7592609E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7592609E12, "maxY": 2297.0, "series": [{"data": [[1.7592609E12, 2297.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7592609E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7592609E12, 1681.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7592609E12, 2102.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7592609E12, 13.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7592609E12, 1906.9499999999998]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7592609E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 12.5, "minX": 376.0, "maxY": 829.0, "series": [{"data": [[594.0, 12.5], [638.0, 162.0], [376.0, 13.0], [392.0, 829.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 638.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 12.5, "minX": 376.0, "maxY": 829.0, "series": [{"data": [[594.0, 12.5], [638.0, 162.0], [376.0, 13.0], [392.0, 829.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 638.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.7592609E12, "maxY": 33.333333333333336, "series": [{"data": [[1.7592609E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7592609E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.7592609E12, "maxY": 33.333333333333336, "series": [{"data": [[1.7592609E12, 33.333333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7592609E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.7592609E12, "maxY": 33.333333333333336, "series": [{"data": [[1.7592609E12, 33.333333333333336]], "isOverall": false, "label": "HTTP Request character-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7592609E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.7592609E12, "maxY": 33.333333333333336, "series": [{"data": [[1.7592609E12, 33.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7592609E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

