/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 4367.0, "series": [{"data": [[0.0, 2.0], [0.1, 2.0], [0.2, 2.0], [0.3, 2.0], [0.4, 2.0], [0.5, 2.0], [0.6, 2.0], [0.7, 2.0], [0.8, 2.0], [0.9, 2.0], [1.0, 2.0], [1.1, 2.0], [1.2, 2.0], [1.3, 2.0], [1.4, 2.0], [1.5, 2.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 3.0], [2.2, 3.0], [2.3, 3.0], [2.4, 3.0], [2.5, 3.0], [2.6, 3.0], [2.7, 3.0], [2.8, 3.0], [2.9, 3.0], [3.0, 3.0], [3.1, 3.0], [3.2, 3.0], [3.3, 3.0], [3.4, 3.0], [3.5, 3.0], [3.6, 3.0], [3.7, 3.0], [3.8, 3.0], [3.9, 3.0], [4.0, 3.0], [4.1, 3.0], [4.2, 3.0], [4.3, 3.0], [4.4, 3.0], [4.5, 3.0], [4.6, 3.0], [4.7, 3.0], [4.8, 3.0], [4.9, 3.0], [5.0, 3.0], [5.1, 3.0], [5.2, 3.0], [5.3, 3.0], [5.4, 3.0], [5.5, 3.0], [5.6, 3.0], [5.7, 3.0], [5.8, 3.0], [5.9, 3.0], [6.0, 3.0], [6.1, 3.0], [6.2, 3.0], [6.3, 3.0], [6.4, 3.0], [6.5, 3.0], [6.6, 3.0], [6.7, 3.0], [6.8, 3.0], [6.9, 3.0], [7.0, 3.0], [7.1, 3.0], [7.2, 3.0], [7.3, 3.0], [7.4, 3.0], [7.5, 3.0], [7.6, 3.0], [7.7, 3.0], [7.8, 3.0], [7.9, 3.0], [8.0, 3.0], [8.1, 3.0], [8.2, 3.0], [8.3, 3.0], [8.4, 3.0], [8.5, 3.0], [8.6, 3.0], [8.7, 3.0], [8.8, 3.0], [8.9, 3.0], [9.0, 3.0], [9.1, 3.0], [9.2, 3.0], [9.3, 3.0], [9.4, 3.0], [9.5, 3.0], [9.6, 3.0], [9.7, 3.0], [9.8, 3.0], [9.9, 3.0], [10.0, 3.0], [10.1, 3.0], [10.2, 3.0], [10.3, 3.0], [10.4, 3.0], [10.5, 3.0], [10.6, 3.0], [10.7, 3.0], [10.8, 3.0], [10.9, 3.0], [11.0, 3.0], [11.1, 3.0], [11.2, 3.0], [11.3, 3.0], [11.4, 3.0], [11.5, 3.0], [11.6, 3.0], [11.7, 3.0], [11.8, 3.0], [11.9, 3.0], [12.0, 3.0], [12.1, 3.0], [12.2, 3.0], [12.3, 3.0], [12.4, 3.0], [12.5, 3.0], [12.6, 3.0], [12.7, 3.0], [12.8, 3.0], [12.9, 3.0], [13.0, 3.0], [13.1, 3.0], [13.2, 3.0], [13.3, 3.0], [13.4, 3.0], [13.5, 3.0], [13.6, 3.0], [13.7, 3.0], [13.8, 3.0], [13.9, 3.0], [14.0, 3.0], [14.1, 3.0], [14.2, 3.0], [14.3, 3.0], [14.4, 3.0], [14.5, 3.0], [14.6, 3.0], [14.7, 3.0], [14.8, 3.0], [14.9, 3.0], [15.0, 3.0], [15.1, 3.0], [15.2, 3.0], [15.3, 3.0], [15.4, 3.0], [15.5, 3.0], [15.6, 3.0], [15.7, 3.0], [15.8, 3.0], [15.9, 3.0], [16.0, 3.0], [16.1, 3.0], [16.2, 3.0], [16.3, 3.0], [16.4, 3.0], [16.5, 3.0], [16.6, 3.0], [16.7, 3.0], [16.8, 3.0], [16.9, 3.0], [17.0, 4.0], [17.1, 4.0], [17.2, 4.0], [17.3, 4.0], [17.4, 4.0], [17.5, 4.0], [17.6, 4.0], [17.7, 4.0], [17.8, 4.0], [17.9, 4.0], [18.0, 4.0], [18.1, 4.0], [18.2, 4.0], [18.3, 4.0], [18.4, 4.0], [18.5, 4.0], [18.6, 4.0], [18.7, 4.0], [18.8, 4.0], [18.9, 4.0], [19.0, 4.0], [19.1, 4.0], [19.2, 4.0], [19.3, 4.0], [19.4, 4.0], [19.5, 4.0], [19.6, 4.0], [19.7, 4.0], [19.8, 4.0], [19.9, 4.0], [20.0, 4.0], [20.1, 4.0], [20.2, 4.0], [20.3, 4.0], [20.4, 4.0], [20.5, 4.0], [20.6, 4.0], [20.7, 4.0], [20.8, 4.0], [20.9, 4.0], [21.0, 4.0], [21.1, 4.0], [21.2, 4.0], [21.3, 4.0], [21.4, 4.0], [21.5, 4.0], [21.6, 4.0], [21.7, 4.0], [21.8, 4.0], [21.9, 4.0], [22.0, 4.0], [22.1, 4.0], [22.2, 4.0], [22.3, 4.0], [22.4, 4.0], [22.5, 4.0], [22.6, 4.0], [22.7, 4.0], [22.8, 4.0], [22.9, 4.0], [23.0, 4.0], [23.1, 4.0], [23.2, 4.0], [23.3, 4.0], [23.4, 4.0], [23.5, 4.0], [23.6, 4.0], [23.7, 4.0], [23.8, 4.0], [23.9, 4.0], [24.0, 4.0], [24.1, 4.0], [24.2, 4.0], [24.3, 4.0], [24.4, 4.0], [24.5, 4.0], [24.6, 4.0], [24.7, 4.0], [24.8, 4.0], [24.9, 4.0], [25.0, 4.0], [25.1, 4.0], [25.2, 4.0], [25.3, 4.0], [25.4, 4.0], [25.5, 4.0], [25.6, 4.0], [25.7, 4.0], [25.8, 4.0], [25.9, 4.0], [26.0, 4.0], [26.1, 4.0], [26.2, 4.0], [26.3, 4.0], [26.4, 4.0], [26.5, 4.0], [26.6, 4.0], [26.7, 4.0], [26.8, 4.0], [26.9, 4.0], [27.0, 4.0], [27.1, 4.0], [27.2, 4.0], [27.3, 4.0], [27.4, 4.0], [27.5, 4.0], [27.6, 4.0], [27.7, 4.0], [27.8, 4.0], [27.9, 4.0], [28.0, 4.0], [28.1, 4.0], [28.2, 4.0], [28.3, 4.0], [28.4, 4.0], [28.5, 4.0], [28.6, 4.0], [28.7, 4.0], [28.8, 4.0], [28.9, 4.0], [29.0, 4.0], [29.1, 4.0], [29.2, 4.0], [29.3, 4.0], [29.4, 4.0], [29.5, 4.0], [29.6, 4.0], [29.7, 4.0], [29.8, 4.0], [29.9, 4.0], [30.0, 4.0], [30.1, 4.0], [30.2, 4.0], [30.3, 4.0], [30.4, 5.0], [30.5, 5.0], [30.6, 5.0], [30.7, 5.0], [30.8, 5.0], [30.9, 5.0], [31.0, 5.0], [31.1, 5.0], [31.2, 5.0], [31.3, 5.0], [31.4, 5.0], [31.5, 5.0], [31.6, 5.0], [31.7, 5.0], [31.8, 5.0], [31.9, 5.0], [32.0, 5.0], [32.1, 5.0], [32.2, 5.0], [32.3, 5.0], [32.4, 5.0], [32.5, 5.0], [32.6, 5.0], [32.7, 5.0], [32.8, 5.0], [32.9, 5.0], [33.0, 5.0], [33.1, 5.0], [33.2, 5.0], [33.3, 5.0], [33.4, 5.0], [33.5, 5.0], [33.6, 5.0], [33.7, 5.0], [33.8, 5.0], [33.9, 5.0], [34.0, 5.0], [34.1, 5.0], [34.2, 5.0], [34.3, 5.0], [34.4, 5.0], [34.5, 5.0], [34.6, 5.0], [34.7, 5.0], [34.8, 5.0], [34.9, 5.0], [35.0, 5.0], [35.1, 5.0], [35.2, 5.0], [35.3, 5.0], [35.4, 5.0], [35.5, 5.0], [35.6, 5.0], [35.7, 5.0], [35.8, 5.0], [35.9, 5.0], [36.0, 5.0], [36.1, 5.0], [36.2, 5.0], [36.3, 5.0], [36.4, 5.0], [36.5, 5.0], [36.6, 5.0], [36.7, 5.0], [36.8, 5.0], [36.9, 6.0], [37.0, 6.0], [37.1, 6.0], [37.2, 6.0], [37.3, 6.0], [37.4, 6.0], [37.5, 6.0], [37.6, 6.0], [37.7, 6.0], [37.8, 6.0], [37.9, 6.0], [38.0, 6.0], [38.1, 6.0], [38.2, 6.0], [38.3, 6.0], [38.4, 6.0], [38.5, 6.0], [38.6, 6.0], [38.7, 6.0], [38.8, 6.0], [38.9, 6.0], [39.0, 6.0], [39.1, 6.0], [39.2, 6.0], [39.3, 6.0], [39.4, 6.0], [39.5, 6.0], [39.6, 6.0], [39.7, 6.0], [39.8, 6.0], [39.9, 6.0], [40.0, 6.0], [40.1, 6.0], [40.2, 6.0], [40.3, 6.0], [40.4, 6.0], [40.5, 6.0], [40.6, 6.0], [40.7, 6.0], [40.8, 6.0], [40.9, 6.0], [41.0, 6.0], [41.1, 6.0], [41.2, 6.0], [41.3, 7.0], [41.4, 7.0], [41.5, 7.0], [41.6, 7.0], [41.7, 7.0], [41.8, 7.0], [41.9, 7.0], [42.0, 7.0], [42.1, 7.0], [42.2, 7.0], [42.3, 7.0], [42.4, 7.0], [42.5, 7.0], [42.6, 7.0], [42.7, 7.0], [42.8, 7.0], [42.9, 7.0], [43.0, 7.0], [43.1, 7.0], [43.2, 7.0], [43.3, 7.0], [43.4, 7.0], [43.5, 7.0], [43.6, 8.0], [43.7, 8.0], [43.8, 8.0], [43.9, 8.0], [44.0, 8.0], [44.1, 8.0], [44.2, 8.0], [44.3, 8.0], [44.4, 8.0], [44.5, 8.0], [44.6, 8.0], [44.7, 8.0], [44.8, 8.0], [44.9, 8.0], [45.0, 9.0], [45.1, 9.0], [45.2, 9.0], [45.3, 9.0], [45.4, 9.0], [45.5, 9.0], [45.6, 9.0], [45.7, 9.0], [45.8, 9.0], [45.9, 10.0], [46.0, 10.0], [46.1, 10.0], [46.2, 10.0], [46.3, 10.0], [46.4, 10.0], [46.5, 10.0], [46.6, 10.0], [46.7, 10.0], [46.8, 11.0], [46.9, 11.0], [47.0, 11.0], [47.1, 11.0], [47.2, 12.0], [47.3, 12.0], [47.4, 12.0], [47.5, 12.0], [47.6, 12.0], [47.7, 13.0], [47.8, 13.0], [47.9, 13.0], [48.0, 14.0], [48.1, 14.0], [48.2, 14.0], [48.3, 14.0], [48.4, 15.0], [48.5, 15.0], [48.6, 15.0], [48.7, 16.0], [48.8, 16.0], [48.9, 16.0], [49.0, 16.0], [49.1, 17.0], [49.2, 17.0], [49.3, 17.0], [49.4, 18.0], [49.5, 18.0], [49.6, 21.0], [49.7, 22.0], [49.8, 22.0], [49.9, 24.0], [50.0, 28.0], [50.1, 31.0], [50.2, 34.0], [50.3, 67.0], [50.4, 95.0], [50.5, 102.0], [50.6, 113.0], [50.7, 126.0], [50.8, 134.0], [50.9, 151.0], [51.0, 174.0], [51.1, 184.0], [51.2, 195.0], [51.3, 213.0], [51.4, 230.0], [51.5, 252.0], [51.6, 271.0], [51.7, 278.0], [51.8, 283.0], [51.9, 304.0], [52.0, 307.0], [52.1, 317.0], [52.2, 324.0], [52.3, 330.0], [52.4, 335.0], [52.5, 340.0], [52.6, 344.0], [52.7, 350.0], [52.8, 356.0], [52.9, 367.0], [53.0, 386.0], [53.1, 388.0], [53.2, 392.0], [53.3, 401.0], [53.4, 409.0], [53.5, 415.0], [53.6, 420.0], [53.7, 424.0], [53.8, 430.0], [53.9, 437.0], [54.0, 444.0], [54.1, 450.0], [54.2, 456.0], [54.3, 462.0], [54.4, 467.0], [54.5, 472.0], [54.6, 479.0], [54.7, 483.0], [54.8, 488.0], [54.9, 494.0], [55.0, 501.0], [55.1, 506.0], [55.2, 511.0], [55.3, 517.0], [55.4, 523.0], [55.5, 530.0], [55.6, 536.0], [55.7, 537.0], [55.8, 540.0], [55.9, 548.0], [56.0, 552.0], [56.1, 559.0], [56.2, 566.0], [56.3, 570.0], [56.4, 575.0], [56.5, 581.0], [56.6, 585.0], [56.7, 594.0], [56.8, 602.0], [56.9, 613.0], [57.0, 616.0], [57.1, 625.0], [57.2, 630.0], [57.3, 638.0], [57.4, 645.0], [57.5, 655.0], [57.6, 668.0], [57.7, 676.0], [57.8, 686.0], [57.9, 696.0], [58.0, 702.0], [58.1, 710.0], [58.2, 719.0], [58.3, 728.0], [58.4, 741.0], [58.5, 747.0], [58.6, 754.0], [58.7, 766.0], [58.8, 776.0], [58.9, 783.0], [59.0, 800.0], [59.1, 818.0], [59.2, 831.0], [59.3, 838.0], [59.4, 841.0], [59.5, 843.0], [59.6, 846.0], [59.7, 848.0], [59.8, 869.0], [59.9, 880.0], [60.0, 888.0], [60.1, 895.0], [60.2, 902.0], [60.3, 914.0], [60.4, 920.0], [60.5, 930.0], [60.6, 935.0], [60.7, 940.0], [60.8, 945.0], [60.9, 952.0], [61.0, 957.0], [61.1, 961.0], [61.2, 968.0], [61.3, 974.0], [61.4, 983.0], [61.5, 992.0], [61.6, 997.0], [61.7, 1001.0], [61.8, 1010.0], [61.9, 1017.0], [62.0, 1020.0], [62.1, 1027.0], [62.2, 1036.0], [62.3, 1039.0], [62.4, 1045.0], [62.5, 1052.0], [62.6, 1057.0], [62.7, 1065.0], [62.8, 1068.0], [62.9, 1071.0], [63.0, 1071.0], [63.1, 1074.0], [63.2, 1078.0], [63.3, 1084.0], [63.4, 1089.0], [63.5, 1091.0], [63.6, 1091.0], [63.7, 1096.0], [63.8, 1098.0], [63.9, 1099.0], [64.0, 1100.0], [64.1, 1103.0], [64.2, 1108.0], [64.3, 1110.0], [64.4, 1111.0], [64.5, 1111.0], [64.6, 1113.0], [64.7, 1113.0], [64.8, 1113.0], [64.9, 1114.0], [65.0, 1115.0], [65.1, 1115.0], [65.2, 1116.0], [65.3, 1117.0], [65.4, 1131.0], [65.5, 1137.0], [65.6, 1139.0], [65.7, 1142.0], [65.8, 1145.0], [65.9, 1151.0], [66.0, 1155.0], [66.1, 1158.0], [66.2, 1161.0], [66.3, 1163.0], [66.4, 1167.0], [66.5, 1173.0], [66.6, 1176.0], [66.7, 1186.0], [66.8, 1188.0], [66.9, 1190.0], [67.0, 1192.0], [67.1, 1195.0], [67.2, 1199.0], [67.3, 1200.0], [67.4, 1203.0], [67.5, 1206.0], [67.6, 1208.0], [67.7, 1209.0], [67.8, 1213.0], [67.9, 1221.0], [68.0, 1222.0], [68.1, 1227.0], [68.2, 1227.0], [68.3, 1230.0], [68.4, 1232.0], [68.5, 1236.0], [68.6, 1237.0], [68.7, 1242.0], [68.8, 1245.0], [68.9, 1249.0], [69.0, 1251.0], [69.1, 1256.0], [69.2, 1262.0], [69.3, 1266.0], [69.4, 1270.0], [69.5, 1276.0], [69.6, 1278.0], [69.7, 1282.0], [69.8, 1286.0], [69.9, 1288.0], [70.0, 1289.0], [70.1, 1292.0], [70.2, 1296.0], [70.3, 1298.0], [70.4, 1303.0], [70.5, 1305.0], [70.6, 1307.0], [70.7, 1313.0], [70.8, 1316.0], [70.9, 1321.0], [71.0, 1322.0], [71.1, 1325.0], [71.2, 1331.0], [71.3, 1332.0], [71.4, 1335.0], [71.5, 1339.0], [71.6, 1341.0], [71.7, 1347.0], [71.8, 1350.0], [71.9, 1355.0], [72.0, 1357.0], [72.1, 1386.0], [72.2, 1770.0], [72.3, 1771.0], [72.4, 1783.0], [72.5, 1805.0], [72.6, 1815.0], [72.7, 1826.0], [72.8, 1845.0], [72.9, 1849.0], [73.0, 1852.0], [73.1, 1853.0], [73.2, 1859.0], [73.3, 1864.0], [73.4, 1867.0], [73.5, 1872.0], [73.6, 1879.0], [73.7, 1887.0], [73.8, 1894.0], [73.9, 1899.0], [74.0, 1908.0], [74.1, 1914.0], [74.2, 1924.0], [74.3, 1926.0], [74.4, 1928.0], [74.5, 1935.0], [74.6, 1945.0], [74.7, 1949.0], [74.8, 1971.0], [74.9, 1978.0], [75.0, 1979.0], [75.1, 1986.0], [75.2, 1999.0], [75.3, 2005.0], [75.4, 2008.0], [75.5, 2009.0], [75.6, 2010.0], [75.7, 2013.0], [75.8, 2014.0], [75.9, 2016.0], [76.0, 2018.0], [76.1, 2020.0], [76.2, 2027.0], [76.3, 2027.0], [76.4, 2028.0], [76.5, 2031.0], [76.6, 2031.0], [76.7, 2033.0], [76.8, 2033.0], [76.9, 2034.0], [77.0, 2036.0], [77.1, 2037.0], [77.2, 2037.0], [77.3, 2038.0], [77.4, 2040.0], [77.5, 2042.0], [77.6, 2042.0], [77.7, 2043.0], [77.8, 2044.0], [77.9, 2045.0], [78.0, 2046.0], [78.1, 2047.0], [78.2, 2047.0], [78.3, 2048.0], [78.4, 2049.0], [78.5, 2050.0], [78.6, 2052.0], [78.7, 2053.0], [78.8, 2054.0], [78.9, 2057.0], [79.0, 2059.0], [79.1, 2060.0], [79.2, 2060.0], [79.3, 2065.0], [79.4, 2068.0], [79.5, 2073.0], [79.6, 2227.0], [79.7, 2231.0], [79.8, 2235.0], [79.9, 2238.0], [80.0, 2239.0], [80.1, 2241.0], [80.2, 2244.0], [80.3, 2244.0], [80.4, 2245.0], [80.5, 2246.0], [80.6, 2248.0], [80.7, 2249.0], [80.8, 2250.0], [80.9, 2252.0], [81.0, 2252.0], [81.1, 2253.0], [81.2, 2255.0], [81.3, 2256.0], [81.4, 2257.0], [81.5, 2257.0], [81.6, 2258.0], [81.7, 2259.0], [81.8, 2260.0], [81.9, 2262.0], [82.0, 2264.0], [82.1, 2265.0], [82.2, 2266.0], [82.3, 2267.0], [82.4, 2268.0], [82.5, 2269.0], [82.6, 2270.0], [82.7, 2274.0], [82.8, 2277.0], [82.9, 2278.0], [83.0, 2279.0], [83.1, 2388.0], [83.2, 2410.0], [83.3, 2419.0], [83.4, 2420.0], [83.5, 2424.0], [83.6, 2428.0], [83.7, 2430.0], [83.8, 2440.0], [83.9, 2451.0], [84.0, 2452.0], [84.1, 2454.0], [84.2, 2456.0], [84.3, 2458.0], [84.4, 2458.0], [84.5, 2459.0], [84.6, 2460.0], [84.7, 2462.0], [84.8, 2464.0], [84.9, 2465.0], [85.0, 2468.0], [85.1, 2471.0], [85.2, 2472.0], [85.3, 2472.0], [85.4, 2473.0], [85.5, 2473.0], [85.6, 2474.0], [85.7, 2477.0], [85.8, 2482.0], [85.9, 2487.0], [86.0, 2773.0], [86.1, 2775.0], [86.2, 2780.0], [86.3, 2781.0], [86.4, 2786.0], [86.5, 2787.0], [86.6, 2788.0], [86.7, 2792.0], [86.8, 2794.0], [86.9, 2795.0], [87.0, 2796.0], [87.1, 2797.0], [87.2, 2798.0], [87.3, 2799.0], [87.4, 2799.0], [87.5, 2800.0], [87.6, 2802.0], [87.7, 2803.0], [87.8, 2805.0], [87.9, 2806.0], [88.0, 2808.0], [88.1, 2809.0], [88.2, 2809.0], [88.3, 2811.0], [88.4, 2811.0], [88.5, 2813.0], [88.6, 2814.0], [88.7, 2816.0], [88.8, 2820.0], [88.9, 2821.0], [89.0, 2823.0], [89.1, 2824.0], [89.2, 2825.0], [89.3, 2827.0], [89.4, 2827.0], [89.5, 2829.0], [89.6, 2834.0], [89.7, 2836.0], [89.8, 2838.0], [89.9, 2839.0], [90.0, 2842.0], [90.1, 2849.0], [90.2, 2853.0], [90.3, 2981.0], [90.4, 2987.0], [90.5, 2988.0], [90.6, 2994.0], [90.7, 2996.0], [90.8, 2998.0], [90.9, 3000.0], [91.0, 3001.0], [91.1, 3004.0], [91.2, 3010.0], [91.3, 3011.0], [91.4, 3012.0], [91.5, 3013.0], [91.6, 3013.0], [91.7, 3014.0], [91.8, 3014.0], [91.9, 3015.0], [92.0, 3017.0], [92.1, 3020.0], [92.2, 3025.0], [92.3, 3026.0], [92.4, 3032.0], [92.5, 3035.0], [92.6, 3042.0], [92.7, 3182.0], [92.8, 3189.0], [92.9, 3191.0], [93.0, 3200.0], [93.1, 3211.0], [93.2, 3213.0], [93.3, 3215.0], [93.4, 3222.0], [93.5, 3222.0], [93.6, 3226.0], [93.7, 3233.0], [93.8, 3237.0], [93.9, 3240.0], [94.0, 3241.0], [94.1, 3243.0], [94.2, 3340.0], [94.3, 3344.0], [94.4, 3352.0], [94.5, 3361.0], [94.6, 3376.0], [94.7, 3406.0], [94.8, 3413.0], [94.9, 3416.0], [95.0, 3422.0], [95.1, 3429.0], [95.2, 3430.0], [95.3, 3435.0], [95.4, 3439.0], [95.5, 3446.0], [95.6, 3450.0], [95.7, 3453.0], [95.8, 3458.0], [95.9, 3463.0], [96.0, 3473.0], [96.1, 3481.0], [96.2, 3534.0], [96.3, 3539.0], [96.4, 3547.0], [96.5, 3550.0], [96.6, 3553.0], [96.7, 3554.0], [96.8, 3555.0], [96.9, 3557.0], [97.0, 3558.0], [97.1, 3564.0], [97.2, 3566.0], [97.3, 3569.0], [97.4, 3571.0], [97.5, 3572.0], [97.6, 3579.0], [97.7, 3580.0], [97.8, 3581.0], [97.9, 3584.0], [98.0, 3584.0], [98.1, 3589.0], [98.2, 3590.0], [98.3, 3595.0], [98.4, 3596.0], [98.5, 3597.0], [98.6, 3600.0], [98.7, 3602.0], [98.8, 3605.0], [98.9, 3609.0], [99.0, 3612.0], [99.1, 3617.0], [99.2, 3659.0], [99.3, 3681.0], [99.4, 3695.0], [99.5, 3868.0], [99.6, 3885.0], [99.7, 3893.0], [99.8, 3917.0], [99.9, 4358.0]], "isOverall": false, "label": "HTTP Request characters", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1010.0, "series": [{"data": [[0.0, 1010.0], [600.0, 24.0], [700.0, 20.0], [800.0, 24.0], [900.0, 30.0], [1000.0, 46.0], [1100.0, 65.0], [1200.0, 62.0], [1300.0, 36.0], [100.0, 15.0], [1700.0, 7.0], [1800.0, 29.0], [1900.0, 26.0], [2000.0, 86.0], [2200.0, 71.0], [2300.0, 1.0], [2400.0, 57.0], [2800.0, 56.0], [2700.0, 30.0], [2900.0, 11.0], [3000.0, 37.0], [3100.0, 6.0], [200.0, 12.0], [3200.0, 24.0], [3300.0, 9.0], [3400.0, 31.0], [3500.0, 48.0], [3600.0, 17.0], [3800.0, 6.0], [3900.0, 2.0], [4300.0, 3.0], [300.0, 29.0], [400.0, 34.0], [500.0, 36.0]], "isOverall": false, "label": "HTTP Request characters", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 343.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1 500ms"], [2, "Requests having \nresponse time > 1 500ms"], [3, "Requests in error"]], "maxY": 1100.0, "series": [{"data": [[0.0, 1100.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 343.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1 500ms", "isController": false}, {"data": [[2.0, 557.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1 500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 418.44099999999986, "minX": 1.75925706E12, "maxY": 418.44099999999986, "series": [{"data": [[1.75925706E12, 418.44099999999986]], "isOverall": false, "label": "Thread GroupMy Test1000", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75925706E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 4.0, "maxY": 4360.666666666667, "series": [{"data": [[4.0, 14.0], [5.0, 16.0], [7.0, 16.0], [8.0, 4360.666666666667], [9.0, 3.0], [10.0, 1797.5], [11.0, 1198.6666666666665], [13.0, 3580.0], [14.0, 3.0], [15.0, 3600.0], [17.0, 3.0], [18.0, 1203.3333333333335], [19.0, 3584.0], [20.0, 2.0], [21.0, 3579.0], [22.0, 3.0], [23.0, 3571.0], [24.0, 3.0], [25.0, 1784.5], [26.0, 1780.5], [27.0, 3556.0], [28.0, 4.0], [29.0, 1194.6666666666665], [30.0, 1776.0], [31.0, 1781.5], [32.0, 9.5], [33.0, 880.5], [34.0, 1975.0], [37.0, 3909.0], [36.0, 2.0], [39.0, 1949.0], [38.0, 4.0], [40.0, 6.5], [41.0, 3888.0], [43.0, 3.0], [42.0, 3885.0], [44.0, 3868.0], [46.0, 3.0], [48.0, 1307.6666666666665], [49.0, 3868.0], [53.0, 17.0], [52.0, 16.0], [55.0, 15.0], [57.0, 18.5], [56.0, 14.0], [59.0, 11.0], [61.0, 9.0], [60.0, 10.0], [63.0, 6.0], [62.0, 8.0], [66.0, 67.0], [67.0, 3473.0], [65.0, 1742.5], [64.0, 5.0], [68.0, 3475.0], [70.0, 3458.0], [71.0, 3460.5], [75.0, 1726.5], [73.0, 3453.6666666666665], [74.0, 2302.0], [77.0, 1155.6666666666665], [76.0, 1719.5], [82.0, 85.0], [81.0, 3695.0], [80.0, 1847.0], [86.0, 14.0], [89.0, 1838.5], [91.0, 3581.0], [90.0, 3.0], [88.0, 1785.0], [93.0, 1195.6666666666665], [94.0, 1222.3333333333335], [95.0, 3553.0], [92.0, 3.0], [97.0, 55.0], [99.0, 2.0], [98.0, 3557.0], [96.0, 3.0], [101.0, 5.5], [103.0, 1831.5], [102.0, 1769.0], [100.0, 3563.0], [104.0, 41.66666666666667], [105.0, 1201.0], [107.0, 1785.5], [108.0, 1850.0], [111.0, 1788.0], [110.0, 4.0], [112.0, 928.25], [115.0, 1779.0], [114.0, 3.0], [113.0, 3571.0], [116.0, 1189.3333333333335], [118.0, 1224.3333333333333], [119.0, 3.0], [117.0, 1776.5], [122.0, 3550.0], [121.0, 1779.0], [120.0, 1775.5], [124.0, 134.0], [127.0, 4.0], [133.0, 1693.0], [135.0, 1690.0], [134.0, 3.0], [132.0, 3.0], [129.0, 2301.0], [136.0, 146.0], [142.0, 3352.0], [140.0, 1678.0], [139.0, 3.0], [138.0, 3351.0], [137.0, 1674.0], [150.0, 77.0], [151.0, 1803.5], [147.0, 3340.0], [146.0, 1672.5], [145.0, 3.0], [159.0, 1799.0], [158.0, 1810.5], [157.0, 3.0], [152.0, 3581.0], [164.0, 9.5], [166.0, 1804.5], [165.0, 1794.0], [163.0, 3609.0], [162.0, 1797.5], [161.0, 4.0], [160.0, 3612.0], [174.0, 163.0], [172.0, 11.0], [169.0, 3599.0], [177.0, 15.0], [183.0, 3.0], [182.0, 2403.0], [181.0, 3.0], [179.0, 3608.0], [191.0, 3.0], [189.0, 3572.0], [188.0, 3.0], [187.0, 2398.333333333333], [186.0, 1796.5], [185.0, 3.0], [184.0, 2402.0], [193.0, 174.0], [195.0, 3595.0], [194.0, 1811.0], [192.0, 1810.0], [207.0, 4.0], [205.0, 3240.0], [204.0, 3.0], [201.0, 1841.5], [208.0, 91.0], [211.0, 17.0], [213.0, 1084.6666666666665], [215.0, 2.0], [214.0, 3213.0], [212.0, 3.0], [210.0, 3222.0], [209.0, 3236.0], [216.0, 1931.0], [223.0, 189.0], [222.0, 3.0], [221.0, 3429.0], [220.0, 2.0], [219.0, 3659.0], [217.0, 3.0], [228.0, 1719.0], [231.0, 1708.0], [230.0, 3.0], [227.0, 4.0], [224.0, 3439.0], [232.0, 1716.0], [238.0, 195.0], [239.0, 4.0], [237.0, 3421.0], [236.0, 2.0], [241.0, 3410.0], [240.0, 1703.5], [250.0, 15.0], [254.0, 3250.0], [253.0, 3.0], [258.0, 1622.0], [262.0, 1147.6666666666665], [271.0, 17.0], [264.0, 3045.0], [263.0, 1615.0], [261.0, 1621.5], [260.0, 6.0], [259.0, 3242.0], [257.0, 4.0], [285.0, 4.0], [274.0, 213.0], [275.0, 4.0], [287.0, 1518.5], [282.0, 3015.0], [281.0, 3.0], [280.0, 3027.0], [279.0, 1514.0], [278.0, 4.0], [277.0, 3025.0], [276.0, 1512.0], [298.0, 9.0], [302.0, 19.0], [303.0, 4.0], [295.0, 3019.0], [294.0, 1507.0], [293.0, 1511.0], [292.0, 4.0], [288.0, 3035.0], [304.0, 1226.6666666666665], [308.0, 116.5], [309.0, 3436.0], [319.0, 14.0], [305.0, 3430.0], [315.0, 3406.0], [314.0, 3.0], [313.0, 3415.0], [312.0, 1711.0], [311.0, 1719.5], [310.0, 4.0], [334.0, 13.0], [321.0, 12.0], [327.0, 239.0], [330.0, 3222.0], [328.0, 3231.5], [332.0, 3211.0], [323.0, 9.0], [322.0, 11.0], [335.0, 3210.0], [325.0, 1507.0], [324.0, 6.0], [350.0, 2.0], [351.0, 2988.0], [349.0, 2987.0], [348.0, 1495.0], [347.0, 4.0], [346.0, 2981.0], [345.0, 3.0], [344.0, 3189.0], [342.0, 1596.0], [337.0, 1071.3333333333335], [339.0, 1593.0], [338.0, 1597.0], [341.0, 3.0], [340.0, 3192.0], [364.0, 3.0], [353.0, 127.5], [354.0, 2994.0], [365.0, 2988.0], [363.0, 3004.0], [362.0, 1501.5], [361.0, 1502.0], [360.0, 3.0], [359.0, 3008.0], [358.0, 3.0], [382.0, 944.3333333333333], [374.0, 1093.0], [383.0, 1507.5], [381.0, 3.0], [370.0, 3013.0], [369.0, 1509.5], [368.0, 8.0], [378.0, 2996.0], [377.0, 1499.5], [376.0, 1500.0], [375.0, 1510.0], [373.0, 1508.5], [372.0, 3.0], [397.0, 1020.6666666666667], [399.0, 1397.5], [396.0, 1400.0], [395.0, 1407.5], [394.0, 1408.0], [393.0, 1412.5], [392.0, 1413.5], [391.0, 3.0], [390.0, 2827.0], [389.0, 1405.0], [388.0, 2.0], [414.0, 1164.6666666666665], [400.0, 1529.5], [403.0, 1409.5], [402.0, 3.0], [409.0, 17.0], [415.0, 1746.5], [413.0, 1611.5], [412.0, 1618.5], [411.0, 1615.0], [410.0, 3.0], [407.0, 3238.0], [406.0, 1400.0], [405.0, 4.0], [404.0, 2808.0], [431.0, 3.0], [428.0, 1659.0], [418.0, 3191.0], [417.0, 1607.5], [416.0, 3.0], [427.0, 1501.5], [426.0, 1493.0], [425.0, 1508.5], [424.0, 1507.0], [423.0, 3.0], [422.0, 3014.0], [421.0, 3.0], [446.0, 3.0], [441.0, 22.0], [443.0, 1405.75], [447.0, 1954.6666666666665], [445.0, 2020.0], [444.0, 3.0], [442.0, 1401.0], [440.0, 1405.0], [437.0, 4.0], [433.0, 2829.0], [432.0, 1415.0], [462.0, 1399.5], [450.0, 949.3333333333333], [453.0, 1414.5], [452.0, 1513.5], [455.0, 1401.0], [449.0, 1502.0], [448.0, 3.0], [454.0, 3.0], [463.0, 1390.0], [461.0, 1392.0], [460.0, 4.0], [459.0, 2799.0], [458.0, 6.0], [457.0, 2819.0], [456.0, 1404.0], [478.0, 932.3333333333333], [472.0, 22.0], [469.0, 1548.5], [468.0, 1401.0], [471.0, 2784.0], [464.0, 1407.0], [467.0, 4.0], [465.0, 3013.0], [470.0, 4.0], [473.0, 153.5], [475.0, 305.0], [479.0, 1044.0], [477.0, 1389.0], [476.0, 4.0], [474.0, 2774.0], [494.0, 2.0], [488.0, 930.3333333333333], [482.0, 1401.0], [481.0, 1406.0], [480.0, 1402.5], [483.0, 3.0], [490.0, 158.0], [495.0, 2805.0], [491.0, 2836.0], [489.0, 2780.0], [487.0, 1397.0], [486.0, 1393.5], [485.0, 4.0], [484.0, 2788.0], [498.0, 1558.0], [496.0, 9.0], [497.0, 3.0], [507.0, 941.0], [510.0, 1557.0], [509.0, 2.0], [508.0, 2811.0], [506.0, 3.0], [504.0, 2806.0], [503.0, 2.0], [501.0, 3026.0], [500.0, 2.0], [537.0, 1578.0], [513.0, 5.0], [517.0, 324.0], [515.0, 3.0], [514.0, 2795.0], [536.0, 1408.0], [518.0, 2787.0], [522.0, 1007.6666666666667], [521.0, 166.5], [527.0, 168.5], [525.0, 2998.0], [524.0, 1509.5], [523.0, 1509.5], [534.0, 6.0], [535.0, 3.0], [538.0, 5.0], [540.0, 4.0], [542.0, 1409.0], [541.0, 1414.0], [543.0, 1403.0], [568.0, 175.0], [544.0, 1566.5], [549.0, 114.66666666666666], [546.0, 2812.0], [545.0, 3.0], [551.0, 1423.0], [550.0, 1414.0], [552.0, 1415.0], [553.0, 171.5], [559.0, 1058.6666666666665], [558.0, 1404.5], [557.0, 3.0], [556.0, 2809.0], [555.0, 1421.5], [554.0, 1409.5], [564.0, 9.0], [563.0, 12.0], [565.0, 10.0], [567.0, 8.0], [566.0, 9.0], [569.0, 5.5], [573.0, 2414.0], [570.0, 1207.0], [575.0, 176.5], [592.0, 915.6666666666667], [579.0, 350.0], [584.0, 949.6666666666667], [585.0, 2838.0], [583.0, 925.6666666666667], [582.0, 1912.0], [580.0, 2853.0], [588.0, 4.5], [591.0, 1406.5], [578.0, 2799.0], [590.0, 3.0], [589.0, 2822.0], [597.0, 1215.0], [596.0, 3.0], [593.0, 2406.0], [606.0, 364.0], [599.0, 2424.0], [598.0, 2.0], [636.0, 12.0], [608.0, 10.0], [623.0, 2838.0], [622.0, 3.0], [620.0, 2836.0], [619.0, 3.0], [618.0, 2821.0], [617.0, 1416.0], [616.0, 1426.5], [614.0, 185.0], [639.0, 4.0], [627.0, 3.0], [632.0, 2429.0], [615.0, 1431.5], [631.0, 1423.0], [630.0, 1219.0], [629.0, 3.0], [628.0, 2428.0], [670.0, 2257.0], [651.0, 383.0], [654.0, 3.0], [664.0, 3.0], [646.0, 2419.0], [645.0, 3.0], [641.0, 2427.0], [640.0, 1222.0], [655.0, 2467.0], [660.0, 12.5], [662.0, 389.0], [661.0, 2487.0], [666.0, 718.5], [667.0, 1136.0], [665.0, 950.6666666666667], [671.0, 388.0], [656.0, 5.0], [658.0, 2452.0], [657.0, 1232.0], [669.0, 1128.0], [668.0, 1136.5], [699.0, 1650.3333333333335], [675.0, 7.0], [672.0, 4.0], [673.0, 2477.0], [676.0, 197.5], [679.0, 1242.5], [677.0, 1246.5], [697.0, 1123.0], [696.0, 2249.0], [700.0, 2.0], [685.0, 9.0], [684.0, 1134.0], [680.0, 2260.0], [686.0, 9.0], [687.0, 9.0], [694.0, 397.0], [701.0, 826.0], [703.0, 1237.0], [702.0, 1644.3333333333335], [732.0, 6.0], [704.0, 202.0], [710.0, 8.0], [705.0, 2458.0], [729.0, 1130.0], [728.0, 1130.0], [731.0, 2257.0], [730.0, 1138.5], [712.0, 406.0], [717.0, 8.0], [721.0, 409.0], [726.0, 1138.5], [725.0, 3.0], [727.0, 208.0], [735.0, 209.5], [734.0, 2246.0], [733.0, 4.0], [763.0, 2.0], [737.0, 5.5], [738.0, 1442.5], [740.0, 3.0], [743.0, 4.0], [741.0, 2473.0], [761.0, 2238.0], [760.0, 1122.0], [744.0, 825.0], [745.0, 2449.0], [746.0, 212.0], [748.0, 6.0], [747.0, 2454.0], [749.0, 4.0], [751.0, 2455.0], [736.0, 2236.0], [750.0, 1228.5], [754.0, 883.6666666666667], [758.0, 747.6666666666667], [757.0, 3.0], [755.0, 2252.0], [764.0, 1442.0], [753.0, 1124.0], [752.0, 3.0], [792.0, 894.3333333333333], [770.0, 215.0], [768.0, 6.0], [782.0, 2456.0], [773.0, 6.0], [771.0, 2231.0], [775.0, 1115.0], [774.0, 3.0], [777.0, 430.0], [776.0, 2227.0], [779.0, 4.0], [781.0, 822.0], [784.0, 433.0], [788.0, 6.0], [786.0, 2459.0], [785.0, 2.0], [790.0, 4.0], [797.0, 7.0], [796.0, 2239.0], [794.0, 3.0], [793.0, 2235.0], [799.0, 1019.0], [798.0, 4.0], [827.0, 8.0], [801.0, 903.3333333333333], [806.0, 1132.5], [805.0, 3.0], [803.0, 2245.0], [802.0, 1126.0], [826.0, 2239.0], [825.0, 3.0], [810.0, 223.5], [811.0, 2060.0], [813.0, 1025.5], [812.0, 3.0], [815.0, 1239.0], [800.0, 1015.5], [814.0, 1238.0], [816.0, 823.6666666666667], [821.0, 450.0], [818.0, 2246.0], [817.0, 1139.0], [828.0, 226.5], [829.0, 2472.0], [830.0, 4.5], [831.0, 1234.0], [859.0, 4.5], [835.0, 820.3333333333333], [834.0, 976.3333333333333], [833.0, 1239.0], [832.0, 1239.5], [847.0, 2451.0], [845.0, 3.0], [838.0, 230.0], [836.0, 2483.0], [856.0, 7.0], [839.0, 1239.0], [858.0, 1232.0], [857.0, 6.0], [843.0, 3.5], [842.0, 2043.0], [841.0, 1234.0], [844.0, 1470.5], [849.0, 9.0], [852.0, 237.0], [851.0, 13.0], [853.0, 11.0], [855.0, 8.0], [854.0, 10.0], [860.0, 1461.0], [861.0, 1502.0], [863.0, 2240.0], [888.0, 242.0], [868.0, 915.6666666666666], [865.0, 2114.0], [867.0, 2055.0], [869.0, 2264.0], [870.0, 3.5], [871.0, 911.6666666666667], [877.0, 4.0], [876.0, 2073.0], [875.0, 1028.5], [873.0, 4.0], [872.0, 2266.0], [878.0, 2048.0], [879.0, 3.0], [883.0, 909.0], [886.0, 2258.0], [885.0, 1131.0], [884.0, 1141.5], [893.0, 1024.5], [892.0, 2.0], [894.0, 240.5], [895.0, 2060.0], [880.0, 2269.0], [882.0, 1128.5], [881.0, 3.0], [921.0, 488.0], [897.0, 845.0], [896.0, 4.5], [911.0, 1024.0], [909.0, 1027.0], [901.0, 690.0], [900.0, 3.0], [899.0, 2278.0], [898.0, 1144.0], [902.0, 1136.5], [920.0, 2266.0], [903.0, 2260.0], [908.0, 4.5], [907.0, 1273.0], [906.0, 1027.5], [905.0, 1025.0], [904.0, 4.0], [916.0, 758.0], [915.0, 3.0], [912.0, 2034.0], [917.0, 1141.0], [919.0, 3.0], [918.0, 2262.0], [927.0, 6.5], [926.0, 6.0], [924.0, 2062.0], [923.0, 1036.5], [922.0, 7.0], [954.0, 1284.5], [931.0, 248.5], [935.0, 1369.0], [934.0, 3.0], [933.0, 2247.0], [932.0, 1130.0], [953.0, 1131.0], [952.0, 3.0], [940.0, 1141.5], [939.0, 1135.5], [938.0, 1138.0], [937.0, 4.0], [941.0, 3.0], [942.0, 1374.0], [943.0, 2.0], [928.0, 4.0], [930.0, 1134.0], [929.0, 1537.25], [945.0, 170.0], [951.0, 6.0], [950.0, 2250.0], [949.0, 1131.0], [948.0, 4.0], [947.0, 2255.0], [946.0, 1125.5], [957.0, 2033.0], [944.0, 2253.0], [956.0, 1020.5], [955.0, 3.0], [990.0, 3.0], [962.0, 256.5], [967.0, 1016.75], [966.0, 3.0], [987.0, 1024.0], [986.0, 4.0], [989.0, 2065.0], [988.0, 1035.5], [972.0, 256.0], [971.0, 1369.6666666666665], [970.0, 3.0], [969.0, 1342.0], [968.0, 3.0], [974.0, 682.0], [975.0, 2045.0], [973.0, 852.0], [980.0, 5.0], [982.0, 258.5], [983.0, 2036.0], [991.0, 1032.0], [977.0, 2027.0], [976.0, 3.0], [979.0, 2047.0], [978.0, 3.0], [1018.0, 6.0], [993.0, 689.6666666666667], [992.0, 260.5], [1007.0, 7.0], [995.0, 261.5], [994.0, 2047.0], [996.0, 1019.0], [998.0, 2038.0], [997.0, 1026.0], [1017.0, 2036.0], [1016.0, 5.0], [1002.0, 687.0], [1001.0, 4.0], [1003.0, 2053.0], [1004.0, 523.0], [1011.0, 7.0], [1014.0, 265.5], [1013.0, 2013.0], [1012.0, 5.0], [1015.0, 2053.0], [1023.0, 858.6666666666667], [1009.0, 2030.0], [1008.0, 1017.0], [1022.0, 4.0], [1028.0, 1005.5], [1030.0, 858.0], [1026.0, 2014.0], [1024.0, 2037.0], [1036.0, 4.5], [1034.0, 2031.0], [1032.0, 2042.0], [1042.0, 854.3333333333333], [1048.0, 3.0], [1046.0, 3.0], [1044.0, 2008.0], [1040.0, 2010.0], [1050.0, 860.0], [1052.0, 1020.5], [1054.0, 2.0], [1056.0, 3.0], [1058.0, 2027.0], [1084.0, 3.0], [1086.0, 4.0], [1076.0, 1009.0], [1074.0, 4.0], [1078.0, 3.0], [1064.0, 640.25], [1062.0, 1007.0], [1060.0, 2020.0], [1138.0, 966.0], [1092.0, 280.5], [1090.0, 11.0], [1088.0, 1993.0], [1096.0, 664.0], [1094.0, 6.0], [1102.0, 5.0], [1100.0, 1971.0], [1098.0, 1982.0], [1140.0, 571.0], [1142.0, 954.0], [1146.0, 959.5], [1148.0, 5.0], [1150.0, 945.5], [1120.0, 969.5], [1104.0, 1252.0], [1108.0, 6.0], [1114.0, 831.0], [1112.0, 4.0], [1110.0, 1949.0], [1116.0, 3.0], [1124.0, 840.0], [1126.0, 1941.0], [1128.0, 3.0], [1130.0, 965.5], [1132.0, 570.0], [1134.0, 3.0], [1166.0, 3.0], [1178.0, 589.0], [1156.0, 4.5], [1152.0, 943.5], [1154.0, 3.0], [1180.0, 14.0], [1182.0, 11.0], [1160.0, 3.0], [1162.0, 3.0], [1164.0, 932.0], [1200.0, 4.0], [1204.0, 887.5], [1202.0, 5.0], [1206.0, 3.0], [1210.0, 3.0], [1212.0, 4.0], [1188.0, 913.5], [1186.0, 1484.2], [1184.0, 8.0], [1214.0, 667.5], [1194.0, 8.0], [1192.0, 1805.0], [1190.0, 908.0], [1198.0, 598.0], [1196.0, 1789.0], [1168.0, 627.0], [1170.0, 1852.0], [1176.0, 5.0], [1172.0, 931.0], [1264.0, 3.0], [1242.0, 5.0], [1268.0, 630.0], [1274.0, 3.0], [1272.0, 3.0], [1278.0, 537.5], [1238.0, 311.0], [1244.0, 619.0], [1292.0, 438.5], [1342.0, 1155.0], [1284.0, 367.33333333333337], [1286.0, 1091.0], [1280.0, 538.0], [1290.0, 1099.0], [1288.0, 3.0], [1294.0, 1305.0], [1330.0, 4.0], [1338.0, 1145.0], [1334.0, 570.5], [1332.0, 3.0], [1312.0, 1114.0], [1296.0, 550.0], [1302.0, 586.0], [1306.0, 5.0], [1308.0, 559.0], [1310.0, 4.5], [1314.0, 591.0], [1320.0, 557.5], [1318.0, 558.5], [1316.0, 560.0], [1322.0, 1112.0], [1324.0, 561.5], [1392.0, 1242.0], [1394.0, 418.33333333333337], [1348.0, 612.0], [1344.0, 579.5], [1350.0, 14.0], [1352.0, 11.0], [1354.0, 9.0], [1356.0, 340.0], [1358.0, 4.0], [1398.0, 691.0], [1402.0, 3.0], [1400.0, 1259.0], [1404.0, 3.0], [1378.0, 3.0], [1376.0, 612.0], [1406.0, 1271.0], [1362.0, 7.0], [1360.0, 1152.0], [1364.0, 1173.0], [1368.0, 484.2], [1370.0, 606.5], [1374.0, 3.0], [1384.0, 686.0], [1380.0, 5.0], [1386.0, 619.5], [1388.0, 1237.0], [1390.0, 4.0], [1414.0, 646.0], [1466.0, 668.25], [1408.0, 668.5], [1436.0, 676.0], [1412.0, 3.0], [1410.0, 641.0], [1418.0, 1296.0], [1422.0, 709.0], [1420.0, 5.0], [1428.0, 662.5], [1426.0, 662.5], [1424.0, 1325.0], [1434.0, 4.5], [1440.0, 360.5], [1442.0, 680.0], [1468.0, 4.0], [1470.0, 1322.0], [1462.0, 895.3333333333333], [1464.0, 3.0], [1452.0, 5.0], [1448.0, 679.0], [1446.0, 681.0], [1454.0, 453.33333333333337], [1480.0, 437.66666666666663], [1474.0, 660.0], [1476.0, 658.5], [1478.0, 656.5], [1486.0, 738.0], [1484.0, 651.0], [1520.0, 1249.0], [1522.0, 418.66666666666663], [1528.0, 825.6666666666667], [1530.0, 1227.0], [1532.0, 615.0], [1488.0, 373.0], [1490.0, 1292.0], [1496.0, 3.0], [1494.0, 1288.0], [1498.0, 1282.0], [1500.0, 642.0], [1506.0, 7.0], [1512.0, 3.0], [1510.0, 3.0], [1514.0, 754.0], [1518.0, 4.0], [1516.0, 630.0], [1550.0, 4.5], [1594.0, 10.0], [1544.0, 405.66666666666663], [1538.0, 608.0], [1536.0, 3.0], [1540.0, 606.0], [1548.0, 2.0], [1546.0, 1199.0], [1584.0, 965.5], [1598.0, 6.5], [1596.0, 8.0], [1592.0, 13.0], [1588.0, 5.0], [1586.0, 3.0], [1570.0, 4.0], [1554.0, 771.0], [1552.0, 597.0], [1556.0, 3.0], [1558.0, 2.0], [1566.0, 1173.0], [1564.0, 5.0], [1572.0, 650.6666666666667], [1576.0, 582.5], [1574.0, 5.0], [1578.0, 5.0], [1580.0, 965.0], [1582.0, 574.0], [1612.0, 552.0], [1658.0, 946.5], [1608.0, 953.5], [1602.0, 1114.3333333333333], [1600.0, 3.0], [1604.0, 1110.5], [1606.0, 1111.5], [1610.0, 1103.0], [1630.0, 542.0], [1626.0, 3.0], [1624.0, 1087.0], [1622.0, 1089.0], [1620.0, 547.5], [1632.0, 540.0], [1634.0, 3.0], [1638.0, 535.0], [1636.0, 536.0], [1660.0, 631.0], [1640.0, 2.0], [1646.0, 4.0], [1648.0, 4.0], [1650.0, 1052.0], [1652.0, 3.0], [1656.0, 843.0], [1672.0, 1027.0], [1670.0, 8.5], [1666.0, 6.0], [1664.0, 1036.0], [1694.0, 497.5], [1690.0, 334.33333333333337], [1688.0, 501.0], [1692.0, 887.0], [1682.0, 3.0], [1680.0, 2.0], [1684.0, 3.0], [1686.0, 442.0], [1674.0, 867.0], [1676.0, 351.0], [1678.0, 341.0], [1712.0, 482.0], [1714.0, 3.0], [1716.0, 461.0], [1718.0, 3.0], [1720.0, 635.3333333333333], [1722.0, 319.66666666666663], [1724.0, 470.25], [1726.0, 939.0], [1696.0, 597.0], [1702.0, 979.0], [1704.0, 490.0], [1706.0, 487.5], [1708.0, 486.5], [1710.0, 4.0], [1700.0, 452.5], [1728.0, 469.0], [1039.0, 270.0], [1079.0, 853.0], [1027.0, 2.0], [1025.0, 2.0], [1029.0, 3.0], [1033.0, 3.0], [1031.0, 1027.0], [1037.0, 2017.0], [1049.0, 865.3333333333333], [1047.0, 2031.0], [1043.0, 1010.0], [1041.0, 5.0], [1053.0, 2033.0], [1055.0, 2019.0], [1057.0, 4.0], [1083.0, 552.0], [1085.0, 2007.0], [1087.0, 1001.0], [1077.0, 1008.5], [1075.0, 1011.0], [1059.0, 4.5], [1061.0, 4.0], [1065.0, 2042.0], [1069.0, 185.33333333333331], [1071.0, 2033.0], [1103.0, 2.0], [1137.0, 4.0], [1091.0, 8.5], [1095.0, 5.0], [1093.0, 8.0], [1097.0, 1503.3333333333333], [1099.0, 1978.0], [1139.0, 1921.0], [1141.0, 4.5], [1145.0, 289.5], [1143.0, 1899.0], [1147.0, 1899.0], [1149.0, 4.0], [1109.0, 4.0], [1115.0, 1924.0], [1117.0, 1924.0], [1119.0, 4.0], [1121.0, 957.5], [1123.0, 4.0], [1125.0, 975.0], [1127.0, 7.0], [1129.0, 834.6666666666667], [1135.0, 1913.0], [1163.0, 935.5], [1165.0, 937.0], [1153.0, 1226.0], [1155.0, 1894.0], [1181.0, 9.0], [1179.0, 13.0], [1183.0, 10.0], [1159.0, 581.0], [1157.0, 1893.0], [1161.0, 1879.0], [1167.0, 814.0], [1201.0, 894.5], [1205.0, 1186.0], [1203.0, 891.0], [1207.0, 1771.0], [1211.0, 1703.0], [1213.0, 7.0], [1215.0, 1386.0], [1187.0, 916.0], [1185.0, 1392.75], [1189.0, 804.3333333333333], [1195.0, 4.0], [1169.0, 935.5], [1171.0, 295.0], [1173.0, 1851.0], [1271.0, 6.0], [1221.0, 609.0], [1227.0, 10.0], [1229.0, 613.0], [1275.0, 852.5], [1273.0, 1071.0], [1277.0, 4.0], [1255.0, 6.0], [1257.0, 625.0], [1261.0, 628.0], [1233.0, 6.0], [1235.0, 613.0], [1247.0, 6.0], [1289.0, 550.0], [1287.0, 638.0], [1285.0, 548.0], [1311.0, 560.5], [1283.0, 3.0], [1281.0, 1084.0], [1291.0, 4.0], [1293.0, 551.0], [1295.0, 3.0], [1339.0, 663.0], [1337.0, 2.0], [1335.0, 1139.0], [1341.0, 3.0], [1343.0, 4.0], [1313.0, 4.0], [1297.0, 553.0], [1301.0, 3.0], [1305.0, 5.0], [1303.0, 1111.0], [1309.0, 1117.0], [1321.0, 655.0], [1319.0, 559.0], [1317.0, 559.0], [1315.0, 560.5], [1323.0, 3.0], [1357.0, 5.0], [1369.0, 629.6666666666667], [1347.0, 4.0], [1345.0, 1159.0], [1349.0, 589.5], [1351.0, 12.0], [1353.0, 10.0], [1355.0, 7.5], [1393.0, 4.0], [1395.0, 1249.0], [1399.0, 3.0], [1403.0, 1266.0], [1405.0, 425.66666666666663], [1407.0, 3.0], [1377.0, 1227.0], [1363.0, 1170.0], [1365.0, 676.0], [1367.0, 1193.0], [1373.0, 5.0], [1371.0, 1211.0], [1375.0, 612.5], [1379.0, 412.66666666666663], [1383.0, 1229.5], [1381.0, 616.0], [1385.0, 5.0], [1387.0, 620.0], [1391.0, 623.0], [1423.0, 673.0], [1419.0, 5.0], [1409.0, 352.5], [1437.0, 1350.0], [1435.0, 677.0], [1415.0, 647.0], [1413.0, 645.5], [1411.0, 1284.0], [1417.0, 3.0], [1421.0, 654.0], [1429.0, 669.0], [1427.0, 662.0], [1425.0, 3.0], [1443.0, 1363.0], [1469.0, 444.0], [1467.0, 665.5], [1461.0, 728.0], [1463.0, 1339.0], [1465.0, 669.0], [1445.0, 361.0], [1451.0, 7.0], [1449.0, 1354.0], [1453.0, 9.0], [1455.0, 723.0], [1525.0, 759.0], [1505.0, 747.0], [1473.0, 372.0], [1475.0, 659.5], [1477.0, 657.0], [1485.0, 1297.0], [1483.0, 4.0], [1481.0, 1302.0], [1487.0, 5.0], [1521.0, 4.0], [1523.0, 624.5], [1527.0, 8.0], [1529.0, 619.5], [1531.0, 2.0], [1489.0, 1293.0], [1493.0, 646.5], [1491.0, 3.0], [1497.0, 645.0], [1499.0, 4.0], [1501.0, 641.5], [1507.0, 3.0], [1509.0, 637.0], [1513.0, 1007.0], [1511.0, 1264.0], [1519.0, 627.0], [1517.0, 1255.0], [1515.0, 5.0], [1543.0, 3.0], [1539.0, 659.6666666666667], [1537.0, 610.5], [1541.0, 1207.0], [1549.0, 1195.0], [1545.0, 602.0], [1551.0, 598.5], [1597.0, 6.0], [1595.0, 9.0], [1593.0, 12.0], [1591.0, 573.0], [1589.0, 568.5], [1587.0, 1138.0], [1599.0, 4.0], [1553.0, 1188.0], [1557.0, 1186.0], [1559.0, 979.0], [1567.0, 7.0], [1565.0, 590.0], [1575.0, 584.0], [1573.0, 1165.0], [1579.0, 578.0], [1583.0, 383.66666666666663], [1581.0, 3.0], [1607.0, 1108.0], [1663.0, 519.5], [1613.0, 557.5], [1601.0, 1117.0], [1609.0, 4.0], [1611.0, 3.0], [1629.0, 5.0], [1627.0, 1084.0], [1623.0, 3.0], [1621.0, 546.5], [1619.0, 3.0], [1633.0, 635.6666666666666], [1635.0, 537.5], [1661.0, 349.0], [1659.0, 424.5], [1639.0, 941.5], [1641.0, 475.0], [1643.0, 4.0], [1645.0, 944.0], [1647.0, 1057.0], [1649.0, 418.5], [1653.0, 944.0], [1651.0, 838.0], [1655.0, 843.0], [1657.0, 3.0], [1671.0, 264.75], [1675.0, 436.0], [1665.0, 9.0], [1695.0, 332.3333333333333], [1693.0, 3.0], [1687.0, 502.5], [1691.0, 995.0], [1681.0, 1013.0], [1683.0, 1010.0], [1685.0, 1005.0], [1669.0, 10.0], [1673.0, 18.0], [1677.0, 513.0], [1679.0, 633.6666666666666], [1713.0, 961.0], [1715.0, 957.0], [1719.0, 923.0], [1721.0, 3.0], [1723.0, 318.66666666666663], [1727.0, 468.5], [1725.0, 471.5], [1717.0, 462.0], [1699.0, 899.0], [1701.0, 331.66666666666663], [1703.0, 5.0], [1705.0, 456.0], [1707.0, 485.5], [1709.0, 4.0], [1711.0, 914.0]], "isOverall": false, "label": "HTTP Request characters", "isController": false}, {"data": [[892.3630000000028, 937.6595000000005]], "isOverall": false, "label": "HTTP Request characters-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1728.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4200.0, "minX": 1.75925706E12, "maxY": 2883633.3333333335, "series": [{"data": [[1.75925706E12, 2883633.3333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75925706E12, 4200.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75925706E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 937.6595000000005, "minX": 1.75925706E12, "maxY": 937.6595000000005, "series": [{"data": [[1.75925706E12, 937.6595000000005]], "isOverall": false, "label": "HTTP Request characters", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75925706E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 937.2824999999998, "minX": 1.75925706E12, "maxY": 937.2824999999998, "series": [{"data": [[1.75925706E12, 937.2824999999998]], "isOverall": false, "label": "HTTP Request characters", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75925706E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.2590000000000002, "minX": 1.75925706E12, "maxY": 0.2590000000000002, "series": [{"data": [[1.75925706E12, 0.2590000000000002]], "isOverall": false, "label": "HTTP Request characters", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75925706E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.75925706E12, "maxY": 4367.0, "series": [{"data": [[1.75925706E12, 4367.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75925706E12, 2.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75925706E12, 2841.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75925706E12, 3611.9700000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75925706E12, 26.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.75925706E12, 3421.95]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75925706E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 16.5, "minX": 86.0, "maxY": 2397.0, "series": [{"data": [[86.0, 26.5], [88.0, 16.5], [439.0, 22.0], [457.0, 31.0], [456.0, 968.5], [474.0, 2397.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 474.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 16.5, "minX": 86.0, "maxY": 2396.0, "series": [{"data": [[86.0, 23.0], [88.0, 16.5], [439.0, 21.0], [457.0, 31.0], [456.0, 968.0], [474.0, 2396.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 474.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.75925706E12, "maxY": 33.333333333333336, "series": [{"data": [[1.75925706E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75925706E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.75925706E12, "maxY": 33.333333333333336, "series": [{"data": [[1.75925706E12, 33.333333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75925706E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.75925706E12, "maxY": 33.333333333333336, "series": [{"data": [[1.75925706E12, 33.333333333333336]], "isOverall": false, "label": "HTTP Request characters-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75925706E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.75925706E12, "maxY": 33.333333333333336, "series": [{"data": [[1.75925706E12, 33.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75925706E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

