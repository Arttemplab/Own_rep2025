/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 102.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 2.0], [28.7, 2.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 2.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 2.0], [30.6, 2.0], [30.7, 2.0], [30.8, 2.0], [30.9, 2.0], [31.0, 2.0], [31.1, 2.0], [31.2, 2.0], [31.3, 2.0], [31.4, 2.0], [31.5, 2.0], [31.6, 2.0], [31.7, 2.0], [31.8, 2.0], [31.9, 2.0], [32.0, 2.0], [32.1, 2.0], [32.2, 2.0], [32.3, 2.0], [32.4, 2.0], [32.5, 2.0], [32.6, 2.0], [32.7, 2.0], [32.8, 2.0], [32.9, 2.0], [33.0, 2.0], [33.1, 2.0], [33.2, 2.0], [33.3, 2.0], [33.4, 2.0], [33.5, 2.0], [33.6, 2.0], [33.7, 3.0], [33.8, 3.0], [33.9, 3.0], [34.0, 3.0], [34.1, 3.0], [34.2, 3.0], [34.3, 3.0], [34.4, 3.0], [34.5, 3.0], [34.6, 3.0], [34.7, 3.0], [34.8, 3.0], [34.9, 3.0], [35.0, 3.0], [35.1, 3.0], [35.2, 3.0], [35.3, 3.0], [35.4, 3.0], [35.5, 3.0], [35.6, 3.0], [35.7, 3.0], [35.8, 3.0], [35.9, 3.0], [36.0, 3.0], [36.1, 3.0], [36.2, 3.0], [36.3, 3.0], [36.4, 3.0], [36.5, 4.0], [36.6, 4.0], [36.7, 4.0], [36.8, 4.0], [36.9, 4.0], [37.0, 4.0], [37.1, 4.0], [37.2, 4.0], [37.3, 4.0], [37.4, 4.0], [37.5, 4.0], [37.6, 4.0], [37.7, 4.0], [37.8, 4.0], [37.9, 4.0], [38.0, 4.0], [38.1, 4.0], [38.2, 4.0], [38.3, 4.0], [38.4, 4.0], [38.5, 4.0], [38.6, 4.0], [38.7, 4.0], [38.8, 5.0], [38.9, 5.0], [39.0, 5.0], [39.1, 5.0], [39.2, 5.0], [39.3, 5.0], [39.4, 5.0], [39.5, 5.0], [39.6, 5.0], [39.7, 5.0], [39.8, 5.0], [39.9, 5.0], [40.0, 5.0], [40.1, 5.0], [40.2, 5.0], [40.3, 5.0], [40.4, 5.0], [40.5, 5.0], [40.6, 5.0], [40.7, 5.0], [40.8, 6.0], [40.9, 6.0], [41.0, 6.0], [41.1, 6.0], [41.2, 6.0], [41.3, 6.0], [41.4, 6.0], [41.5, 6.0], [41.6, 6.0], [41.7, 6.0], [41.8, 6.0], [41.9, 6.0], [42.0, 6.0], [42.1, 6.0], [42.2, 6.0], [42.3, 7.0], [42.4, 7.0], [42.5, 7.0], [42.6, 7.0], [42.7, 7.0], [42.8, 7.0], [42.9, 7.0], [43.0, 7.0], [43.1, 7.0], [43.2, 7.0], [43.3, 7.0], [43.4, 7.0], [43.5, 7.0], [43.6, 7.0], [43.7, 7.0], [43.8, 8.0], [43.9, 8.0], [44.0, 8.0], [44.1, 8.0], [44.2, 8.0], [44.3, 8.0], [44.4, 8.0], [44.5, 8.0], [44.6, 8.0], [44.7, 8.0], [44.8, 8.0], [44.9, 8.0], [45.0, 8.0], [45.1, 8.0], [45.2, 8.0], [45.3, 9.0], [45.4, 9.0], [45.5, 9.0], [45.6, 9.0], [45.7, 9.0], [45.8, 9.0], [45.9, 9.0], [46.0, 9.0], [46.1, 9.0], [46.2, 9.0], [46.3, 9.0], [46.4, 9.0], [46.5, 9.0], [46.6, 10.0], [46.7, 10.0], [46.8, 10.0], [46.9, 10.0], [47.0, 10.0], [47.1, 10.0], [47.2, 10.0], [47.3, 10.0], [47.4, 10.0], [47.5, 10.0], [47.6, 10.0], [47.7, 11.0], [47.8, 11.0], [47.9, 11.0], [48.0, 11.0], [48.1, 11.0], [48.2, 11.0], [48.3, 11.0], [48.4, 11.0], [48.5, 11.0], [48.6, 11.0], [48.7, 11.0], [48.8, 11.0], [48.9, 11.0], [49.0, 12.0], [49.1, 12.0], [49.2, 12.0], [49.3, 12.0], [49.4, 12.0], [49.5, 12.0], [49.6, 12.0], [49.7, 12.0], [49.8, 12.0], [49.9, 12.0], [50.0, 12.0], [50.1, 12.0], [50.2, 12.0], [50.3, 12.0], [50.4, 13.0], [50.5, 13.0], [50.6, 13.0], [50.7, 13.0], [50.8, 13.0], [50.9, 13.0], [51.0, 13.0], [51.1, 13.0], [51.2, 13.0], [51.3, 13.0], [51.4, 13.0], [51.5, 13.0], [51.6, 13.0], [51.7, 13.0], [51.8, 13.0], [51.9, 14.0], [52.0, 14.0], [52.1, 14.0], [52.2, 14.0], [52.3, 14.0], [52.4, 14.0], [52.5, 14.0], [52.6, 14.0], [52.7, 14.0], [52.8, 14.0], [52.9, 14.0], [53.0, 14.0], [53.1, 14.0], [53.2, 15.0], [53.3, 15.0], [53.4, 15.0], [53.5, 15.0], [53.6, 15.0], [53.7, 15.0], [53.8, 15.0], [53.9, 15.0], [54.0, 15.0], [54.1, 15.0], [54.2, 15.0], [54.3, 16.0], [54.4, 16.0], [54.5, 16.0], [54.6, 16.0], [54.7, 16.0], [54.8, 16.0], [54.9, 16.0], [55.0, 16.0], [55.1, 16.0], [55.2, 16.0], [55.3, 16.0], [55.4, 16.0], [55.5, 16.0], [55.6, 16.0], [55.7, 16.0], [55.8, 17.0], [55.9, 17.0], [56.0, 17.0], [56.1, 17.0], [56.2, 17.0], [56.3, 17.0], [56.4, 17.0], [56.5, 17.0], [56.6, 17.0], [56.7, 17.0], [56.8, 17.0], [56.9, 17.0], [57.0, 17.0], [57.1, 18.0], [57.2, 18.0], [57.3, 18.0], [57.4, 18.0], [57.5, 18.0], [57.6, 18.0], [57.7, 18.0], [57.8, 18.0], [57.9, 18.0], [58.0, 18.0], [58.1, 18.0], [58.2, 18.0], [58.3, 18.0], [58.4, 18.0], [58.5, 18.0], [58.6, 18.0], [58.7, 19.0], [58.8, 19.0], [58.9, 19.0], [59.0, 19.0], [59.1, 19.0], [59.2, 19.0], [59.3, 19.0], [59.4, 19.0], [59.5, 19.0], [59.6, 19.0], [59.7, 19.0], [59.8, 19.0], [59.9, 19.0], [60.0, 19.0], [60.1, 20.0], [60.2, 20.0], [60.3, 20.0], [60.4, 20.0], [60.5, 20.0], [60.6, 20.0], [60.7, 20.0], [60.8, 20.0], [60.9, 20.0], [61.0, 20.0], [61.1, 20.0], [61.2, 20.0], [61.3, 20.0], [61.4, 21.0], [61.5, 21.0], [61.6, 21.0], [61.7, 21.0], [61.8, 21.0], [61.9, 21.0], [62.0, 21.0], [62.1, 21.0], [62.2, 21.0], [62.3, 21.0], [62.4, 21.0], [62.5, 22.0], [62.6, 22.0], [62.7, 22.0], [62.8, 22.0], [62.9, 22.0], [63.0, 22.0], [63.1, 22.0], [63.2, 22.0], [63.3, 22.0], [63.4, 22.0], [63.5, 22.0], [63.6, 22.0], [63.7, 22.0], [63.8, 23.0], [63.9, 23.0], [64.0, 23.0], [64.1, 23.0], [64.2, 23.0], [64.3, 23.0], [64.4, 23.0], [64.5, 23.0], [64.6, 23.0], [64.7, 23.0], [64.8, 23.0], [64.9, 23.0], [65.0, 24.0], [65.1, 24.0], [65.2, 24.0], [65.3, 24.0], [65.4, 24.0], [65.5, 24.0], [65.6, 24.0], [65.7, 24.0], [65.8, 24.0], [65.9, 24.0], [66.0, 25.0], [66.1, 25.0], [66.2, 25.0], [66.3, 25.0], [66.4, 25.0], [66.5, 25.0], [66.6, 25.0], [66.7, 25.0], [66.8, 25.0], [66.9, 25.0], [67.0, 26.0], [67.1, 26.0], [67.2, 26.0], [67.3, 26.0], [67.4, 26.0], [67.5, 26.0], [67.6, 26.0], [67.7, 26.0], [67.8, 26.0], [67.9, 26.0], [68.0, 26.0], [68.1, 27.0], [68.2, 27.0], [68.3, 27.0], [68.4, 27.0], [68.5, 27.0], [68.6, 27.0], [68.7, 27.0], [68.8, 27.0], [68.9, 27.0], [69.0, 27.0], [69.1, 27.0], [69.2, 28.0], [69.3, 28.0], [69.4, 28.0], [69.5, 28.0], [69.6, 28.0], [69.7, 28.0], [69.8, 28.0], [69.9, 28.0], [70.0, 28.0], [70.1, 28.0], [70.2, 28.0], [70.3, 28.0], [70.4, 28.0], [70.5, 28.0], [70.6, 28.0], [70.7, 29.0], [70.8, 29.0], [70.9, 29.0], [71.0, 29.0], [71.1, 29.0], [71.2, 29.0], [71.3, 29.0], [71.4, 29.0], [71.5, 29.0], [71.6, 29.0], [71.7, 29.0], [71.8, 29.0], [71.9, 29.0], [72.0, 29.0], [72.1, 30.0], [72.2, 30.0], [72.3, 30.0], [72.4, 30.0], [72.5, 30.0], [72.6, 30.0], [72.7, 30.0], [72.8, 30.0], [72.9, 30.0], [73.0, 30.0], [73.1, 30.0], [73.2, 30.0], [73.3, 30.0], [73.4, 30.0], [73.5, 30.0], [73.6, 30.0], [73.7, 31.0], [73.8, 31.0], [73.9, 31.0], [74.0, 31.0], [74.1, 31.0], [74.2, 31.0], [74.3, 31.0], [74.4, 31.0], [74.5, 31.0], [74.6, 31.0], [74.7, 31.0], [74.8, 31.0], [74.9, 31.0], [75.0, 31.0], [75.1, 32.0], [75.2, 32.0], [75.3, 32.0], [75.4, 32.0], [75.5, 32.0], [75.6, 32.0], [75.7, 32.0], [75.8, 32.0], [75.9, 32.0], [76.0, 32.0], [76.1, 32.0], [76.2, 32.0], [76.3, 33.0], [76.4, 33.0], [76.5, 33.0], [76.6, 33.0], [76.7, 33.0], [76.8, 33.0], [76.9, 33.0], [77.0, 33.0], [77.1, 34.0], [77.2, 34.0], [77.3, 34.0], [77.4, 34.0], [77.5, 34.0], [77.6, 34.0], [77.7, 34.0], [77.8, 34.0], [77.9, 34.0], [78.0, 35.0], [78.1, 35.0], [78.2, 35.0], [78.3, 35.0], [78.4, 35.0], [78.5, 35.0], [78.6, 35.0], [78.7, 35.0], [78.8, 35.0], [78.9, 36.0], [79.0, 36.0], [79.1, 36.0], [79.2, 36.0], [79.3, 36.0], [79.4, 36.0], [79.5, 36.0], [79.6, 36.0], [79.7, 36.0], [79.8, 36.0], [79.9, 37.0], [80.0, 37.0], [80.1, 37.0], [80.2, 37.0], [80.3, 37.0], [80.4, 37.0], [80.5, 37.0], [80.6, 37.0], [80.7, 37.0], [80.8, 38.0], [80.9, 38.0], [81.0, 38.0], [81.1, 38.0], [81.2, 38.0], [81.3, 38.0], [81.4, 38.0], [81.5, 38.0], [81.6, 38.0], [81.7, 38.0], [81.8, 39.0], [81.9, 39.0], [82.0, 39.0], [82.1, 39.0], [82.2, 39.0], [82.3, 39.0], [82.4, 39.0], [82.5, 39.0], [82.6, 39.0], [82.7, 39.0], [82.8, 39.0], [82.9, 39.0], [83.0, 40.0], [83.1, 40.0], [83.2, 40.0], [83.3, 40.0], [83.4, 40.0], [83.5, 40.0], [83.6, 40.0], [83.7, 40.0], [83.8, 40.0], [83.9, 41.0], [84.0, 41.0], [84.1, 41.0], [84.2, 41.0], [84.3, 41.0], [84.4, 41.0], [84.5, 41.0], [84.6, 41.0], [84.7, 42.0], [84.8, 42.0], [84.9, 42.0], [85.0, 42.0], [85.1, 42.0], [85.2, 42.0], [85.3, 42.0], [85.4, 42.0], [85.5, 43.0], [85.6, 43.0], [85.7, 43.0], [85.8, 43.0], [85.9, 43.0], [86.0, 43.0], [86.1, 44.0], [86.2, 44.0], [86.3, 44.0], [86.4, 44.0], [86.5, 44.0], [86.6, 44.0], [86.7, 44.0], [86.8, 45.0], [86.9, 45.0], [87.0, 45.0], [87.1, 45.0], [87.2, 45.0], [87.3, 45.0], [87.4, 45.0], [87.5, 46.0], [87.6, 46.0], [87.7, 46.0], [87.8, 46.0], [87.9, 47.0], [88.0, 47.0], [88.1, 47.0], [88.2, 47.0], [88.3, 47.0], [88.4, 47.0], [88.5, 48.0], [88.6, 48.0], [88.7, 48.0], [88.8, 48.0], [88.9, 48.0], [89.0, 49.0], [89.1, 49.0], [89.2, 49.0], [89.3, 49.0], [89.4, 49.0], [89.5, 50.0], [89.6, 50.0], [89.7, 50.0], [89.8, 50.0], [89.9, 51.0], [90.0, 51.0], [90.1, 51.0], [90.2, 51.0], [90.3, 51.0], [90.4, 52.0], [90.5, 52.0], [90.6, 52.0], [90.7, 52.0], [90.8, 52.0], [90.9, 52.0], [91.0, 52.0], [91.1, 53.0], [91.2, 53.0], [91.3, 53.0], [91.4, 53.0], [91.5, 53.0], [91.6, 53.0], [91.7, 54.0], [91.8, 54.0], [91.9, 54.0], [92.0, 55.0], [92.1, 55.0], [92.2, 55.0], [92.3, 55.0], [92.4, 55.0], [92.5, 56.0], [92.6, 56.0], [92.7, 56.0], [92.8, 57.0], [92.9, 57.0], [93.0, 57.0], [93.1, 57.0], [93.2, 58.0], [93.3, 58.0], [93.4, 58.0], [93.5, 59.0], [93.6, 59.0], [93.7, 59.0], [93.8, 60.0], [93.9, 60.0], [94.0, 60.0], [94.1, 60.0], [94.2, 61.0], [94.3, 61.0], [94.4, 61.0], [94.5, 61.0], [94.6, 62.0], [94.7, 62.0], [94.8, 62.0], [94.9, 62.0], [95.0, 62.0], [95.1, 63.0], [95.2, 63.0], [95.3, 63.0], [95.4, 63.0], [95.5, 63.0], [95.6, 64.0], [95.7, 64.0], [95.8, 64.0], [95.9, 64.0], [96.0, 65.0], [96.1, 65.0], [96.2, 65.0], [96.3, 65.0], [96.4, 66.0], [96.5, 66.0], [96.6, 66.0], [96.7, 66.0], [96.8, 67.0], [96.9, 67.0], [97.0, 67.0], [97.1, 67.0], [97.2, 67.0], [97.3, 67.0], [97.4, 68.0], [97.5, 68.0], [97.6, 68.0], [97.7, 68.0], [97.8, 69.0], [97.9, 70.0], [98.0, 71.0], [98.1, 74.0], [98.2, 79.0], [98.3, 82.0], [98.4, 83.0], [98.5, 85.0], [98.6, 88.0], [98.7, 93.0], [98.8, 95.0], [98.9, 95.0], [99.0, 96.0], [99.1, 97.0], [99.2, 98.0], [99.3, 98.0], [99.4, 99.0], [99.5, 99.0], [99.6, 100.0], [99.7, 100.0], [99.8, 100.0], [99.9, 101.0], [100.0, 102.0]], "isOverall": false, "label": "HTTP Request character_id", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 249.0, "minX": 0.0, "maxY": 61059.0, "series": [{"data": [[0.0, 61059.0], [100.0, 249.0]], "isOverall": false, "label": "HTTP Request character_id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 61308.0, "minX": 3.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1 500ms"], [2, "Requests having \nresponse time > 1 500ms"], [3, "Requests in error"]], "maxY": 61308.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1 500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1 500ms", "isController": false}, {"data": [[3.0, 61308.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 990.5662230051548, "minX": 1.75927416E12, "maxY": 990.5662230051548, "series": [{"data": [[1.75927416E12, 990.5662230051548]], "isOverall": false, "label": "Thread GroupMy Test5000character_id", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75927416E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 101.0, "series": [{"data": [[2.0, 1.0], [4.0, 1.5], [5.0, 0.4], [8.0, 0.75], [9.0, 1.0], [10.0, 0.8181818181818182], [11.0, 1.0], [12.0, 1.0714285714285716], [13.0, 1.0], [14.0, 1.0], [15.0, 1.0], [16.0, 0.5], [17.0, 0.4285714285714286], [18.0, 1.25], [19.0, 1.7500000000000002], [20.0, 1.1666666666666667], [21.0, 1.2727272727272725], [22.0, 2.0], [23.0, 1.0], [24.0, 1.5], [25.0, 0.7777777777777777], [26.0, 1.142857142857143], [27.0, 0.6666666666666667], [28.0, 1.0], [29.0, 1.1428571428571428], [30.0, 1.1333333333333335], [31.0, 1.0], [32.0, 1.3076923076923077], [33.0, 1.2222222222222223], [34.0, 1.0], [35.0, 1.0], [36.0, 1.25], [37.0, 1.5217391304347825], [39.0, 0.9999999999999999], [38.0, 2.0], [40.0, 1.1111111111111112], [41.0, 1.1250000000000002], [42.0, 1.0], [43.0, 0.8333333333333331], [45.0, 1.0], [44.0, 1.0], [46.0, 0.8571428571428572], [47.0, 0.7209302325581396], [48.0, 0.8636363636363635], [50.0, 0.8], [51.0, 0.875], [53.0, 0.7], [54.0, 1.0], [55.0, 0.6296296296296295], [56.0, 0.9999999999999999], [57.0, 0.8888888888888888], [58.0, 1.0], [59.0, 0.9090909090909091], [61.0, 1.0], [63.0, 1.0], [64.0, 1.0], [67.0, 1.0], [68.0, 0.9090909090909091], [70.0, 0.7], [71.0, 0.0], [75.0, 1.0], [74.0, 0.7999999999999999], [72.0, 0.7142857142857143], [78.0, 1.0], [77.0, 1.0], [76.0, 0.8372093023255813], [82.0, 0.75], [86.0, 0.5], [84.0, 1.0], [88.0, 1.0], [97.0, 1.0], [99.0, 1.0], [100.0, 0.8333333333333334], [102.0, 2.0], [103.0, 3.5555555555555545], [104.0, 4.749999999999999], [105.0, 5.529411764705883], [106.0, 4.2], [107.0, 4.75], [108.0, 4.0], [109.0, 4.2727272727272725], [111.0, 3.75], [110.0, 3.5], [112.0, 3.0], [113.0, 2.5], [114.0, 1.0], [117.0, 1.0], [118.0, 0.25], [120.0, 1.0], [121.0, 1.0], [122.0, 1.0], [123.0, 1.0000000000000002], [125.0, 1.3846153846153848], [126.0, 1.9999999999999998], [127.0, 2.2758620689655173], [128.0, 2.0], [129.0, 1.3333333333333333], [132.0, 1.0], [133.0, 1.0], [134.0, 1.0], [135.0, 1.0], [136.0, 1.0], [137.0, 0.5714285714285714], [138.0, 1.0], [139.0, 0.6666666666666666], [140.0, 0.875], [141.0, 0.7692307692307693], [142.0, 1.2857142857142858], [143.0, 1.25], [144.0, 2.0], [145.0, 1.3333333333333335], [146.0, 2.3333333333333335], [147.0, 2.4000000000000004], [148.0, 2.437500000000001], [150.0, 1.3333333333333333], [151.0, 1.0], [152.0, 1.0], [153.0, 1.0], [154.0, 1.0], [155.0, 1.0], [156.0, 0.7692307692307693], [157.0, 0.875], [159.0, 0.9999999999999999], [161.0, 1.0], [162.0, 0.75], [163.0, 0.875], [164.0, 1.0], [165.0, 1.2222222222222223], [166.0, 1.1875000000000002], [167.0, 1.0], [168.0, 1.0], [169.0, 1.0], [170.0, 1.5416666666666665], [171.0, 1.0], [172.0, 1.0], [173.0, 1.0], [174.0, 1.0], [175.0, 0.4], [176.0, 1.0], [177.0, 0.8571428571428572], [180.0, 1.1764705882352942], [182.0, 1.0], [183.0, 0.9999999999999999], [184.0, 1.0], [186.0, 0.9166666666666666], [187.0, 1.2], [188.0, 0.7777777777777778], [189.0, 1.043478260869565], [190.0, 0.8571428571428572], [191.0, 1.0], [192.0, 1.0000000000000002], [193.0, 1.0], [194.0, 0.25], [195.0, 1.0], [196.0, 1.0], [197.0, 1.0], [198.0, 0.9999999999999999], [200.0, 1.0], [201.0, 1.0], [202.0, 1.0], [203.0, 0.7999999999999999], [204.0, 1.1111111111111114], [205.0, 1.0], [206.0, 0.9999999999999999], [207.0, 1.0], [208.0, 0.8095238095238094], [209.0, 0.0], [210.0, 1.1666666666666665], [211.0, 1.4285714285714284], [212.0, 1.1875000000000002], [213.0, 1.0], [214.0, 1.0], [215.0, 1.0], [216.0, 0.8333333333333331], [217.0, 0.0], [218.0, 0.8333333333333334], [219.0, 1.0], [220.0, 0.5], [221.0, 0.9803921568627452], [222.0, 0.8593750000000001], [223.0, 1.6962025316455698], [224.0, 0.5357142857142859], [225.0, 0.8148148148148148], [226.0, 1.2380952380952381], [227.0, 1.3095238095238095], [228.0, 0.7714285714285714], [229.0, 0.7959183673469387], [230.0, 0.9104477611940298], [231.0, 1.0740740740740742], [232.0, 0.717948717948718], [233.0, 0.8409090909090907], [234.0, 0.9863013698630139], [235.0, 1.6625000000000003], [236.0, 0.9199999999999999], [237.0, 0.7142857142857141], [238.0, 1.2878787878787878], [239.0, 1.1538461538461535], [240.0, 0.7599999999999999], [241.0, 0.9183673469387753], [242.0, 0.8734177215189871], [243.0, 0.9375000000000001], [244.0, 0.7735849056603773], [245.0, 0.8135593220338984], [246.0, 0.7777777777777779], [247.0, 0.75], [248.0, 0.8113207547169812], [249.0, 2.576470588235295], [250.0, 0.9866666666666667], [251.0, 0.7857142857142856], [252.0, 0.8113207547169813], [253.0, 1.2197802197802194], [254.0, 0.8412698412698413], [255.0, 2.1636363636363645], [257.0, 1.5054945054945057], [256.0, 0.8070175438596491], [258.0, 0.7727272727272726], [259.0, 0.87037037037037], [260.0, 0.6964285714285712], [261.0, 1.3402061855670104], [262.0, 0.7540983606557377], [263.0, 0.7692307692307693], [264.0, 0.857142857142857], [270.0, 1.2602739726027394], [269.0, 1.0374999999999996], [268.0, 0.8153846153846153], [271.0, 1.0], [265.0, 1.3837209302325588], [266.0, 0.8591549295774646], [267.0, 0.7916666666666665], [286.0, 1.0], [287.0, 1.0], [285.0, 1.0], [283.0, 0.33333333333333337], [281.0, 1.0], [277.0, 0.5], [276.0, 1.0], [273.0, 0.0], [272.0, 0.0], [296.0, 0.3333333333333333], [301.0, 0.75], [300.0, 0.0], [291.0, 1.0], [290.0, 1.0], [299.0, 1.0], [298.0, 1.0], [297.0, 1.0], [295.0, 0.0], [294.0, 1.0], [293.0, 0.3333333333333333], [292.0, 1.0], [289.0, 1.0], [288.0, 1.0], [317.0, 1.0], [319.0, 1.0], [313.0, 1.0], [318.0, 0.0], [316.0, 1.0], [307.0, 1.0], [306.0, 1.0], [305.0, 1.0], [315.0, 1.0], [314.0, 0.5], [311.0, 1.0], [310.0, 1.0], [309.0, 0.5], [308.0, 1.0], [333.0, 0.0], [332.0, 0.3333333333333333], [329.0, 0.25], [326.0, 0.8], [325.0, 1.0], [324.0, 0.5], [321.0, 1.0], [320.0, 0.5], [334.0, 1.0], [331.0, 1.0], [330.0, 1.0], [349.0, 1.0], [351.0, 0.5], [348.0, 0.5], [339.0, 1.0], [338.0, 1.0], [336.0, 1.0], [337.0, 1.0], [347.0, 1.0], [346.0, 1.0], [345.0, 1.0], [343.0, 1.0], [342.0, 1.0], [341.0, 0.6666666666666667], [340.0, 0.5], [355.0, 1.0], [367.0, 0.3333333333333333], [364.0, 1.0], [366.0, 1.0], [365.0, 0.5], [363.0, 1.0], [362.0, 0.75], [360.0, 1.0], [361.0, 1.0], [358.0, 0.0], [357.0, 0.6666666666666666], [356.0, 0.5], [353.0, 0.6666666666666667], [352.0, 0.0], [370.0, 1.0], [381.0, 0.5], [380.0, 1.0], [371.0, 1.0], [377.0, 0.0], [375.0, 0.75], [374.0, 19.666666666666668], [372.0, 0.0], [369.0, 1.0], [368.0, 1.0], [382.0, 1.0], [397.0, 1.0], [395.0, 1.0], [396.0, 0.5], [385.0, 1.0], [384.0, 1.0], [394.0, 0.75], [393.0, 1.0], [392.0, 0.0], [399.0, 0.0], [398.0, 1.0], [391.0, 0.5], [390.0, 1.0], [388.0, 0.0], [389.0, 0.0], [403.0, 0.5], [414.0, 0.0], [413.0, 0.6666666666666666], [410.0, 1.0], [406.0, 0.6666666666666667], [405.0, 1.0], [404.0, 1.0], [400.0, 1.0], [402.0, 0.0], [407.0, 0.5], [412.0, 1.0], [411.0, 1.0], [409.0, 1.0], [430.0, 1.0], [429.0, 1.0], [419.0, 1.0], [426.0, 0.8], [427.0, 0.0], [424.0, 1.0], [423.0, 0.5], [425.0, 1.0], [422.0, 0.5], [421.0, 1.0], [420.0, 0.0], [417.0, 0.5], [416.0, 1.0], [435.0, 0.5], [447.0, 1.0], [445.0, 1.0], [446.0, 1.0], [441.0, 0.0], [440.0, 1.0], [439.0, 1.0], [438.0, 1.0], [436.0, 0.8333333333333334], [437.0, 1.0], [433.0, 1.0], [432.0, 0.0], [450.0, 0.5], [458.0, 1.0], [457.0, 1.0], [452.0, 1.0], [451.0, 0.16666666666666669], [449.0, 0.0], [455.0, 1.0], [454.0, 1.0], [448.0, 1.0], [476.0, 1.4000000000000001], [464.0, 1.0], [467.0, 0.6153846153846153], [468.0, 1.0], [469.0, 1.0], [471.0, 0.0], [472.0, 1.1111111111111112], [474.0, 1.0], [475.0, 1.3333333333333333], [477.0, 1.5624999999999993], [478.0, 4.206896551724139], [479.0, 17.187500000000004], [481.0, 9.957943925233643], [480.0, 21.29813664596273], [482.0, 0.8400000000000002], [483.0, 0.5161290322580646], [484.0, 3.975609756097561], [485.0, 13.857142857142861], [486.0, 14.743119266055047], [487.0, 2.574358974358976], [488.0, 1.0], [494.0, 19.928571428571427], [495.0, 14.47513812154696], [492.0, 13.26241134751773], [493.0, 11.125], [489.0, 1.346820809248554], [491.0, 8.5], [497.0, 0.8484848484848486], [496.0, 5.172661870503597], [498.0, 1.42], [499.0, 10.60330578512397], [500.0, 2.7999999999999994], [501.0, 1.2650602409638558], [502.0, 0.6799999999999999], [503.0, 2.6338028169014085], [511.0, 0.0], [507.0, 0.9487179487179487], [506.0, 0.9375], [505.0, 3.1777777777777776], [504.0, 6.627777777777781], [508.0, 0.5], [538.0, 1.0], [539.0, 1.0], [536.0, 1.0], [519.0, 1.0], [516.0, 0.5], [515.0, 1.0], [513.0, 1.0], [532.0, 1.0], [531.0, 0.6], [529.0, 0.5], [527.0, 0.5], [526.0, 1.0], [525.0, 1.0], [523.0, 1.0], [521.0, 1.0], [560.0, 0.0], [572.0, 1.0], [574.0, 1.0], [569.0, 1.0], [551.0, 0.6666666666666667], [549.0, 1.0], [547.0, 1.0], [544.0, 0.4], [567.0, 1.0], [566.0, 1.0], [565.0, 1.0], [564.0, 0.0], [559.0, 1.0], [558.0, 0.0], [555.0, 0.0], [553.0, 1.0], [605.0, 1.0], [607.0, 0.0], [603.0, 1.0], [601.0, 0.0], [600.0, 1.0], [583.0, 1.0], [581.0, 0.0], [578.0, 1.0], [576.0, 0.25], [590.0, 1.0], [589.0, 1.0], [588.0, 1.0], [585.0, 1.0], [584.0, 1.0], [598.0, 1.0], [597.0, 0.0], [594.0, 1.0], [592.0, 0.0], [634.0, 1.0], [638.0, 1.0], [639.0, 1.0], [635.0, 1.0], [633.0, 0.75], [632.0, 1.0], [631.0, 1.0], [624.0, 1.0], [623.0, 1.0], [608.0, 1.0], [611.0, 0.0], [610.0, 1.0], [615.0, 0.5], [612.0, 1.0], [622.0, 1.0], [618.0, 1.0], [617.0, 1.0], [616.0, 1.0], [668.0, 0.25], [671.0, 1.0], [670.0, 1.0], [656.0, 0.33333333333333337], [667.0, 1.0], [666.0, 1.0], [665.0, 0.8], [664.0, 1.0], [655.0, 0.0], [645.0, 0.0], [643.0, 0.0], [640.0, 1.0], [652.0, 1.0], [663.0, 0.6666666666666667], [662.0, 0.875], [660.0, 0.0], [661.0, 9.320895522388048], [657.0, 1.0], [701.0, 1.0], [702.0, 1.0], [703.0, 0.0], [698.0, 0.5], [700.0, 1.0], [699.0, 0.0], [696.0, 0.4], [687.0, 0.0], [672.0, 1.0], [675.0, 0.5], [677.0, 1.0], [676.0, 0.6666666666666667], [674.0, 1.0], [679.0, 0.75], [678.0, 0.75], [686.0, 1.0], [685.0, 1.0], [684.0, 0.6666666666666667], [683.0, 0.0], [682.0, 1.0], [681.0, 0.6666666666666667], [680.0, 1.0], [693.0, 1.0], [695.0, 0.0], [694.0, 0.5], [690.0, 0.5], [692.0, 0.0], [691.0, 0.33333333333333337], [689.0, 1.0], [688.0, 1.0], [731.0, 0.0], [723.0, 1.0], [735.0, 1.0], [734.0, 0.3333333333333333], [733.0, 1.0], [720.0, 1.0], [730.0, 0.6666666666666666], [729.0, 1.0], [719.0, 0.33333333333333337], [718.0, 1.0], [704.0, 1.0], [708.0, 0.75], [706.0, 0.8], [711.0, 1.0], [710.0, 0.0], [728.0, 1.0], [709.0, 0.6666666666666667], [717.0, 1.0], [713.0, 0.3333333333333333], [716.0, 0.4], [715.0, 1.0], [727.0, 1.0], [726.0, 0.0], [725.0, 1.0], [724.0, 1.0], [722.0, 0.5], [721.0, 0.5], [760.0, 0.0], [766.0, 1.75], [767.0, 2.0], [752.0, 1.0], [764.0, 2.0], [762.0, 1.75], [761.0, 0.0], [759.0, 1.25], [750.0, 0.75], [751.0, 1.0], [736.0, 1.0], [739.0, 1.0], [738.0, 1.0], [743.0, 0.6666666666666666], [742.0, 1.0], [741.0, 1.0], [749.0, 0.6666666666666666], [748.0, 0.0], [747.0, 0.5], [746.0, 0.0], [745.0, 1.0], [744.0, 0.5], [758.0, 1.0], [755.0, 1.0], [757.0, 1.0], [754.0, 1.2], [775.0, 1.0], [781.0, 3.0], [782.0, 1.0], [768.0, 1.3333333333333333], [769.0, 3.0], [779.0, 1.8], [780.0, 4.666666666666667], [784.0, 2.333333333333333], [791.0, 5.5], [790.0, 6.0], [789.0, 5.0], [787.0, 5.0], [786.0, 5.0], [785.0, 4.0], [799.0, 27.316455696202528], [797.0, 1.326315789473684], [798.0, 4.104477611940299], [795.0, 1.3529411764705883], [796.0, 1.3414634146341464], [793.0, 1.0], [792.0, 6.0], [794.0, 4.666666666666667], [778.0, 2.833333333333333], [777.0, 0.5], [776.0, 1.0], [771.0, 1.0], [774.0, 3.0], [772.0, 3.0], [770.0, 1.0], [803.0, 0.6124999999999997], [800.0, 35.37113402061857], [812.0, 0.6086956521739127], [814.0, 1.4166666666666659], [813.0, 1.0280898876404494], [815.0, 2.441379310344827], [810.0, 2.9396226415094335], [811.0, 3.6865671641791034], [801.0, 25.41683778234086], [802.0, 1.5434782608695656], [804.0, 0.825688073394495], [805.0, 12.7953216374269], [806.0, 23.95424836601307], [807.0, 9.705882352941169], [831.0, 6.0], [830.0, 8.0], [829.0, 8.0], [819.0, 1.0], [818.0, 7.0], [817.0, 7.0], [821.0, 7.0], [816.0, 0.42857142857142855], [823.0, 4.25], [822.0, 5.0], [828.0, 1.0], [826.0, 0.5], [825.0, 5.2], [808.0, 0.7090909090909091], [809.0, 0.8294117647058824], [857.0, 1.0], [861.0, 4.25], [863.0, 6.0], [851.0, 4.5], [850.0, 1.0], [849.0, 5.8], [848.0, 1.0], [853.0, 5.666666666666667], [852.0, 0.0], [860.0, 5.666666666666667], [859.0, 4.0], [858.0, 4.666666666666667], [856.0, 5.333333333333333], [839.0, 6.0], [838.0, 0.0], [837.0, 7.666666666666667], [836.0, 3.3333333333333335], [835.0, 0.0], [834.0, 4.0], [833.0, 1.0], [832.0, 4.5], [847.0, 7.0], [846.0, 7.0], [845.0, 8.0], [844.0, 1.0], [842.0, 0.5], [843.0, 8.0], [841.0, 4.5], [840.0, 8.0], [855.0, 4.0], [854.0, 1.0], [882.0, 5.0], [893.0, 4.0], [891.0, 9.5], [895.0, 9.0], [890.0, 0.5], [889.0, 6.666666666666667], [888.0, 5.0], [877.0, 9.666666666666666], [864.0, 4.5], [878.0, 7.0], [868.0, 4.0], [866.0, 7.0], [865.0, 5.0], [871.0, 5.25], [870.0, 4.666666666666667], [869.0, 0.0], [874.0, 6.166666666666667], [873.0, 2.6666666666666665], [872.0, 1.0], [887.0, 4.428571428571429], [886.0, 9.0], [885.0, 1.0], [883.0, 6.333333333333333], [881.0, 1.0], [880.0, 6.25], [921.0, 7.666666666666667], [911.0, 5.5], [914.0, 0.5], [915.0, 1.0], [916.0, 1.0], [917.0, 2.6], [918.0, 2.0], [919.0, 11.0], [913.0, 8.6], [912.0, 5.0], [922.0, 6.5], [924.0, 10.4], [923.0, 10.0], [926.0, 11.0], [925.0, 11.0], [927.0, 11.0], [920.0, 3.0], [902.0, 3.0], [897.0, 3.6666666666666665], [898.0, 9.0], [901.0, 9.0], [899.0, 9.0], [910.0, 4.0], [909.0, 3.6666666666666665], [908.0, 8.571428571428571], [907.0, 1.3333333333333333], [906.0, 0.0], [904.0, 6.666666666666667], [905.0, 5.0], [934.0, 36.18461538461539], [930.0, 4.857142857142857], [929.0, 2.6666666666666665], [928.0, 11.0], [942.0, 0.8935185185185187], [943.0, 0.9105691056910571], [940.0, 35.134361233480156], [941.0, 0.6666666666666665], [938.0, 58.41624365482236], [939.0, 55.39999999999999], [931.0, 2.2666666666666675], [932.0, 5.148648648648649], [933.0, 19.013333333333335], [935.0, 42.390624999999986], [952.0, 1.144927536231884], [953.0, 13.059701492537313], [954.0, 27.63953488372094], [955.0, 34.87134502923982], [956.0, 40.8092105263158], [957.0, 28.556989247311837], [958.0, 1.5219780219780208], [959.0, 0.9631901840490801], [944.0, 4.54225352112676], [945.0, 10.544554455445546], [946.0, 1.0854271356783922], [947.0, 1.377622377622377], [948.0, 1.4398496240601502], [949.0, 2.7303921568627456], [950.0, 1.0264317180616742], [951.0, 1.1524822695035464], [936.0, 48.86274509803922], [937.0, 54.542857142857144], [966.0, 22.30061349693252], [961.0, 18.0], [960.0, 3.903508771929826], [974.0, 28.854545454545455], [975.0, 43.65624999999999], [972.0, 3.794117647058823], [973.0, 7.444444444444444], [970.0, 17.554347826086982], [971.0, 7.436681222707422], [962.0, 15.875399361022353], [964.0, 25.000000000000004], [965.0, 27.982608695652175], [967.0, 30.066666666666674], [984.0, 43.01801801801803], [985.0, 5.391025641025639], [986.0, 1.0], [987.0, 1.4653061224489792], [988.0, 4.366515837104074], [989.0, 14.394366197183107], [990.0, 0.8514285714285716], [991.0, 1.1352459016393448], [976.0, 49.39682539682541], [977.0, 52.64516129032258], [978.0, 58.893617021276604], [979.0, 61.66666666666667], [980.0, 64.94505494505496], [981.0, 67.4871794871795], [982.0, 68.30481283422456], [983.0, 64.08823529411765], [968.0, 31.604856512141282], [969.0, 3.2325581395348846], [997.0, 1.3472222222222225], [993.0, 3.0238095238095246], [992.0, 0.9596412556053814], [1007.0, 60.333333333333336], [1006.0, 15.0], [1004.0, 54.666666666666664], [1005.0, 53.44444444444444], [1002.0, 45.083333333333336], [1003.0, 45.642857142857146], [994.0, 7.476780185758512], [995.0, 0.9037328094302552], [996.0, 1.0], [999.0, 3.25], [998.0, 14.0], [1016.0, 41.0], [1017.0, 68.0], [1018.0, 42.0], [1019.0, 68.0], [1023.0, 26.2], [1009.0, 38.25], [1010.0, 38.666666666666664], [1011.0, 39.0], [1012.0, 30.833333333333336], [1015.0, 66.0], [1014.0, 14.0], [1000.0, 20.341463414634145], [1001.0, 44.583333333333336], [1074.0, 32.8], [1032.0, 36.666666666666664], [1028.0, 75.0], [1026.0, 15.0], [1024.0, 33.666666666666664], [1048.0, 68.5], [1052.0, 16.0], [1046.0, 39.0], [1040.0, 49.0], [1044.0, 16.0], [1034.0, 80.0], [1036.0, 16.0], [1038.0, 37.666666666666664], [1072.0, 97.0], [1076.0, 80.0], [1078.0, 72.33333333333333], [1080.0, 58.25], [1082.0, 58.0], [1084.0, 101.0], [1086.0, 14.0], [1056.0, 79.875], [1066.0, 94.0], [1062.0, 16.0], [1060.0, 17.0], [1070.0, 16.0], [1068.0, 16.0], [1138.0, 34.75714285714286], [1118.0, 9.62204724409449], [1114.0, 5.15625], [1110.0, 97.72131147540982], [1092.0, 42.666666666666664], [1090.0, 14.0], [1088.0, 14.0], [1094.0, 14.0], [1116.0, 1.3236151603498543], [1112.0, 96.60465116279063], [1096.0, 101.0], [1120.0, 1.7360703812316716], [1148.0, 18.779922779922774], [1150.0, 7.294117647058829], [1144.0, 31.325000000000003], [1146.0, 47.527397260274], [1140.0, 0.7260273972602741], [1142.0, 12.853571428571426], [1136.0, 25.21052631578948], [1102.0, 14.0], [1100.0, 13.0], [1098.0, 13.333333333333334], [1122.0, 3.6923076923076934], [1124.0, 12.583333333333336], [1126.0, 52.14414414414413], [1128.0, 60.52999999999999], [1130.0, 61.5755395683453], [1132.0, 8.076923076923078], [1134.0, 2.816901408450703], [1108.0, 95.95348837209299], [1106.0, 12.0], [1104.0, 13.166666666666666], [1158.0, 12.070376432078563], [1152.0, 28.368888888888897], [1180.0, 0.0], [1182.0, 29.142543859649106], [1176.0, 8.25287356321839], [1178.0, 8.215613382899628], [1172.0, 1.712871287128713], [1174.0, 29.160000000000004], [1154.0, 8.332298136645962], [1156.0, 13.927350427350415], [1160.0, 9.333333333333332], [1162.0, 37.80379746835444], [1164.0, 17.320754716981124], [1166.0, 61.933673469387756], [1184.0, 7.972602739726016], [1212.0, 41.955056179775276], [1214.0, 51.46376811594204], [1208.0, 5.292712066905619], [1210.0, 2.9184397163120566], [1204.0, 20.420420420420434], [1206.0, 1.0666666666666667], [1200.0, 11.404761904761905], [1202.0, 26.11693548387095], [1186.0, 16.851063829787233], [1188.0, 52.9375], [1190.0, 64.39086294416245], [1192.0, 78.57142857142857], [1194.0, 58.80939226519339], [1196.0, 0.6666666666666665], [1198.0, 6.557213930348256], [1168.0, 58.98701298701299], [1170.0, 1.21078431372549], [1222.0, 5.8444444444444485], [1216.0, 6.999999999999999], [1244.0, 11.890728476821186], [1246.0, 29.28187919463087], [1240.0, 18.380952380952376], [1242.0, 24.50155279503109], [1236.0, 33.11544461778471], [1238.0, 22.609053497942394], [1218.0, 40.20621468926555], [1220.0, 48.14012738853501], [1224.0, 0.8313953488372093], [1226.0, 32.58394160583942], [1228.0, 49.17465753424658], [1230.0, 12.018292682926827], [1248.0, 42.56187290969902], [1250.0, 12.804281345565766], [1252.0, 24.04067796610171], [1254.0, 28.298755186721984], [1232.0, 3.2307692307692317], [1234.0, 19.911838790931977], [1035.0, 48.5], [1053.0, 52.0], [1051.0, 16.0], [1055.0, 16.0], [1049.0, 87.0], [1045.0, 66.25], [1047.0, 16.0], [1043.0, 49.0], [1025.0, 72.0], [1027.0, 50.4], [1029.0, 76.0], [1033.0, 79.0], [1031.0, 16.0], [1037.0, 48.0], [1039.0, 16.0], [1073.0, 98.2], [1075.0, 43.666666666666664], [1077.0, 44.333333333333336], [1081.0, 101.0], [1083.0, 44.0], [1059.0, 65.66666666666667], [1057.0, 16.666666666666668], [1063.0, 16.0], [1061.0, 16.0], [1087.0, 14.0], [1085.0, 14.0], [1065.0, 93.0], [1067.0, 42.333333333333336], [1069.0, 56.0], [1071.0, 80.8], [1137.0, 30.01525054466229], [1119.0, 0.6758620689655171], [1093.0, 57.5], [1089.0, 14.0], [1095.0, 14.0], [1099.0, 13.0], [1097.0, 14.0], [1117.0, 6.084832904884315], [1115.0, 0.762589928057554], [1113.0, 65.75643564356439], [1111.0, 100.41134751773048], [1101.0, 57.5], [1103.0, 101.0], [1139.0, 27.72166998011928], [1141.0, 14.168831168831174], [1143.0, 14.357142857142858], [1145.0, 42.61064425770307], [1147.0, 41.216284987277355], [1149.0, 8.206477732793518], [1151.0, 6.733333333333333], [1121.0, 2.1265822784810102], [1123.0, 0.8133333333333331], [1125.0, 38.736], [1127.0, 59.2735849056604], [1129.0, 66.47794117647062], [1131.0, 23.15160796324654], [1133.0, 3.4343220338983076], [1135.0, 20.949152542372886], [1107.0, 100.33333333333333], [1105.0, 12.0], [1109.0, 96.33333333333333], [1165.0, 37.131147540983605], [1155.0, 0.7730061349693248], [1153.0, 17.182795698924732], [1181.0, 19.290000000000003], [1183.0, 26.84615384615385], [1177.0, 0.6170212765957447], [1179.0, 13.388349514563112], [1173.0, 20.35911602209943], [1175.0, 18.785046728971963], [1157.0, 20.75], [1159.0, 3.0], [1161.0, 33.83333333333333], [1163.0, 1.75], [1167.0, 60.79365079365077], [1201.0, 21.52108433734939], [1203.0, 31.904918032786878], [1205.0, 2.1178247734138975], [1207.0, 1.5631768953068583], [1209.0, 3.046153846153847], [1211.0, 32.0], [1213.0, 49.93750000000001], [1215.0, 35.32031249999998], [1185.0, 8.833333333333334], [1187.0, 36.33333333333334], [1189.0, 65.66141732283467], [1191.0, 68.64150943396223], [1193.0, 68.26243093922658], [1195.0, 26.507109004739352], [1197.0, 2.2094594594594588], [1199.0, 5.057142857142856], [1169.0, 37.83398437499992], [1171.0, 4.974358974358975], [1223.0, 10.914691943127963], [1217.0, 24.32926829268293], [1247.0, 38.98275862068966], [1243.0, 12.986013986013988], [1245.0, 2.5072463768115947], [1239.0, 27.32584269662922], [1237.0, 3.0], [1241.0, 39.053254437869825], [1219.0, 40.86868686868686], [1221.0, 43.40402193784282], [1225.0, 7.987804878048781], [1227.0, 46.351239669421496], [1229.0, 36.18037135278512], [1231.0, 0.9236947791164655], [1249.0, 37.62871287128713], [1251.0, 7.971428571428572], [1253.0, 15.348780487804882], [1255.0, 20.982658959537595], [1233.0, 17.442508710801395], [1235.0, 13.214285714285714]], "isOverall": false, "label": "HTTP Request character_id", "isController": false}, {"data": [[990.566125138643, 19.446026619691125]], "isOverall": false, "label": "HTTP Request character_id-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1255.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.75927416E12, "maxY": 2688335.65, "series": [{"data": [[1.75927416E12, 2688335.65]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75927416E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75927416E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 19.446026619691125, "minX": 1.75927416E12, "maxY": 19.446026619691125, "series": [{"data": [[1.75927416E12, 19.446026619691125]], "isOverall": false, "label": "HTTP Request character_id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75927416E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75927416E12, "maxY": 4.9E-324, "series": [{"data": [[1.75927416E12, 0.0]], "isOverall": false, "label": "HTTP Request character_id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75927416E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 19.427350427350454, "minX": 1.75927416E12, "maxY": 19.427350427350454, "series": [{"data": [[1.75927416E12, 19.427350427350454]], "isOverall": false, "label": "HTTP Request character_id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75927416E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.7976931348623157E308, "minX": 1.7976931348623157E308, "maxY": 4.9E-324, "series": [{"data": [], "isOverall": false, "label": "Max", "isController": false}, {"data": [], "isOverall": false, "label": "Min", "isController": false}, {"data": [], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "Median", "isController": false}, {"data": [], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 4.9E-324, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 1341.0, "maxY": 27.0, "series": [{"data": [[8304.0, 4.0], [8595.0, 23.0], [8522.0, 18.0], [8252.0, 18.0], [9100.0, 27.0], [2274.0, 11.0], [1341.0, 1.0], [7489.0, 1.0], [7431.0, 10.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 9100.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1341.0, "maxY": 4.9E-324, "series": [{"data": [[8304.0, 0.0], [8595.0, 0.0], [8522.0, 0.0], [8252.0, 0.0], [9100.0, 0.0], [2274.0, 0.0], [1341.0, 0.0], [7489.0, 0.0], [7431.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 9100.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1021.8, "minX": 1.75927416E12, "maxY": 1021.8, "series": [{"data": [[1.75927416E12, 1021.8]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75927416E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.75927416E12, "maxY": 1021.75, "series": [{"data": [[1.75927416E12, 1021.75]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.75927416E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75927416E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1021.8, "minX": 1.75927416E12, "maxY": 1021.8, "series": [{"data": [[1.75927416E12, 1021.8]], "isOverall": false, "label": "HTTP Request character_id-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75927416E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1021.8, "minX": 1.75927416E12, "maxY": 1021.8, "series": [{"data": [], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75927416E12, 1021.8]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75927416E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

